package com.example.iot_ha.data.mqtt

import android.util.Log
import com.example.iot_ha.data.local.broker.Broker
import org.eclipse.paho.client.mqttv3.IMqttDeliveryToken
import org.eclipse.paho.client.mqttv3.MqttCallback
import org.eclipse.paho.client.mqttv3.MqttClient
import org.eclipse.paho.client.mqttv3.MqttConnectOptions
import org.eclipse.paho.client.mqttv3.MqttException
import org.eclipse.paho.client.mqttv3.MqttMessage

object MQTTClient {
    private var mqttClient: MqttClient? = null
    private var broker: Broker? = null
    private var messageHandler: MQTTMessageHandler? = null

    fun initialize(broker: Broker, handler: MQTTMessageHandler): MQTTClient {
        this.broker = broker
        this.messageHandler = handler
        return this
    }

    fun reinitialize(newBroker: Broker, handler: MQTTMessageHandler): MQTTClient {
        disconnect()
        broker = newBroker
        messageHandler = handler
        return this
    }

    fun getInstance(): MQTTClient {
        return this
    }

    fun connect(): Boolean {
        return try {
            val clientId = MqttClient.generateClientId()
            mqttClient =
                MqttClient("tcp://${broker?.serverUri}:${broker?.serverPort}", clientId, null)

            val options = MqttConnectOptions().apply {
                userName = broker?.user
                password = broker?.password?.toCharArray()
                isAutomaticReconnect = true
                isCleanSession = true
            }

            mqttClient?.connect(options)
            Log.i("MQTT", "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
            true
        } catch (e: MqttException) {
            Log.e("MQTT", "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${e.reasonCode} - ${e.message}")
            false
        }
    }

    fun subscribe(topic: String) {
        try {
            mqttClient?.setCallback(object : MqttCallback {
                override fun connectionLost(cause: Throwable?) {
                    Log.e("MQTT", "–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ: ${cause?.message}")
                }

                override fun messageArrived(topic: String, message: MqttMessage) {
                    val payload = message.toString()
                    Log.i("MQTT", "üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: $message –Ω–∞ —Ç–æ–ø–∏–∫: $topic")

                    messageHandler?.handleMessage(topic, payload)
                }

                override fun deliveryComplete(token: IMqttDeliveryToken) {
                    Log.i("MQTT", "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                }
            })

            mqttClient?.subscribe(topic)
            Log.i("MQTT", "üì° –ü–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ $topic")
        } catch (e: MqttException) {
            Log.e("MQTT", "–û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏: ${e.reasonCode} - ${e.message}")
        }
    }

    fun publish(topic: String, payload: String, qos: Int = 1, retained: Boolean = false) {
        try {
            val message = MqttMessage(payload.toByteArray()).apply {
                this.qos = qos
                this.isRetained = retained
            }
            mqttClient?.publish(topic, message)
            Log.i("MQTT", "üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: $payload –≤ —Ç–æ–ø–∏–∫: $topic")
        } catch (e: MqttException) {
            Log.e("MQTT", "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: ${e.reasonCode} - ${e.message}")
        }
    }

    private fun disconnect() {
        try {
            mqttClient?.disconnect()
            Log.i("MQTT", "üîå –û—Ç–∫–ª—é—á–µ–Ω –æ—Ç –±—Ä–æ–∫–µ—Ä–∞")
        } catch (e: MqttException) {
            Log.e("MQTT", "–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è: ${e.message}")
        }
    }
}
