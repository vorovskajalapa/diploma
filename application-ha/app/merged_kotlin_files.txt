BrokerDAOTest.kt

0001. package com.example.iot_ha
0002. 
0003. import android.content.Context
0004. import androidx.room.Room
0005. import androidx.test.core.app.ApplicationProvider
0006. import androidx.test.ext.junit.runners.AndroidJUnit4
0007. import com.example.iot_ha.data.local.RoomLocalDatabase
0008. import com.example.iot_ha.data.local.broker.Broker
0009. import com.example.iot_ha.data.local.broker.BrokerDAO
0010. import kotlinx.coroutines.runBlocking
0011. import org.junit.After
0012. import org.junit.Before
0013. import org.junit.Test
0014. import org.junit.runner.RunWith
0015. import com.google.common.truth.Truth.assertThat
0016. 
0017. @RunWith(AndroidJUnit4::class)
0018. class BrokerDAOTest {
0019. 
0020.     private lateinit var database: RoomLocalDatabase
0021.     private lateinit var brokerDao: BrokerDAO
0022. 
0023.     @Before
0024.     fun setup() {
0025.         val context = ApplicationProvider.getApplicationContext<Context>()
0026.         database = Room.inMemoryDatabaseBuilder(
0027.             context,
0028.             RoomLocalDatabase::class.java
0029.         ).allowMainThreadQueries()
0030.             .build()
0031. 
0032.         brokerDao = database.brokerDAO()
0033.     }
0034. 
0035.     @After
0036.     fun teardown() {
0037.         database.close()
0038.     }
0039. 
0040.     @Test
0041.     fun insertBroker_andGetAllBrokers() = runBlocking {
0042.         val broker = Broker(
0043.             serverUri = "tcp://example.com",
0044.             serverPort = 1883,
0045.             user = "user",
0046.             password = "pass"
0047.         )
0048. 
0049.         brokerDao.insert(broker)
0050. 
0051.         val brokers = brokerDao.getAllBrokers()
0052. 
0053.         assertThat(brokers).isNotEmpty()
0054.         assertThat(brokers.first().serverUri).isEqualTo("tcp://example.com")
0055.         assertThat(brokers.first().serverPort).isEqualTo(1883)
0056.     }
0057. 
0058.     @Test
0059.     fun insertMultipleBrokers_andGetLastBroker() = runBlocking {
0060.         val broker1 = Broker(serverUri = "tcp://first.com", serverPort = 1883, user = null, password = null)
0061.         val broker2 = Broker(serverUri = "tcp://second.com", serverPort = 1884, user = "admin", password = "adminpass")
0062. 
0063.         brokerDao.insert(broker1)
0064.         brokerDao.insert(broker2)
0065. 
0066.         val lastBroker = brokerDao.getLastBroker()
0067. 
0068.         assertThat(lastBroker).isNotNull()
0069.         assertThat(lastBroker?.serverUri).isEqualTo("tcp://second.com")
0070.     }
0071. 
0072.     @Test
0073.     fun insertAndDeleteBroker() = runBlocking {
0074.         val broker = Broker(
0075.             serverUri = "tcp://delete.com",
0076.             serverPort = 1885,
0077.             user = "delete",
0078.             password = "deletepass"
0079.         )
0080. 
0081.         brokerDao.insert(broker)
0082. 
0083.         val brokersBeforeDelete = brokerDao.getAllBrokers()
0084.         assertThat(brokersBeforeDelete).hasSize(1)
0085. 
0086.         brokerDao.deleteBroker(brokersBeforeDelete.first())
0087. 
0088.         val brokersAfterDelete = brokerDao.getAllBrokers()
0089.         assertThat(brokersAfterDelete).isEmpty()
0090.     }
0091. }


ExampleInstrumentedTest.kt

0092. package com.example.iot_ha
0093. 
0094. import androidx.test.ext.junit.runners.AndroidJUnit4
0095. import androidx.test.platform.app.InstrumentationRegistry
0096. import org.junit.Assert.assertEquals
0097. import org.junit.Test
0098. import org.junit.runner.RunWith
0099. 
0100. /**
0101.  * Instrumented test, which will execute on an Android device.
0102.  *
0103.  * See [testing documentation](http://d.android.com/tools/testing).
0104.  */
0105. @RunWith(AndroidJUnit4::class)
0106. class ExampleInstrumentedTest {
0107.     @Test
0108.     fun useAppContext() {
0109.         // Context of the app under test.
0110.         val appContext = InstrumentationRegistry.getInstrumentation().targetContext
0111.         assertEquals("com.example.iot_ha", appContext.packageName)
0112.     }
0113. }

MQTTClientTest.kt

0114. package com.example.iot_ha
0115. 
0116. import android.util.Log
0117. import com.example.iot_ha.data.local.broker.Broker
0118. import com.example.iot_ha.data.mqtt.MQTTClient
0119. import com.example.iot_ha.data.mqtt.domain.MQTTMessageHandler
0120. import org.eclipse.paho.client.mqttv3.MqttConnectOptions
0121. import org.eclipse.paho.client.mqttv3.MqttException
0122. import org.eclipse.paho.client.mqttv3.MqttMessage
0123. import org.junit.Before
0124. import org.junit.Test
0125. import org.junit.Assert.*
0126. import java.util.concurrent.CountDownLatch
0127. 
0128. class MQTTClientTest {
0129. 
0130.     private lateinit var mqttClient: MQTTClient
0131.     private lateinit var broker: Broker
0132.     private lateinit var messageHandler: MQTTMessageHandler
0133. 
0134.     @Before
0135.     fun setUp() {
0136.         broker = Broker(
0137.             id = 1,
0138.             serverUri = "yahor.monster",
0139.             serverPort = 1883,
0140.             user = null,
0141.             password = null
0142.         )
0143. 
0144.         mqttClient = MQTTClient.initialize(broker, null)
0145.     }
0146. 
0147.     @Test
0148.     fun testConnect() {
0149.         val latch = CountDownLatch(1)
0150.         val success = mqttClient.connect()
0151.         assertTrue(success)
0152.         assertNotNull(mqttClient)
0153.         mqttClient.publish("test/topic", "Hello MQTT!", 1, false)
0154.         mqttClient.disconnect()
0155.     }
0156. 
0157.     @Test
0158.     fun testSubscribeAndReceiveMessage() {
0159.         val latch = CountDownLatch(1)
0160.         mqttClient.connect()
0161.         mqttClient.subscribe("test/topic")
0162.         mqttClient.publish("test/topic", "Test message", 1, false)
0163.         mqttClient.disconnect()
0164.     }
0165. }


MainActivity.kt

0166. package com.example.iot_ha
0167. 
0168. import android.os.Bundle
0169. import androidx.activity.ComponentActivity
0170. import androidx.activity.compose.setContent
0171. import androidx.navigation.compose.rememberNavController
0172. import com.example.iot_ha.ui.navigation.AppNavHost
0173. 
0174. class MainActivity : ComponentActivity() {
0175.     override fun onCreate(savedInstanceState: Bundle?) {
0176.         super.onCreate(savedInstanceState)
0177. 
0178.         setContent {
0179.             val navController = rememberNavController()
0180.             AppNavHost(navController, "auth")
0181.         }
0182.     }
0183. }
0184. 


MapTypeConvertor.kt

0185. package com.example.iot_ha.data.local
0186. 
0187. import androidx.room.TypeConverter
0188. import com.google.gson.Gson
0189. import com.google.gson.reflect.TypeToken
0190. 
0191. class MapTypeConvertor {
0192.     private val gson = Gson()
0193. 
0194.     @TypeConverter
0195.     fun fromMap(map: Map<String, String>?): String? {
0196.         return gson.toJson(map)
0197.     }
0198. 
0199.     @TypeConverter
0200.     fun toMap(json: String?): Map<String, String>? {
0201.         return json?.let {
0202.             val type = object : TypeToken<Map<String, String>>() {}.type
0203.             gson.fromJson(it, type)
0204.         }
0205.     }
0206. }
0207. 


RoomLocalDatabase.kt

0208. package com.example.iot_ha.data.local
0209. 
0210. import android.content.Context
0211. import androidx.room.Database
0212. import androidx.room.Room
0213. import androidx.room.RoomDatabase
0214. import androidx.room.TypeConverters
0215. import com.example.iot_ha.data.local.broker.Broker
0216. import com.example.iot_ha.data.local.broker.BrokerDAO
0217. import com.example.iot_ha.data.local.command.Command
0218. import com.example.iot_ha.data.local.command.CommandDAO
0219. import com.example.iot_ha.data.local.device.Device
0220. import com.example.iot_ha.data.local.device.DeviceDAO
0221. import com.example.iot_ha.data.local.room.RoomEntity
0222. import com.example.iot_ha.data.local.room.RoomEntityDAO
0223. 
0224. @Database(
0225.     entities = [Broker::class, Device::class, Command::class, RoomEntity::class],
0226.     version = 1,
0227.     exportSchema = false
0228. )
0229. @TypeConverters(MapTypeConvertor::class)
0230. abstract class RoomLocalDatabase : RoomDatabase() {
0231.     abstract fun brokerDAO(): BrokerDAO
0232.     abstract fun deviceDAO(): DeviceDAO
0233.     abstract fun commandDAO(): CommandDAO
0234.     abstract fun roomEntityDAO(): RoomEntityDAO
0235. 
0236.     companion object {
0237.         @Volatile
0238.         private var INSTANCE: RoomLocalDatabase? = null
0239. 
0240.         fun getInstance(context: Context): RoomLocalDatabase {
0241.             return INSTANCE ?: synchronized(this) {
0242.                 val instance = Room.databaseBuilder(
0243.                     context.applicationContext,
0244.                     RoomLocalDatabase::class.java,
0245.                     "room_local_database"
0246.                 ).build()
0247.                 INSTANCE = instance
0248.                 instance
0249.             }
0250.         }
0251.     }
0252. }

Broker.kt

0253. package com.example.iot_ha.data.local.broker
0254. 
0255. import androidx.room.Entity
0256. import androidx.room.PrimaryKey
0257. 
0258. @Entity(tableName = "brokers")
0259. data class Broker(
0260.     @PrimaryKey(autoGenerate = true) val id: Int = 0,
0261.     val serverUri: String,
0262.     val serverPort: Int,
0263.     val user: String?,
0264.     val password: String?
0265. )
0266. 


BrokerDAO.kt

0267. package com.example.iot_ha.data.local.broker
0268. 
0269. import androidx.room.Dao
0270. import androidx.room.Delete
0271. import androidx.room.Insert
0272. import androidx.room.OnConflictStrategy
0273. import androidx.room.Query
0274. 
0275. @Dao
0276. interface BrokerDAO {
0277.     @Insert(onConflict = OnConflictStrategy.REPLACE)
0278.     suspend fun insert(broker: Broker)
0279. 
0280.     @Query("SELECT * FROM brokers")
0281.     suspend fun getAllBrokers(): List<Broker>
0282. 
0283.     @Query("SELECT * FROM brokers ORDER BY id DESC LIMIT 1")
0284.     suspend fun getLastBroker(): Broker?
0285. 
0286.     @Delete
0287.     suspend fun deleteBroker(broker: Broker)
0288. }

BrokerState.kt

0289. package com.example.iot_ha.data.local.broker
0290. 
0291. import kotlinx.coroutines.flow.MutableStateFlow
0292. import kotlinx.coroutines.flow.StateFlow
0293. 
0294. object BrokerState {
0295.     private val _brokerId = MutableStateFlow<Int?>(null)
0296.     val brokerId: StateFlow<Int?> = _brokerId
0297. 
0298.     fun setBrokerId(id: Int) {
0299.         _brokerId.value = id
0300.     }
0301. }


DiscoveryState.kt

0302. package com.example.iot_ha.data.local.broker.discovery
0303. 
0304. import com.example.iot_ha.data.mqtt.MQTTClient
0305. import com.example.iot_ha.data.mqtt.util.Topics
0306. import com.example.iot_ha.utils.Constants
0307. import kotlinx.coroutines.CoroutineScope
0308. import kotlinx.coroutines.Dispatchers
0309. import kotlinx.coroutines.Job
0310. import kotlinx.coroutines.delay
0311. import kotlinx.coroutines.flow.MutableStateFlow
0312. import kotlinx.coroutines.flow.StateFlow
0313. import kotlinx.coroutines.launch
0314. 
0315. object DiscoveryState {
0316.     private val _isDiscoveryActive = MutableStateFlow(false)
0317.     val isDiscoveryActive: StateFlow<Boolean> = _isDiscoveryActive
0318. 
0319.     private var resetJob: Job? = null
0320. 
0321.     fun startDiscovery() {
0322.         _isDiscoveryActive.value = true
0323.         MQTTClient.publish(Topics.DISCOVERY_TOPIC, Constants.DISCOVERY_ENABLE)
0324. 
0325.         resetJob?.cancel()
0326. 
0327.         resetJob = CoroutineScope(Dispatchers.Default).launch {
0328.             delay(Constants.DISCOVERY_TIME)
0329.             _isDiscoveryActive.value = false
0330.         }
0331.     }
0332. 
0333.     fun stopDiscovery() {
0334.         _isDiscoveryActive.value = false
0335.         MQTTClient.publish(Topics.DISCOVERY_TOPIC, Constants.DISCOVERY_DISABLE)
0336.         resetJob?.cancel()
0337.     }
0338. }


Command.kt

0339. package com.example.iot_ha.data.local.command
0340. 
0341. import androidx.room.Entity
0342. import androidx.room.ForeignKey
0343. import androidx.room.PrimaryKey
0344. import androidx.room.TypeConverters
0345. import com.example.iot_ha.data.local.MapTypeConvertor
0346. import com.example.iot_ha.data.local.device.Device
0347. 
0348. @Entity(
0349.     tableName = "commands",
0350.     foreignKeys = [ForeignKey(
0351.         entity = Device::class,
0352.         parentColumns = ["id"],
0353.         childColumns = ["deviceId"],
0354.         onDelete = ForeignKey.CASCADE
0355.     )]
0356. )
0357. data class Command(
0358.     @PrimaryKey(autoGenerate = true) val id: Int = 0,
0359.     val deviceId: Int,
0360. 
0361.     val commandTopic: String,
0362. 
0363.     // for switch commands
0364.     val payloadOn: String?,
0365.     val payloadOff: String?,
0366. 
0367.     // for select commands
0368.     @TypeConverters(MapTypeConvertor::class) val options: Map<String, String>?,
0369.     val commandTemplate: String?,
0370. 
0371. 
0372.     val commandType: String,
0373. )


CommandDAO.kt

0374. package com.example.iot_ha.data.local.command
0375. 
0376. import androidx.room.Dao
0377. import androidx.room.Insert
0378. import androidx.room.OnConflictStrategy
0379. import androidx.room.Query
0380. import kotlinx.coroutines.flow.Flow
0381. 
0382. @Dao
0383. interface CommandDAO {
0384. 
0385.     @Query("SELECT * FROM commands WHERE commandTopic = :commandTopic LIMIT 1")
0386.     suspend fun getCommandByCommandTopic(commandTopic: String): Command?
0387. 
0388.     @Query("SELECT * FROM commands WHERE deviceId = :deviceId AND commandType = 'switch' LIMIT 1")
0389.     suspend fun getSwitchCommandByDeviceId(deviceId: Int): Command?
0390. 
0391.     @Insert(onConflict = OnConflictStrategy.REPLACE)
0392.     suspend fun insertCommand(command: Command)
0393. 
0394.     @Query("SELECT * FROM commands WHERE commandType = :type")
0395.     fun getCommandsByTypeFlow(type: String): Flow<List<Command>>
0396. 
0397.     @Query("SELECT * FROM commands")
0398.     fun getAllCommandsFlow(): Flow<List<Command>>
0399. }

Device.kt

0400. package com.example.iot_ha.data.local.device
0401. 
0402. import androidx.room.Entity
0403. import androidx.room.ForeignKey
0404. import androidx.room.Index
0405. import androidx.room.PrimaryKey
0406. import com.example.iot_ha.data.local.broker.Broker
0407. import com.example.iot_ha.data.local.room.RoomEntity
0408. 
0409. @Entity(
0410.     tableName = "devices",
0411.     foreignKeys = [
0412.         ForeignKey(
0413.             entity = Broker::class,
0414.             parentColumns = ["id"],
0415.             childColumns = ["brokerId"],
0416.             onDelete = ForeignKey.CASCADE
0417.         ),
0418.         ForeignKey(
0419.             entity = RoomEntity::class,
0420.             parentColumns = ["id"],
0421.             childColumns = ["roomId"],
0422.             onDelete = ForeignKey.SET_NULL
0423.         )
0424.     ],
0425.     indices = [Index(value = ["roomId"])]
0426. )
0427. data class Device(
0428.     @PrimaryKey(autoGenerate = true) val id: Int = 0,
0429.     val ieeeAddr: String,
0430.     val friendlyName: String,
0431.     val modelId: String,
0432.     val topic: String,
0433.     val roomId: Long?,
0434.     val brokerId: Int
0435. ) {
0436.     companion object {
0437.         fun create(
0438.             ieeeAddr: String,
0439.             friendlyName: String,
0440.             modelId: String,
0441.             roomId: Long?,
0442.             brokerId: Int
0443.         ): Device {
0444.             val topic = "zigbee/0x$ieeeAddr"
0445.             val name = friendlyName.ifEmpty { "0x$ieeeAddr" }
0446.             return Device(
0447.                 ieeeAddr = "0x$ieeeAddr",
0448.                 friendlyName = name,
0449.                 modelId = modelId,
0450.                 topic = topic,
0451.                 roomId = roomId,
0452.                 brokerId = brokerId
0453.             )
0454.         }
0455.     }
0456. }


DeviceDAO.kt

0457. package com.example.iot_ha.data.local.device
0458. 
0459. import androidx.room.Dao
0460. import androidx.room.Delete
0461. import androidx.room.Insert
0462. import androidx.room.OnConflictStrategy
0463. import androidx.room.Query
0464. import androidx.room.Update
0465. import kotlinx.coroutines.flow.Flow
0466. 
0467. @Dao
0468. interface DeviceDAO {
0469.     @Query("SELECT * FROM devices WHERE brokerId = :brokerId")
0470.     suspend fun getDevicesByBroker(brokerId: Int): List<Device>
0471. 
0472.     @Query("SELECT * FROM devices WHERE brokerId = :brokerId")
0473.     fun getDevicesByBrokerFlow(brokerId: Int): Flow<List<Device>>
0474. 
0475.     @Query("SELECT * FROM devices")
0476.     suspend fun getAllDevices(): List<Device>
0477. 
0478.     @Query("SELECT * FROM devices WHERE ieeeAddr = :ieeeAddr LIMIT 1")
0479.     suspend fun getDeviceByIeeeAddr(ieeeAddr: String): Device?
0480. 
0481.     @Query("SELECT * FROM devices WHERE id = :deviceId LIMIT 1")
0482.     suspend fun getDeviceById(deviceId: Int): Device // ? был тут
0483. 
0484.     @Insert(onConflict = OnConflictStrategy.IGNORE)
0485.     suspend fun insertDevice(device: Device): Long
0486. 
0487.     @Query("SELECT * FROM devices WHERE roomId = :roomId")
0488.     fun getDevicesByRoomIdFlow(roomId: Int): Flow<List<Device>>
0489. 
0490.     @Update
0491.     suspend fun updateDevice(device: Device)
0492. 
0493.     @Query("SELECT COUNT(*) FROM devices WHERE roomId = :roomId")
0494.     suspend fun getDeviceCountForRoom(roomId: Long): Int
0495. 
0496.     @Query("SELECT * FROM devices")
0497.     fun getAllDevicesFlow(): Flow<List<Device>>
0498. 
0499.     @Delete
0500.     suspend fun deleteDevice(device: Device)
0501. 
0502.     @Query("DELETE FROM devices WHERE id = :deviceId")
0503.     suspend fun deleteDeviceById(deviceId: Int)
0504. 
0505. }


DeviceState.kt

0506. package com.example.iot_ha.data.local.device
0507. 
0508. import kotlinx.coroutines.flow.MutableStateFlow
0509. import kotlinx.coroutines.flow.StateFlow
0510. import kotlinx.coroutines.flow.update
0511. 
0512. object DeviceState {
0513.     private val _devicesData = MutableStateFlow<Map<Int, Map<String, Any>>>(emptyMap())
0514.     val devicesData: StateFlow<Map<Int, Map<String, Any>>> = _devicesData
0515. 
0516.     fun updateDeviceData(deviceId: Int, payload: String) {
0517.         val parsedData: Map<String, Any> = parseJson(payload)
0518. 
0519.         _devicesData.update { currentData ->
0520.             currentData.toMutableMap().apply { this[deviceId] = parsedData }
0521.         }
0522.     }
0523. 
0524. 
0525.     private fun parseJson(json: String): Map<String, Any> {
0526.         return try {
0527.             val jsonObject = org.json.JSONObject(json)
0528.             jsonObject.keys().asSequence().associateWith { jsonObject.get(it) }
0529.         } catch (e: Exception) {
0530.             emptyMap()
0531.         }
0532.     }
0533. 
0534.     fun getDeviceValue(deviceId: Int, key: String): Any? {
0535.         return _devicesData.value[deviceId]?.get(key)
0536.     }
0537. }


LEDState.kt

0538. package com.example.iot_ha.data.local.led
0539. 
0540. import kotlinx.coroutines.flow.MutableStateFlow
0541. import kotlinx.coroutines.flow.asStateFlow
0542. 
0543. object LEDState {
0544.     private val _brightness = MutableStateFlow(127f)
0545.     private val _red = MutableStateFlow(127f)
0546.     private val _green = MutableStateFlow(127f)
0547.     private val _blue = MutableStateFlow(127f)
0548. 
0549.     val brightness = _brightness.asStateFlow()
0550.     val red = _red.asStateFlow()
0551.     val green = _green.asStateFlow()
0552.     val blue = _blue.asStateFlow()
0553. 
0554.     fun setBrightness(value: Float) { _brightness.value = value }
0555.     fun setRed(value: Float) { _red.value = value }
0556.     fun setGreen(value: Float) { _green.value = value }
0557.     fun setBlue(value: Float) { _blue.value = value }
0558. }


LEDStatus.kt

0559. package com.example.iot_ha.data.local.led
0560. 
0561. import org.json.JSONObject
0562. 
0563. data class LEDStatus(
0564.     val state: String = "ON",
0565.     val brightness: Int,
0566.     val red: Int,
0567.     val green: Int,
0568.     val blue: Int,
0569.     val colorMode: String = "rgb",
0570.     val mode: String = "manual"
0571. ) {
0572.     fun toJson(): String {
0573.         return JSONObject().apply {
0574.             put("state", state)
0575.             put("brightness", brightness)
0576.             put("color", JSONObject().apply {
0577.                 put("r", red)
0578.                 put("g", green)
0579.                 put("b", blue)
0580.             })
0581.             put("color_mode", colorMode)
0582.             put("mode", mode)
0583.         }.toString()
0584.     }
0585. }


RoomEntity.kt

0586. package com.example.iot_ha.data.local.room
0587. 
0588. import androidx.room.Entity
0589. import androidx.room.PrimaryKey
0590. 
0591. @Entity(tableName = "rooms")
0592. data class RoomEntity(
0593.     @PrimaryKey(autoGenerate = true) val id: Long = 0,
0594.     val name: String
0595. )


RoomEntityDAO.kt

0596. package com.example.iot_ha.data.local.room
0597. 
0598. import androidx.room.Dao
0599. import androidx.room.Insert
0600. import androidx.room.OnConflictStrategy
0601. import androidx.room.Query
0602. import kotlinx.coroutines.flow.Flow
0603. 
0604. @Dao
0605. interface RoomEntityDAO {
0606.     @Query("SELECT * FROM rooms")
0607.     fun getAllRooms(): Flow<List<RoomEntity>>
0608. 
0609.     @Insert(onConflict = OnConflictStrategy.REPLACE)
0610.     suspend fun insertRoom(room: RoomEntity)
0611. 
0612.     @Query("DELETE FROM rooms WHERE id = :roomId")
0613.     suspend fun deleteRoom(roomId: Int)
0614. }


MQTTClient.kt

0615. package com.example.iot_ha.data.mqtt
0616. 
0617. import android.util.Log
0618. import com.example.iot_ha.data.local.broker.Broker
0619. import com.example.iot_ha.data.mqtt.domain.MQTTMessageHandler
0620. import com.example.iot_ha.data.mqtt.interfaces.MQTTConnection
0621. import com.example.iot_ha.data.mqtt.interfaces.MQTTMessaging
0622. import com.example.iot_ha.utils.logging.Logger
0623. import org.eclipse.paho.client.mqttv3.IMqttDeliveryToken
0624. import org.eclipse.paho.client.mqttv3.MqttCallback
0625. import org.eclipse.paho.client.mqttv3.MqttClient
0626. import org.eclipse.paho.client.mqttv3.MqttConnectOptions
0627. import org.eclipse.paho.client.mqttv3.MqttException
0628. import org.eclipse.paho.client.mqttv3.MqttMessage
0629. 
0630. object MQTTClient: MQTTMessaging, MQTTConnection {
0631.     private var mqttClient: MqttClient? = null
0632.     private var broker: Broker? = null
0633.     private var messageHandler: MQTTMessageHandler? = null
0634. 
0635.     fun initialize(broker: Broker, handler: MQTTMessageHandler?): MQTTClient {
0636.         this.broker = broker
0637.         this.messageHandler = handler
0638.         return this
0639.     }
0640. 
0641.     fun reinitialize(newBroker: Broker, handler: MQTTMessageHandler): MQTTClient {
0642.         disconnect()
0643.         broker = newBroker
0644.         messageHandler = handler
0645.         return this
0646.     }
0647. 
0648.     fun getInstance(): MQTTClient {
0649.         return this
0650.     }
0651. 
0652.     override fun connect(): Boolean {
0653.         return try {
0654.             val clientId = MqttClient.generateClientId()
0655.             mqttClient =
0656.                 MqttClient("tcp://${broker?.serverUri}:${broker?.serverPort}", clientId, null)
0657. 
0658.             val options = MqttConnectOptions().apply {
0659.                 isAutomaticReconnect = true
0660.                 isCleanSession = true
0661.             }
0662. 
0663.             mqttClient?.connect(options)
0664.             Logger.log(MQTTClient::class, "Подключение успешно!")
0665.             true
0666.         } catch (e: MqttException) {
0667.             Logger.log(MQTTClient::class, "Ошибка подключения: ${e.reasonCode} - ${e.message}")
0668.             false
0669.         }
0670.     }
0671. 
0672.     override fun subscribe(topic: String) {
0673.         try {
0674.             mqttClient?.setCallback(object : MqttCallback {
0675.                 override fun connectionLost(cause: Throwable?) {
0676.                     Log.e("MQTT", "Соединение потеряно: ${cause?.message}")
0677.                 }
0678. 
0679.                 override fun messageArrived(topic: String, message: MqttMessage) {
0680.                     val payload = message.toString()
0681.                     Log.i("MQTT", "📩 Получено сообщение: $message на топик: $topic")
0682. 
0683.                     messageHandler?.handleMessage(topic, payload)
0684.                 }
0685. 
0686.                 override fun deliveryComplete(token: IMqttDeliveryToken) {
0687.                     Log.i("MQTT", "Сообщение отправлено")
0688.                 }
0689.             })
0690. 
0691.             mqttClient?.subscribe(topic)
0692.             Log.i("MQTT", "📡 Подписался на $topic")
0693.         } catch (e: MqttException) {
0694.             Log.e("MQTT", "Ошибка подписки: ${e.reasonCode} - ${e.message}")
0695.         }
0696.     }
0697. 
0698.     override fun unsubscribe(topic: String) {
0699.         try {
0700.             mqttClient?.unsubscribe(topic)
0701.         } catch (e: MqttException) {
0702.             Log.e("MQTT", "Ошибка отписки: ${e.reasonCode} - ${e.message}")
0703.         }
0704.     }
0705. 
0706.     override fun publish(topic: String, payload: String, qos: Int, retained: Boolean) {
0707.         try {
0708.             val message = MqttMessage(payload.toByteArray()).apply {
0709.                 this.qos = qos
0710.                 this.isRetained = retained
0711.             }
0712.             mqttClient?.publish(topic, message)
0713.             Log.i("MQTT", "📤 Отправлено сообщение: $payload в топик: $topic")
0714.         } catch (e: MqttException) {
0715.             Log.e("MQTT", "Ошибка отправки сообщения: ${e.reasonCode} - ${e.message}")
0716.         }
0717.     }
0718. 
0719.     override fun disconnect() {
0720.         try {
0721.             mqttClient?.disconnect()
0722.             Log.i("MQTT", "🔌 Отключен от брокера")
0723.         } catch (e: MqttException) {
0724.             Log.e("MQTT", "Ошибка отключения: ${e.message}")
0725.         }
0726.     }
0727. }


MQTTMessageHandler.kt

0728. package com.example.iot_ha.data.mqtt.domain
0729. 
0730. import android.util.Log
0731. import com.example.iot_ha.data.local.broker.BrokerState
0732. import com.example.iot_ha.data.local.command.Command
0733. import com.example.iot_ha.data.local.device.Device
0734. import com.example.iot_ha.data.local.device.DeviceState
0735. import com.example.iot_ha.data.local.led.LEDState
0736. import com.example.iot_ha.data.mqtt.util.Topics
0737. import com.example.iot_ha.ui.viewmodels.shared.DevicesViewModel
0738. import com.example.iot_ha.ui.viewmodels.shared.SensorsViewModel
0739. import com.example.iot_ha.utils.Constants
0740. import org.json.JSONObject
0741. 
0742. class MQTTMessageHandler(
0743.     private val sensorsViewModel: SensorsViewModel,
0744.     private val devicesViewModel: DevicesViewModel,
0745. ) {
0746.     fun handleMessage(topic: String, payload: String) {
0747.         Log.i("MQTTHandler", "📩 Обрабатываем сообщение: $payload с топика: $topic")
0748. 
0749.         when {
0750.             topic.startsWith(Topics.DEVICE_STATE_TOPIC) -> handleDeviceStateMessage(topic, payload)
0751.             topic.startsWith(Topics.DEVICE_COMMANDS_TOPIC) -> handleDeviceCommandMessage(topic, payload)
0752.             topic.startsWith(Topics.DEVICE_LIST_TOPIC) -> handleDeviceListMessage(payload)
0753.             topic.startsWith(Topics.LED_STATE_TOPIC) -> handleLEDState(payload)
0754.             else -> Log.i("MQTTHandler", "⚠ Необрабатываемый топик: $topic")
0755.         }
0756.     }
0757. 
0758.     private fun handleDeviceStateMessage(topic: String, payload: String) {
0759.         val ieeeAddr = extractIeeeAddrFromTopic(topic)
0760.         val deviceId = devicesViewModel.devices.value.find { it.ieeeAddr == ieeeAddr }?.id
0761. 
0762.         if (deviceId != null) {
0763.             DeviceState.updateDeviceData(deviceId, payload)
0764.         } else {
0765.             println("Устройство с IEEE Addr $ieeeAddr не найдено")
0766.         }
0767.     }
0768. 
0769.     private fun handleLEDState(payload: String) {
0770.         try {
0771.             val json = JSONObject(payload)
0772.             if (json.getString("state") == "ON") {
0773.                 LEDState.setBrightness(json.optInt("brightness", 127).toFloat())
0774.                 json.optJSONObject("color")?.let { color ->
0775.                     LEDState.setRed(color.optInt("r", 127).toFloat())
0776.                     LEDState.setGreen(color.optInt("g", 127).toFloat())
0777.                     LEDState.setBlue(color.optInt("b", 127).toFloat())
0778.                 }
0779.             }
0780.         } catch (e: Exception) {
0781.             e.printStackTrace()
0782.         }
0783.     }
0784. 
0785. 
0786.     private fun handleDeviceCommandMessage(topic: String, payload: String) {
0787.         try {
0788.             val jsonObject = JSONObject(payload)
0789. 
0790.             val commandTopic =
0791.                 jsonObject.optString("command_topic").takeIf { it.isNotBlank() } ?: return
0792.             val payloadOn = jsonObject.optString("payload_on", null)
0793.             val payloadOff = jsonObject.optString("payload_off", null)
0794.             val commandTemplate = jsonObject.optString("command_template", null)
0795. 
0796.             val options = jsonObject.optJSONArray("options")?.let { array ->
0797.                 (0 until array.length()).associate { index ->
0798.                     array.getString(index) to array.getString(
0799.                         index
0800.                     )
0801.                 }
0802.             } ?: emptyMap()
0803. 
0804.             val commandType = extractCommandTypeFromTopic(topic)
0805.             val deviceIeeeAddr = extractIeeeAddrFromTopic(topic)
0806. 
0807.             if (deviceIeeeAddr != null && commandType != "unknown") {
0808.                 devicesViewModel.getDeviceIdByIeeeAddr(deviceIeeeAddr) { deviceId ->
0809.                     if (deviceId != null) {
0810.                         val command = Command(
0811.                             deviceId = deviceId,
0812.                             commandTopic = commandTopic,
0813.                             payloadOn = payloadOn,
0814.                             payloadOff = payloadOff,
0815.                             options = options,
0816.                             commandTemplate = commandTemplate,
0817.                             commandType = commandType
0818.                         )
0819. 
0820.                         devicesViewModel.addCommandIfNotExists(command)
0821.                         Log.i("MQTTHandler", "📥 Команда сохранена: $command")
0822.                     } else {
0823.                         Log.e("DeviceId", "Device not found for IEEE Address: $deviceIeeeAddr")
0824.                     }
0825.                 }
0826.             }
0827.         } catch (e: Exception) {
0828.             Log.e("MQTTHandler", "Ошибка обработки команды: ${e.message}")
0829.         }
0830.     }
0831. 
0832.     private fun extractCommandTypeFromTopic(topic: String): String {
0833.         return when {
0834.             topic.contains("/switch/", ignoreCase = true) -> Constants.SWITCH_TYPE
0835. //            topic.contains("/select/", ignoreCase = true) -> "select"
0836. //            topic.contains("/light/", ignoreCase = true) -> "dimmer"
0837.             else -> "unknown"
0838.         }
0839.     }
0840. 
0841.     private fun extractIeeeAddrFromTopic(topic: String): String? {
0842.         val regex = Regex("0x[0-9A-Fa-f]+")
0843.         return regex.find(topic)?.value
0844.     }
0845. 
0846.     private fun handleDeviceListMessage(payload: String) {
0847.         try {
0848.             val jsonObject = JSONObject(payload)
0849. 
0850.             for (key in jsonObject.keys()) {
0851.                 val deviceJson = jsonObject.optJSONObject(key) ?: continue
0852. 
0853.                 val ieeeAddr = deviceJson.optString("ieeeAddr")
0854.                 val friendlyName = deviceJson.optString("friendly_name")
0855.                 val modelId = deviceJson.optString("ModelId")
0856. 
0857.                 val device = Device.create(
0858.                     ieeeAddr = ieeeAddr,
0859.                     friendlyName = friendlyName,
0860.                     modelId = modelId,
0861.                     roomId = null,
0862.                     brokerId = BrokerState.brokerId.value ?: -1
0863.                 )
0864. 
0865.                 Log.i("DEVICE", "📥 Получено устройство: $device")
0866. 
0867.                 devicesViewModel.addDeviceIfNotExists(device)
0868.             }
0869. 
0870.         } catch (e: Exception) {
0871.             Log.e("DEVICE", "Ошибка обработки списка устройств: ${e.message}")
0872.         }
0873.     }
0874. 
0875. }
0876. 


MQTTConnection.kt

0877. package com.example.iot_ha.data.mqtt.interfaces
0878. 
0879. interface MQTTConnection {
0880.     fun connect(): Boolean
0881.     fun disconnect()
0882. }


MQTTMessaging.kt

0883. package com.example.iot_ha.data.mqtt.interfaces
0884. 
0885. interface MQTTMessaging {
0886.     fun subscribe(topic: String)
0887.     fun unsubscribe(topic: String)
0888.     fun publish(topic: String, payload: String, qos: Int = 1, retained: Boolean = false)
0889. }


Topics.kt

0890. package com.example.iot_ha.data.mqtt.util
0891. 
0892. object Topics {
0893.     const val DISCOVERY_TOPIC = "zigbee/bridge/config/permit_join"
0894. 
0895.     const val DEVICE_STATE_TOPIC = "zigbee/0x"
0896.     const val SUBSCRIBE_DEVICE_STATE_TOPIC = "zigbee/#"
0897. 
0898.     const val DEVICE_COMMANDS_TOPIC = "homeassistant/"
0899.     const val SUBSCRIBE_DEVICE_COMMANDS_TOPIC = "homeassistant/#"
0900. 
0901.     const val DEVICE_LIST_TOPIC = "devicelist"
0902.     const val SUBSCRIBE_DEVICE_LIST_TOPIC = "devicelist"
0903. 
0904.     const val LED_STATE_TOPIC = "zigbee/led"
0905.     const val SUBSCRIBE_LED_STATE_TOPIC = "zigbee/led"
0906.     const val LED_SET_STATE_TOPIC = "zigbee/led/set"
0907. }

BrokerInputForm.kt

0908. package com.example.iot_ha.ui.components.broker
0909. 
0910. import androidx.compose.foundation.layout.Column
0911. import androidx.compose.foundation.layout.Spacer
0912. import androidx.compose.foundation.layout.fillMaxWidth
0913. import androidx.compose.foundation.layout.height
0914. import androidx.compose.foundation.shape.RoundedCornerShape
0915. import androidx.compose.material3.Button
0916. import androidx.compose.material3.ButtonDefaults
0917. import androidx.compose.material3.MaterialTheme
0918. import androidx.compose.material3.Text
0919. import androidx.compose.runtime.Composable
0920. import androidx.compose.ui.Modifier
0921. import androidx.compose.ui.graphics.Color
0922. import androidx.compose.ui.unit.dp
0923. import com.example.iot_ha.ui.components.common.CustomOutlinedTextField
0924. 
0925. @Composable
0926. fun BrokerInputForm(
0927.     serverUri: String,
0928.     serverPort: String,
0929.     user: String,
0930.     password: String,
0931.     onServerUriChange: (String) -> Unit,
0932.     onServerPortChange: (String) -> Unit,
0933.     onUserChange: (String) -> Unit,
0934.     onPasswordChange: (String) -> Unit,
0935.     onAddBroker: () -> Unit
0936. ) {
0937.     Column(modifier = Modifier.fillMaxWidth()) {
0938.         CustomOutlinedTextField(
0939.             value = serverUri,
0940.             label = "Server URI",
0941.             onValueChange = onServerUriChange
0942.         )
0943.         CustomOutlinedTextField(
0944.             value = serverPort,
0945.             label = "Server Port",
0946.             onValueChange = onServerPortChange
0947.         )
0948.         CustomOutlinedTextField(
0949.             value = user,
0950.             label = "User (optional)",
0951.             onValueChange = onUserChange
0952.         )
0953.         CustomOutlinedTextField(
0954.             value = password,
0955.             label = "Password (optional)",
0956.             onValueChange = onPasswordChange
0957.         )
0958. 
0959.         Spacer(modifier = Modifier.height(12.dp))
0960. 
0961.         Button(
0962.             onClick = onAddBroker,
0963.             modifier = Modifier.fillMaxWidth(),
0964.             shape = RoundedCornerShape(12.dp),
0965.             colors = ButtonDefaults.buttonColors(containerColor = MaterialTheme.colorScheme.primary)
0966.         ) {
0967.             Text("Add broker", color = Color.White)
0968.         }
0969.     }
0970. }


BrokerItem.kt

0971. package com.example.iot_ha.ui.components.broker
0972. 
0973. import androidx.compose.foundation.layout.Arrangement
0974. import androidx.compose.foundation.layout.Column
0975. import androidx.compose.foundation.layout.Row
0976. import androidx.compose.foundation.layout.Spacer
0977. import androidx.compose.foundation.layout.fillMaxWidth
0978. import androidx.compose.foundation.layout.height
0979. import androidx.compose.foundation.layout.padding
0980. import androidx.compose.foundation.layout.width
0981. import androidx.compose.foundation.shape.RoundedCornerShape
0982. import androidx.compose.material3.Button
0983. import androidx.compose.material3.ButtonDefaults
0984. import androidx.compose.material3.Card
0985. import androidx.compose.material3.CardDefaults
0986. import androidx.compose.material3.MaterialTheme
0987. import androidx.compose.material3.OutlinedButton
0988. import androidx.compose.material3.Text
0989. import androidx.compose.runtime.Composable
0990. import androidx.compose.ui.Modifier
0991. import androidx.compose.ui.draw.shadow
0992. import androidx.compose.ui.graphics.Color
0993. import androidx.compose.ui.unit.dp
0994. import com.example.iot_ha.data.local.broker.Broker
0995. 
0996. @Composable
0997. fun BrokerItem(broker: Broker, onDelete: () -> Unit, onLogin: () -> Unit) {
0998.     Card(
0999.         modifier = Modifier
1000.             .fillMaxWidth()
1001.             .padding(6.dp)
1002.             .shadow(4.dp, shape = RoundedCornerShape(12.dp)),
1003.         elevation = CardDefaults.elevatedCardElevation(8.dp)
1004.     ) {
1005.         Column(modifier = Modifier.padding(12.dp)) {
1006.             Text(text = "URI: ${broker.serverUri}", style = MaterialTheme.typography.bodyLarge)
1007.             Text(text = "Port: ${broker.serverPort}", style = MaterialTheme.typography.bodyMedium)
1008.             broker.user?.let {
1009.                 Text(
1010.                     text = "User: $it",
1011.                     style = MaterialTheme.typography.bodyMedium
1012.                 )
1013.             }
1014.             broker.password?.let {
1015.                 Text(
1016.                     text = "Password: ${"*".repeat(it.length)}",
1017.                     style = MaterialTheme.typography.bodyMedium
1018.                 )
1019.             }
1020. 
1021.             Spacer(modifier = Modifier.height(8.dp))
1022. 
1023.             Row(
1024.                 modifier = Modifier.fillMaxWidth(),
1025.                 horizontalArrangement = Arrangement.SpaceBetween
1026.             ) {
1027.                 Button(
1028.                     onClick = onLogin,
1029.                     modifier = Modifier.weight(1f),
1030.                     shape = RoundedCornerShape(12.dp),
1031.                     colors = ButtonDefaults.buttonColors(containerColor = MaterialTheme.colorScheme.primary)
1032.                 ) {
1033.                     Text("Login", color = Color.White)
1034.                 }
1035.                 Spacer(modifier = Modifier.width(6.dp))
1036.                 OutlinedButton(
1037.                     onClick = onDelete,
1038.                     modifier = Modifier.weight(1f),
1039.                     shape = RoundedCornerShape(12.dp),
1040.                     colors = ButtonDefaults.outlinedButtonColors(contentColor = MaterialTheme.colorScheme.error)
1041.                 ) {
1042.                     Text("Delete")
1043.                 }
1044.             }
1045.         }
1046.     }
1047. }


BrokerList.kt

1048. package com.example.iot_ha.ui.components.broker
1049. 
1050. 
1051. import androidx.compose.foundation.layout.Spacer
1052. import androidx.compose.foundation.layout.height
1053. import androidx.compose.material3.MaterialTheme
1054. import androidx.compose.material3.Text
1055. import androidx.compose.runtime.Composable
1056. import androidx.compose.ui.Modifier
1057. import androidx.compose.ui.unit.dp
1058. import com.example.iot_ha.data.local.broker.Broker
1059. 
1060. @Composable
1061. fun BrokerList(
1062.     brokers: List<Broker>,
1063.     onDelete: (Broker) -> Unit,
1064.     onLogin: (Broker) -> Unit
1065. ) {
1066.     brokers.lastOrNull()?.let { broker ->
1067.         Text("Recently used broker:", style = MaterialTheme.typography.labelMedium)
1068.         Spacer(modifier = Modifier.height(1.dp))
1069.         BrokerItem(
1070.             broker = broker,
1071.             onDelete = { onDelete(broker) },
1072.             onLogin = { onLogin(broker) }
1073.         )
1074.     }
1075. }

CustomOutlinedTextField.kt

1076. package com.example.iot_ha.ui.components.common
1077. 
1078. import androidx.compose.foundation.layout.Spacer
1079. import androidx.compose.foundation.layout.fillMaxWidth
1080. import androidx.compose.foundation.layout.height
1081. import androidx.compose.foundation.shape.RoundedCornerShape
1082. import androidx.compose.material3.OutlinedTextField
1083. import androidx.compose.material3.Text
1084. import androidx.compose.runtime.Composable
1085. import androidx.compose.ui.Modifier
1086. import androidx.compose.ui.unit.dp
1087. 
1088. @Composable
1089. fun CustomOutlinedTextField(
1090.     value: String,
1091.     label: String,
1092.     onValueChange: (String) -> Unit,
1093. ) {
1094.     OutlinedTextField(
1095.         value = value,
1096.         onValueChange = onValueChange,
1097.         label = { Text(label) },
1098.         shape = RoundedCornerShape(12.dp),
1099.         modifier = Modifier.fillMaxWidth()
1100.     )
1101.     Spacer(modifier = Modifier.height(8.dp))
1102. }


TabButton.kt

1103. package com.example.iot_ha.ui.components.common
1104. 
1105. import androidx.compose.foundation.BorderStroke
1106. import androidx.compose.foundation.clickable
1107. import androidx.compose.foundation.layout.Arrangement
1108. import androidx.compose.foundation.layout.Row
1109. import androidx.compose.foundation.layout.height
1110. import androidx.compose.foundation.layout.padding
1111. import androidx.compose.foundation.shape.RoundedCornerShape
1112. import androidx.compose.material3.MaterialTheme
1113. import androidx.compose.material3.Surface
1114. import androidx.compose.material3.Text
1115. import androidx.compose.runtime.Composable
1116. import androidx.compose.ui.Alignment
1117. import androidx.compose.ui.Modifier
1118. import androidx.compose.ui.draw.clip
1119. import androidx.compose.ui.graphics.Color
1120. import androidx.compose.ui.text.font.FontWeight
1121. import androidx.compose.ui.unit.dp
1122. 
1123. @Composable
1124. fun TabButton(title: String, isSelected: Boolean, onClick: () -> Unit) {
1125.     val borderColor = if (isSelected) MaterialTheme.colorScheme.primary else Color.Transparent
1126.     val textColor = Color.Black
1127.     Surface(
1128.         modifier = Modifier
1129.             .padding(horizontal = 4.dp, vertical = 4.dp)
1130.             .height(40.dp)
1131.             .clip(RoundedCornerShape(8.dp))
1132.             .clickable { onClick() },
1133.         color = if (isSelected) MaterialTheme.colorScheme.primary.copy(alpha = 0.1f) else Color.Transparent,
1134.         shape = RoundedCornerShape(8.dp),
1135.         border = BorderStroke(if (isSelected) 2.dp else 0.dp, borderColor)
1136.     ) {
1137.         Row(
1138.             modifier = Modifier.padding(horizontal = 20.dp, vertical = 8.dp),
1139.             verticalAlignment = Alignment.CenterVertically,
1140.             horizontalArrangement = Arrangement.Center
1141.         ) {
1142.             Text(
1143.                 text = title,
1144.                 color = textColor,
1145.                 style = MaterialTheme.typography.labelLarge,
1146.                 fontWeight = if (isSelected) FontWeight.Bold else FontWeight.Normal
1147.             )
1148.         }
1149.     }
1150. }

DeviceCard.kt

1151. package com.example.iot_ha.ui.components.devices
1152. 
1153. import android.util.Log
1154. import androidx.compose.foundation.Image
1155. import androidx.compose.foundation.clickable
1156. import androidx.compose.foundation.layout.Column
1157. import androidx.compose.foundation.layout.Row
1158. import androidx.compose.foundation.layout.Spacer
1159. import androidx.compose.foundation.layout.fillMaxWidth
1160. import androidx.compose.foundation.layout.padding
1161. import androidx.compose.foundation.layout.size
1162. import androidx.compose.foundation.layout.width
1163. import androidx.compose.foundation.shape.RoundedCornerShape
1164. import androidx.compose.material3.Card
1165. import androidx.compose.material3.CardDefaults
1166. import androidx.compose.material3.DropdownMenuItem
1167. import androidx.compose.material3.ExperimentalMaterial3Api
1168. import androidx.compose.material3.ExposedDropdownMenuBox
1169. import androidx.compose.material3.ExposedDropdownMenuDefaults
1170. import androidx.compose.material3.Slider
1171. import androidx.compose.material3.SliderDefaults
1172. import androidx.compose.material3.Switch
1173. import androidx.compose.material3.SwitchDefaults
1174. import androidx.compose.material3.Text
1175. import androidx.compose.material3.TextField
1176. import androidx.compose.runtime.Composable
1177. import androidx.compose.runtime.getValue
1178. import androidx.compose.runtime.mutableFloatStateOf
1179. import androidx.compose.runtime.mutableStateOf
1180. import androidx.compose.runtime.remember
1181. import androidx.compose.runtime.setValue
1182. import androidx.compose.ui.Alignment
1183. import androidx.compose.ui.Modifier
1184. import androidx.compose.ui.draw.clip
1185. import androidx.compose.ui.graphics.Color
1186. import androidx.compose.ui.res.painterResource
1187. import androidx.compose.ui.text.font.FontWeight
1188. import androidx.compose.ui.unit.dp
1189. import androidx.compose.ui.unit.sp
1190. import androidx.navigation.NavHostController
1191. 
1192. @OptIn(ExperimentalMaterial3Api::class)
1193. @Composable
1194. fun DeviceCard(
1195.     deviceId: Int,
1196.     imageRes: Int,
1197.     name: String,
1198.     type: String? = null,
1199.     value: Any? = null,
1200.     navController: NavHostController,
1201.     onToggle: ((Boolean) -> Unit)? = null,
1202.     onSliderChange: ((Float) -> Unit)? = null,
1203.     onSelectChange: ((String) -> Unit)? = null,
1204.     options: List<String> = emptyList()
1205. ) {
1206.     var checked by remember { mutableStateOf(value as? Boolean ?: false) }
1207.     var sliderValue by remember { mutableFloatStateOf(value as? Float ?: 0f) }
1208.     var selectedOption by remember {
1209.         mutableStateOf(value as? String ?: options.firstOrNull().orEmpty())
1210.     }
1211.     var expanded by remember { mutableStateOf(false) }
1212. 
1213.     Card(
1214.         shape = RoundedCornerShape(16.dp),
1215.         modifier = Modifier
1216.             .fillMaxWidth()
1217.             .padding(8.dp)
1218.             .clickable { navController.navigate("device_details/$deviceId") },
1219.         elevation = CardDefaults.cardElevation(6.dp)
1220.     ) {
1221.         Row(
1222.             verticalAlignment = Alignment.CenterVertically,
1223.             modifier = Modifier.padding(16.dp)
1224.         ) {
1225.             Image(
1226.                 painter = painterResource(id = imageRes),
1227.                 contentDescription = name,
1228.                 modifier = Modifier
1229.                     .size(64.dp)
1230.                     .clip(RoundedCornerShape(12.dp))
1231.             )
1232.             Spacer(modifier = Modifier.width(16.dp))
1233.             Column(modifier = Modifier.weight(1f)) {
1234.                 Text(
1235.                     text = name,
1236.                     fontSize = 20.sp,
1237.                     fontWeight = FontWeight.Bold,
1238.                     color = Color.Black
1239.                 )
1240. 
1241.                 when (type) {
1242.                     "switch" -> Switch(
1243.                         checked = checked,
1244.                         onCheckedChange = {
1245.                             checked = it
1246.                             onToggle?.invoke(it)
1247.                         },
1248.                         colors = SwitchDefaults.colors(
1249.                             checkedThumbColor = Color.White,
1250.                             checkedTrackColor = Color(0xFF4CAF50),
1251.                             uncheckedThumbColor = Color.White,
1252.                             uncheckedTrackColor = Color(0xFFF44336)
1253.                         )
1254.                     )
1255. 
1256.                     "slider" -> Slider(
1257.                         value = sliderValue,
1258.                         onValueChange = {
1259.                             sliderValue = it
1260.                             onSliderChange?.invoke(it)
1261.                         },
1262.                         valueRange = 0f..100f,
1263.                         colors = SliderDefaults.colors(
1264.                             thumbColor = Color(0xFF8A9F9B),
1265.                             activeTrackColor = Color(0xFFA6B6A9)
1266.                         )
1267.                     )
1268. 
1269.                     "select" -> ExposedDropdownMenuBox(
1270.                         expanded = expanded,
1271.                         onExpandedChange = { expanded = it }
1272.                     ) {
1273.                         TextField(
1274.                             value = selectedOption,
1275.                             onValueChange = {},
1276.                             readOnly = true,
1277.                             modifier = Modifier.menuAnchor(),
1278.                             label = { Text("Выберите") },
1279.                             trailingIcon = { ExposedDropdownMenuDefaults.TrailingIcon(expanded = expanded) }
1280.                         )
1281.                         ExposedDropdownMenu(
1282.                             expanded = expanded,
1283.                             onDismissRequest = { expanded = false }
1284.                         ) {
1285.                             options.forEach { option ->
1286.                                 DropdownMenuItem(
1287.                                     text = { Text(option) },
1288.                                     onClick = {
1289.                                         selectedOption = option
1290.                                         expanded = false
1291.                                         onSelectChange?.invoke(option)
1292.                                     }
1293.                                 )
1294.                             }
1295.                         }
1296.                     }
1297. 
1298.                     else -> {
1299.                         value?.let {
1300.                             Text(text = it.toString(), fontSize = 14.sp, color = Color.Black)
1301.                         }
1302.                     }
1303.                 }
1304.             }
1305.         }
1306.     }
1307. }
1308. 


DeviceDetails.kt

1309. package com.example.iot_ha.ui.components.devices
1310. 
1311. import androidx.compose.foundation.background
1312. import androidx.compose.foundation.layout.Arrangement
1313. import androidx.compose.foundation.layout.Box
1314. import androidx.compose.foundation.layout.Column
1315. import androidx.compose.foundation.layout.Row
1316. import androidx.compose.foundation.layout.fillMaxWidth
1317. import androidx.compose.foundation.layout.padding
1318. import androidx.compose.foundation.shape.RoundedCornerShape
1319. import androidx.compose.material3.MaterialTheme
1320. import androidx.compose.material3.Text
1321. import androidx.compose.runtime.Composable
1322. import androidx.compose.ui.Alignment
1323. import androidx.compose.ui.Modifier
1324. import androidx.compose.ui.draw.clip
1325. import androidx.compose.ui.unit.dp
1326. import androidx.compose.ui.unit.sp
1327. 
1328. @Composable
1329. fun DeviceDetails(deviceData: Map<String, Any>) {
1330.     Column(modifier = Modifier.fillMaxWidth()) {
1331.         deviceData.forEach { (key, value) ->
1332.             Box(
1333.                 modifier = Modifier
1334.                     .fillMaxWidth()
1335.                     .padding(vertical = 4.dp)
1336.                     .clip(RoundedCornerShape(12.dp))
1337.                     .background(MaterialTheme.colorScheme.surfaceVariant)
1338.                     .padding(12.dp)
1339.             ) {
1340.                 Row(
1341.                     modifier = Modifier.fillMaxWidth(),
1342.                     horizontalArrangement = Arrangement.SpaceBetween,
1343.                     verticalAlignment = Alignment.CenterVertically
1344.                 ) {
1345.                     Text(
1346.                         text = key.replaceFirstChar { if (it.isLowerCase()) it.titlecase() else it.toString() },
1347.                         style = MaterialTheme.typography.bodyLarge.copy(fontSize = 16.sp),
1348.                         color = MaterialTheme.colorScheme.onSurfaceVariant
1349.                     )
1350.                     Text(
1351.                         text = value.toString(),
1352.                         style = MaterialTheme.typography.bodyLarge.copy(fontSize = 16.sp),
1353.                         color = MaterialTheme.colorScheme.onSurfaceVariant
1354.                     )
1355.                 }
1356.             }
1357.         }
1358.     }
1359. }


DeviceNotFound.kt

1360. package com.example.iot_ha.ui.components.devices
1361. 
1362. import androidx.compose.foundation.layout.Box
1363. import androidx.compose.foundation.layout.fillMaxSize
1364. import androidx.compose.material3.MaterialTheme
1365. import androidx.compose.material3.Text
1366. import androidx.compose.runtime.Composable
1367. import androidx.compose.ui.Alignment
1368. import androidx.compose.ui.Modifier
1369. 
1370. @Composable
1371. fun DeviceNotFoundMessage() {
1372.     Box(
1373.         modifier = Modifier.fillMaxSize(),
1374.         contentAlignment = Alignment.Center
1375.     ) {
1376.         Text(
1377.             text = "Device not found",
1378.             style = MaterialTheme.typography.bodyLarge,
1379.             color = MaterialTheme.colorScheme.error
1380.         )
1381.     }
1382. }

DeviceTitle.kt

1383. package com.example.iot_ha.ui.components.devices
1384. 
1385. import androidx.compose.foundation.layout.Row
1386. import androidx.compose.foundation.layout.fillMaxWidth
1387. import androidx.compose.foundation.layout.padding
1388. import androidx.compose.foundation.layout.statusBarsPadding
1389. import androidx.compose.material.icons.Icons
1390. import androidx.compose.material.icons.filled.Edit
1391. import androidx.compose.material3.Icon
1392. import androidx.compose.material3.IconButton
1393. import androidx.compose.material3.MaterialTheme
1394. import androidx.compose.material3.Text
1395. import androidx.compose.runtime.Composable
1396. import androidx.compose.ui.Alignment
1397. import androidx.compose.ui.Modifier
1398. import androidx.compose.ui.unit.dp
1399. 
1400. @Composable
1401. fun DeviceTitle(
1402.     friendlyName: String,
1403.     onEditClick: () -> Unit
1404. ) {
1405.     Row(
1406.         verticalAlignment = Alignment.CenterVertically,
1407.         modifier = Modifier.fillMaxWidth()
1408.     ) {
1409.         Text(
1410.             text = friendlyName,
1411.             style = MaterialTheme.typography.headlineMedium,
1412.             modifier = Modifier.weight(1f)
1413.         )
1414.         IconButton(
1415.             onClick = onEditClick,
1416.             modifier = Modifier.padding(start = 8.dp)
1417.         ) {
1418.             Icon(
1419.                 imageVector = Icons.Default.Edit,
1420.                 contentDescription = "Edit device name"
1421.             )
1422.         }
1423.     }
1424. }

AddRoomDialog.kt

1425. package com.example.iot_ha.ui.components.rooms
1426. 
1427. import androidx.compose.foundation.layout.Column
1428. import androidx.compose.material3.AlertDialog
1429. import androidx.compose.material3.Button
1430. import androidx.compose.material3.Text
1431. import androidx.compose.runtime.Composable
1432. import androidx.compose.runtime.getValue
1433. import androidx.compose.runtime.mutableStateOf
1434. import androidx.compose.runtime.remember
1435. import androidx.compose.runtime.setValue
1436. import com.example.iot_ha.ui.components.common.CustomOutlinedTextField
1437. 
1438. @Composable
1439. fun AddRoomDialog(
1440.     onDismiss: () -> Unit,
1441.     onConfirm: (String) -> Unit
1442. ) {
1443.     var roomName by remember { mutableStateOf("") }
1444. 
1445.     AlertDialog(
1446.         onDismissRequest = onDismiss,
1447.         confirmButton = {
1448.             Button(onClick = {
1449.                 if (roomName.isNotBlank()) {
1450.                     onConfirm(roomName)
1451.                     onDismiss()
1452.                 }
1453.             }) {
1454.                 Text("Добавить")
1455.             }
1456.         },
1457.         dismissButton = {
1458.             Button(onClick = onDismiss) {
1459.                 Text("Отмена")
1460.             }
1461.         },
1462.         title = { Text("Добавить комнату") },
1463.         text = {
1464.             Column {
1465.                 Text("Введите название комнаты:")
1466.                 CustomOutlinedTextField(
1467.                     value = roomName,
1468.                     label = "Название комнаты",
1469.                     onValueChange = { roomName = it }
1470.                 )
1471.             }
1472.         }
1473.     )
1474. }


RoomCard.kt

1475. package com.example.iot_ha.ui.components.rooms
1476. 
1477. import androidx.compose.foundation.Image
1478. import androidx.compose.foundation.background
1479. import androidx.compose.foundation.clickable
1480. import androidx.compose.foundation.layout.Box
1481. import androidx.compose.foundation.layout.Column
1482. import androidx.compose.foundation.layout.Row
1483. import androidx.compose.foundation.layout.Spacer
1484. import androidx.compose.foundation.layout.fillMaxWidth
1485. import androidx.compose.foundation.layout.padding
1486. import androidx.compose.foundation.layout.size
1487. import androidx.compose.foundation.layout.width
1488. import androidx.compose.foundation.shape.RoundedCornerShape
1489. import androidx.compose.material.icons.Icons
1490. import androidx.compose.material.icons.filled.Delete
1491. import androidx.compose.material3.Card
1492. import androidx.compose.material3.CardDefaults
1493. import androidx.compose.material3.Icon
1494. import androidx.compose.material3.IconButton
1495. import androidx.compose.material3.MaterialTheme
1496. import androidx.compose.material3.Text
1497. import androidx.compose.runtime.Composable
1498. import androidx.compose.ui.Alignment
1499. import androidx.compose.ui.Modifier
1500. import androidx.compose.ui.draw.clip
1501. import androidx.compose.ui.graphics.Color
1502. import androidx.compose.ui.res.painterResource
1503. import androidx.compose.ui.text.font.FontWeight
1504. import androidx.compose.ui.unit.dp
1505. import androidx.compose.ui.unit.sp
1506. import androidx.navigation.NavHostController
1507. import com.example.iot_ha.R
1508. 
1509. @Composable
1510. fun RoomCard(
1511.     roomId: Int,
1512.     roomName: String,
1513.     deviceCount: Int,
1514.     navHostController: NavHostController,
1515.     onDelete: (Int) -> Unit
1516. ) {
1517.     Card(
1518.         shape = RoundedCornerShape(16.dp),
1519.         modifier = Modifier
1520.             .fillMaxWidth()
1521.             .padding(8.dp)
1522.             .clickable { navHostController.navigate("room_details/$roomId") },
1523.         elevation = CardDefaults.cardElevation(6.dp),
1524.         colors = CardDefaults.cardColors(containerColor = Color(0xFFE3F2FD))
1525.     ) {
1526.         Row(
1527.             verticalAlignment = Alignment.CenterVertically,
1528.             modifier = Modifier.padding(16.dp)
1529.         ) {
1530.             Image(
1531.                 painter = painterResource(id = R.drawable.mqtt_logo),
1532.                 contentDescription = roomName,
1533.                 modifier = Modifier
1534.                     .size(64.dp)
1535.                     .clip(RoundedCornerShape(12.dp))
1536.             )
1537.             Spacer(modifier = Modifier.width(16.dp))
1538.             Column(modifier = Modifier.weight(1f)) {
1539.                 Text(
1540.                     text = roomName,
1541.                     fontSize = 20.sp,
1542.                     fontWeight = FontWeight.Bold,
1543.                     color = Color.Black
1544.                 )
1545.             }
1546.             Spacer(modifier = Modifier.width(16.dp))
1547.             Box(
1548.                 contentAlignment = Alignment.Center,
1549.                 modifier = Modifier
1550.                     .size(32.dp)
1551.                     .clip(RoundedCornerShape(16.dp))
1552.                     .background(MaterialTheme.colorScheme.primary)
1553.             ) {
1554.                 Text(
1555.                     text = deviceCount.toString(),
1556.                     color = Color.White,
1557.                     fontSize = 14.sp,
1558.                     fontWeight = FontWeight.Bold
1559.                 )
1560.             }
1561.             Spacer(modifier = Modifier.width(8.dp))
1562.             IconButton(onClick = { onDelete(roomId) }) {
1563.                 Icon(imageVector = Icons.Default.Delete, contentDescription = "Удалить комнату", tint = Color.Red)
1564.             }
1565.         }
1566.     }
1567. }


BrightnessCard.kt

1568. package com.example.iot_ha.ui.components.settings.led
1569. 
1570. import androidx.compose.foundation.background
1571. import androidx.compose.foundation.border
1572. import androidx.compose.foundation.layout.Box
1573. import androidx.compose.foundation.layout.Column
1574. import androidx.compose.foundation.layout.Row
1575. import androidx.compose.foundation.layout.Spacer
1576. import androidx.compose.foundation.layout.fillMaxWidth
1577. import androidx.compose.foundation.layout.height
1578. import androidx.compose.foundation.layout.padding
1579. import androidx.compose.foundation.layout.size
1580. import androidx.compose.foundation.layout.width
1581. import androidx.compose.material3.Card
1582. import androidx.compose.material3.MaterialTheme
1583. import androidx.compose.material3.Slider
1584. import androidx.compose.material3.Text
1585. import androidx.compose.runtime.Composable
1586. import androidx.compose.ui.Alignment
1587. import androidx.compose.ui.Modifier
1588. import androidx.compose.ui.graphics.Color
1589. import androidx.compose.ui.unit.dp
1590. 
1591. @Composable
1592. fun BrigtnessCard(
1593.     title: String,
1594.     color: Color,
1595.     value: Float,
1596.     onValueChange: (Float) -> Unit,
1597.     onValueChangeFinished: () -> Unit
1598. ) {
1599.     Card(
1600.         modifier = Modifier
1601.             .fillMaxWidth()
1602.             .padding(8.dp),
1603.         shape = MaterialTheme.shapes.medium
1604.     ) {
1605.         Column(
1606.             modifier = Modifier
1607.                 .padding(16.dp)
1608.         ) {
1609.             Text(text = title, style = MaterialTheme.typography.bodyLarge)
1610. 
1611.             Spacer(modifier = Modifier.height(8.dp))
1612. 
1613.             Row(
1614.                 verticalAlignment = Alignment.CenterVertically,
1615.                 modifier = Modifier.fillMaxWidth()
1616.             ) {
1617.                 Box(
1618.                     modifier = Modifier
1619.                         .size(40.dp)
1620.                         .background(color)
1621.                         .border(2.dp, Color.Black)
1622.                 )
1623. 
1624.                 Spacer(modifier = Modifier.width(16.dp))
1625. 
1626.                 Slider(
1627.                     value = value,
1628.                     onValueChange = onValueChange,
1629.                     onValueChangeFinished = onValueChangeFinished,
1630.                     valueRange = 0f..255f,
1631.                     modifier = Modifier.fillMaxWidth()
1632.                 )
1633.             }
1634.         }
1635.     }
1636. }

ColorsCard.kt

1637. package com.example.iot_ha.ui.components.settings.led
1638. 
1639. import androidx.compose.foundation.background
1640. import androidx.compose.foundation.border
1641. import androidx.compose.foundation.layout.Box
1642. import androidx.compose.foundation.layout.Column
1643. import androidx.compose.foundation.layout.Row
1644. import androidx.compose.foundation.layout.Spacer
1645. import androidx.compose.foundation.layout.fillMaxWidth
1646. import androidx.compose.foundation.layout.height
1647. import androidx.compose.foundation.layout.padding
1648. import androidx.compose.foundation.layout.size
1649. import androidx.compose.foundation.layout.width
1650. import androidx.compose.material3.Card
1651. import androidx.compose.material3.MaterialTheme
1652. import androidx.compose.material3.Slider
1653. import androidx.compose.material3.Text
1654. import androidx.compose.runtime.Composable
1655. import androidx.compose.ui.Alignment
1656. import androidx.compose.ui.Modifier
1657. import androidx.compose.ui.graphics.Color
1658. import androidx.compose.ui.unit.dp
1659. 
1660. @Composable
1661. fun ColorsCard(
1662.     red: Float,
1663.     green: Float,
1664.     blue: Float,
1665.     onRedChange: (Float) -> Unit,
1666.     onGreenChange: (Float) -> Unit,
1667.     onBlueChange: (Float) -> Unit,
1668.     onValueChangeFinished: () -> Unit
1669. ) {
1670.     Card(
1671.         modifier = Modifier
1672.             .fillMaxWidth()
1673.             .padding(8.dp),
1674.         shape = MaterialTheme.shapes.medium
1675.     ) {
1676.         Column(
1677.             modifier = Modifier
1678.                 .padding(16.dp)
1679.         ) {
1680.             Text(text = "Colors Status", style = MaterialTheme.typography.bodyLarge)
1681. 
1682.             Spacer(modifier = Modifier.height(8.dp))
1683. 
1684.             listOf(
1685.                 Triple("Red", Color(red / 255f, 0f, 0f), onRedChange to red),
1686.                 Triple("Green", Color(0f, green / 255f, 0f), onGreenChange to green),
1687.                 Triple("Blue", Color(0f, 0f, blue / 255f), onBlueChange to blue)
1688.             ).forEach { (label, color, setterWithValue) ->
1689.                 val (setter, value) = setterWithValue
1690. 
1691.                 Row(
1692.                     verticalAlignment = Alignment.CenterVertically,
1693.                     modifier = Modifier.fillMaxWidth()
1694.                 ) {
1695.                     Box(
1696.                         modifier = Modifier
1697.                             .size(20.dp)
1698.                             .background(color)
1699.                             .border(1.dp, Color.Black)
1700.                     )
1701. 
1702.                     Spacer(modifier = Modifier.width(8.dp))
1703. 
1704.                     Column(modifier = Modifier.weight(1f)) {
1705.                         Text(text = label)
1706.                         Slider(
1707.                             value = value,
1708.                             onValueChange = setter,
1709.                             onValueChangeFinished = onValueChangeFinished,
1710.                             valueRange = 0f..255f,
1711.                             modifier = Modifier.fillMaxWidth()
1712.                         )
1713.                     }
1714.                 }
1715.                 Spacer(modifier = Modifier.height(8.dp))
1716.             }
1717.         }
1718.     }
1719. }


AppNavHost.kt

1720. package com.example.iot_ha.ui.navigation
1721. 
1722. import com.example.iot_ha.ui.screens.home.settings.LEDScreen
1723. import androidx.compose.runtime.Composable
1724. import androidx.compose.ui.platform.LocalContext
1725. import androidx.lifecycle.viewmodel.compose.viewModel
1726. import androidx.navigation.NavHostController
1727. import androidx.navigation.compose.NavHost
1728. import androidx.navigation.compose.composable
1729. import com.example.iot_ha.data.local.RoomLocalDatabase
1730. import com.example.iot_ha.ui.screens.AuthorizationScreen
1731. import com.example.iot_ha.ui.screens.HomeScreen
1732. import com.example.iot_ha.ui.screens.home.DeviceDetailScreen
1733. import com.example.iot_ha.ui.screens.home.RoomDetailScreen
1734. import com.example.iot_ha.ui.viewmodels.factory.DevicesViewModelFactory
1735. import com.example.iot_ha.ui.viewmodels.factory.RoomsViewModelFactory
1736. import com.example.iot_ha.ui.viewmodels.factory.SensorsViewModelFactory
1737. import com.example.iot_ha.ui.viewmodels.shared.DevicesViewModel
1738. import com.example.iot_ha.ui.viewmodels.shared.RoomsViewModel
1739. import com.example.iot_ha.ui.viewmodels.shared.SensorsViewModel
1740. 
1741. @Composable
1742. fun AppNavHost(
1743.     navController: NavHostController,
1744.     startDestination: String
1745. ) {
1746.     val db = RoomLocalDatabase.getInstance(LocalContext.current)
1747. 
1748.     val sensorsViewModel: SensorsViewModel = viewModel(factory = SensorsViewModelFactory())
1749.     val devicesViewModel: DevicesViewModel = viewModel(factory = DevicesViewModelFactory(db))
1750.     val roomsViewModel: RoomsViewModel = viewModel(factory = RoomsViewModelFactory(db))
1751. 
1752.     NavHost(navController = navController, startDestination = startDestination) {
1753.         composable(Routes.AUTH_SCREEN) {
1754.             AuthorizationScreen(
1755.                 navHostController = navController,
1756.                 sensorsViewModel = sensorsViewModel,
1757.                 devicesViewModel = devicesViewModel
1758.             )
1759.         }
1760. 
1761.         composable(Routes.HOME_SCREEN) {
1762.             HomeScreen(
1763.                 navHostController = navController,
1764.                 devicesViewModel = devicesViewModel,
1765.                 roomsViewModel = roomsViewModel
1766.             )
1767.         }
1768. 
1769.         composable(Routes.DEVICE_DETAILS_SCREEN) { backStackEntry ->
1770.             DeviceDetailScreen(
1771.                 backStackEntry = backStackEntry,
1772.                 devicesViewModel = devicesViewModel,
1773.                 roomsViewModel = roomsViewModel
1774.             )
1775.         }
1776. 
1777.         composable(Routes.ROOM_DETAILS_SCREEN) { backStackEntry ->
1778.             RoomDetailScreen(
1779.                 backStackEntry = backStackEntry,
1780.                 navHostController = navController,
1781.                 devicesViewModel = devicesViewModel,
1782.                 roomsViewModel = roomsViewModel
1783.             )
1784.         }
1785. 
1786.         composable(Routes.LED_SETTINGS_SCREEN) {
1787.             LEDScreen()
1788.         }
1789.     }
1790. }
1791. 


Routes.kt

1792. package com.example.iot_ha.ui.navigation
1793. 
1794. object Routes {
1795.     const val AUTH_SCREEN = "auth"
1796.     const val HOME_SCREEN = "home"
1797. 
1798.     const val DEVICE_DETAILS_SCREEN = "device_details/{deviceId}"
1799.     const val ROOM_DETAILS_SCREEN = "room_details/{roomId}"
1800. 
1801.     const val LED_SETTINGS_SCREEN = "home/led"
1802. }

AuthorizationScreen.kt

1803. package com.example.iot_ha.ui.screens
1804. 
1805. import androidx.compose.foundation.Image
1806. import androidx.compose.foundation.layout.Column
1807. import androidx.compose.foundation.layout.Spacer
1808. import androidx.compose.foundation.layout.aspectRatio
1809. import androidx.compose.foundation.layout.fillMaxSize
1810. import androidx.compose.foundation.layout.fillMaxWidth
1811. import androidx.compose.foundation.layout.height
1812. import androidx.compose.foundation.layout.padding
1813. import androidx.compose.foundation.shape.RoundedCornerShape
1814. import androidx.compose.runtime.Composable
1815. import androidx.compose.runtime.getValue
1816. import androidx.compose.runtime.mutableStateOf
1817. import androidx.compose.runtime.remember
1818. import androidx.compose.runtime.setValue
1819. import androidx.compose.ui.Alignment
1820. import androidx.compose.ui.Modifier
1821. import androidx.compose.ui.draw.clip
1822. import androidx.compose.ui.platform.LocalContext
1823. import androidx.compose.ui.res.painterResource
1824. import androidx.compose.ui.unit.dp
1825. import androidx.lifecycle.viewmodel.compose.viewModel
1826. import androidx.navigation.NavHostController
1827. import com.example.iot_ha.R
1828. import com.example.iot_ha.data.local.RoomLocalDatabase
1829. import com.example.iot_ha.data.mqtt.domain.MQTTMessageHandler
1830. import com.example.iot_ha.ui.components.broker.BrokerInputForm
1831. import com.example.iot_ha.ui.components.broker.BrokerList
1832. import com.example.iot_ha.ui.viewmodels.AuthorizationViewModel
1833. import com.example.iot_ha.ui.viewmodels.factory.AuthorizationViewModelFactory
1834. import com.example.iot_ha.ui.viewmodels.shared.DevicesViewModel
1835. import com.example.iot_ha.ui.viewmodels.shared.SensorsViewModel
1836. 
1837. @Composable
1838. fun AuthorizationScreen(
1839.     navHostController: NavHostController,
1840.     sensorsViewModel: SensorsViewModel,
1841.     devicesViewModel: DevicesViewModel
1842. ) {
1843.     var serverUri by remember { mutableStateOf("") }
1844.     var serverPort by remember { mutableStateOf("") }
1845.     var user by remember { mutableStateOf("") }
1846.     var password by remember { mutableStateOf("") }
1847. 
1848.     val db = RoomLocalDatabase.getInstance(LocalContext.current)
1849.     val messageHandler = remember { MQTTMessageHandler(sensorsViewModel, devicesViewModel) }
1850.     val authorizationViewModel: AuthorizationViewModel =
1851.         viewModel(factory = AuthorizationViewModelFactory(db, messageHandler))
1852. 
1853.     val brokers = authorizationViewModel.brokers.value
1854. 
1855.     Column(
1856.         modifier = Modifier
1857.             .fillMaxSize()
1858.             .padding(horizontal = 16.dp),
1859.         horizontalAlignment = Alignment.CenterHorizontally
1860.     ) {
1861.         Spacer(modifier = Modifier.height(40.dp))
1862. 
1863.         Image(
1864.             painter = painterResource(id = R.drawable.mqtt_logo),
1865.             contentDescription = "Broker Logo",
1866.             modifier = Modifier
1867.                 .fillMaxWidth()
1868.                 .padding(horizontal = 16.dp)
1869.                 .aspectRatio(4f)
1870.                 .clip(RoundedCornerShape(12.dp)),
1871.         )
1872. 
1873.         Spacer(modifier = Modifier.height(50.dp))
1874. 
1875.         BrokerInputForm(
1876.             serverUri = serverUri,
1877.             serverPort = serverPort,
1878.             user = user,
1879.             password = password,
1880.             onServerUriChange = { serverUri = it },
1881.             onServerPortChange = { serverPort = it },
1882.             onUserChange = { user = it },
1883.             onPasswordChange = { password = it },
1884.             onAddBroker = {
1885.                 authorizationViewModel.addBroker(
1886.                     serverUri,
1887.                     serverPort.toIntOrNull() ?: 1883,
1888.                     user.takeIf { it.isNotBlank() },
1889.                     password.takeIf { it.isNotBlank() }
1890.                 )
1891.                 serverUri = ""
1892.                 serverPort = ""
1893.                 user = ""
1894.                 password = ""
1895.             }
1896.         )
1897. 
1898.         Spacer(modifier = Modifier.height(16.dp))
1899. 
1900.         BrokerList(
1901.             brokers = brokers,
1902.             onDelete = { authorizationViewModel.deleteBroker(it) },
1903.             onLogin = { broker ->
1904.                 authorizationViewModel.handleLogin(broker) {
1905.                     navHostController.navigate("home")
1906.                 }
1907.             }
1908.         )
1909.     }
1910. }


HomeScreen.kt

1911. package com.example.iot_ha.ui.screens
1912. 
1913. import androidx.compose.animation.AnimatedContent
1914. import androidx.compose.animation.ExperimentalAnimationApi
1915. import androidx.compose.animation.fadeIn
1916. import androidx.compose.animation.fadeOut
1917. import androidx.compose.animation.slideInHorizontally
1918. import androidx.compose.animation.slideOutHorizontally
1919. import androidx.compose.animation.togetherWith
1920. import androidx.compose.foundation.background
1921. import androidx.compose.foundation.layout.Arrangement
1922. import androidx.compose.foundation.layout.Column
1923. import androidx.compose.foundation.layout.PaddingValues
1924. import androidx.compose.foundation.layout.Spacer
1925. import androidx.compose.foundation.layout.fillMaxSize
1926. import androidx.compose.foundation.layout.fillMaxWidth
1927. import androidx.compose.foundation.layout.height
1928. import androidx.compose.foundation.layout.padding
1929. import androidx.compose.foundation.layout.statusBarsPadding
1930. import androidx.compose.foundation.lazy.LazyRow
1931. import androidx.compose.foundation.lazy.itemsIndexed
1932. import androidx.compose.runtime.Composable
1933. import androidx.compose.runtime.getValue
1934. import androidx.compose.runtime.mutableIntStateOf
1935. import androidx.compose.runtime.remember
1936. import androidx.compose.runtime.setValue
1937. import androidx.compose.ui.Modifier
1938. import androidx.compose.ui.graphics.Color
1939. import androidx.compose.ui.unit.dp
1940. import androidx.navigation.NavHostController
1941. import com.example.iot_ha.ui.components.common.TabButton
1942. import com.example.iot_ha.ui.screens.home.DevicesScreen
1943. import com.example.iot_ha.ui.screens.home.RoomsScreen
1944. import com.example.iot_ha.ui.screens.home.SettingsScreen
1945. import com.example.iot_ha.ui.viewmodels.shared.DevicesViewModel
1946. import com.example.iot_ha.ui.viewmodels.shared.RoomsViewModel
1947. import com.example.iot_ha.utils.Constants
1948. 
1949. @OptIn(ExperimentalAnimationApi::class)
1950. @Composable
1951. fun HomeScreen(
1952.     navHostController: NavHostController,
1953.     devicesViewModel: DevicesViewModel,
1954.     roomsViewModel: RoomsViewModel
1955. ) {
1956.     var selectedTab by remember { mutableIntStateOf(0) }
1957.     var previousTab by remember { mutableIntStateOf(0) }
1958. 
1959.     Column(
1960.         modifier = Modifier
1961.             .fillMaxSize()
1962.             .statusBarsPadding()
1963.             .background(Color.White)
1964.     ) {
1965.         LazyRow(
1966.             modifier = Modifier
1967.                 .fillMaxWidth()
1968.                 .padding(vertical = 12.dp, horizontal = 8.dp),
1969.             contentPadding = PaddingValues(horizontal = 8.dp),
1970.             horizontalArrangement = Arrangement.spacedBy(8.dp)
1971.         ) {
1972.             itemsIndexed(Constants.TABS_LIST) { index, title ->
1973.                 TabButton(
1974.                     title = title,
1975.                     isSelected = selectedTab == index,
1976.                     onClick = {
1977.                         previousTab = selectedTab
1978.                         selectedTab = index
1979.                     }
1980.                 )
1981.             }
1982.         }
1983. 
1984.         Spacer(modifier = Modifier.height(8.dp))
1985. 
1986.         AnimatedContent(
1987.             targetState = selectedTab,
1988.             transitionSpec = {
1989.                 if (targetState > previousTab) {
1990.                     slideInHorizontally { width -> width } + fadeIn() togetherWith
1991.                             slideOutHorizontally { width -> -width } + fadeOut()
1992.                 } else {
1993.                     slideInHorizontally { width -> -width } + fadeIn() togetherWith
1994.                             slideOutHorizontally { width -> width } + fadeOut()
1995.                 }
1996.             },
1997.             label = "Tab Animation"
1998.         ) { tab ->
1999.             when (tab) {
2000.                 0 -> DevicesScreen(
2001.                     navHostController = navHostController,
2002.                     devicesViewModel = devicesViewModel
2003.                 )
2004. 
2005.                 1 -> RoomsScreen(
2006.                     navHostController = navHostController,
2007.                     roomsViewModel = roomsViewModel
2008.                 )
2009. 
2010. //                2 -> ScheduleScreen()
2011. 
2012.                 2 -> SettingsScreen(
2013.                     navHostController = navHostController
2014.                 )
2015. 
2016.             }
2017.         }
2018.     }
2019. }

DeviceDetailScreen.kt

2020. package com.example.iot_ha.ui.screens.home
2021. 
2022. import androidx.compose.foundation.layout.Column
2023. import androidx.compose.foundation.layout.Spacer
2024. import androidx.compose.foundation.layout.fillMaxSize
2025. import androidx.compose.foundation.layout.fillMaxWidth
2026. import androidx.compose.foundation.layout.height
2027. import androidx.compose.foundation.layout.padding
2028. import androidx.compose.material3.AlertDialog
2029. import androidx.compose.material3.DropdownMenuItem
2030. import androidx.compose.material3.ExperimentalMaterial3Api
2031. import androidx.compose.material3.ExposedDropdownMenuBox
2032. import androidx.compose.material3.ExposedDropdownMenuDefaults
2033. import androidx.compose.material3.MaterialTheme
2034. import androidx.compose.material3.OutlinedTextField
2035. import androidx.compose.material3.Surface
2036. import androidx.compose.material3.Text
2037. import androidx.compose.material3.TextButton
2038. import androidx.compose.runtime.Composable
2039. import androidx.compose.runtime.collectAsState
2040. import androidx.compose.runtime.getValue
2041. import androidx.compose.runtime.mutableStateOf
2042. import androidx.compose.runtime.remember
2043. import androidx.compose.runtime.setValue
2044. import androidx.compose.ui.Alignment
2045. import androidx.compose.ui.Modifier
2046. import androidx.compose.ui.unit.dp
2047. import androidx.navigation.NavBackStackEntry
2048. import com.example.iot_ha.data.local.device.DeviceState
2049. import com.example.iot_ha.ui.components.devices.DeviceDetails
2050. import com.example.iot_ha.ui.components.devices.DeviceNotFoundMessage
2051. import com.example.iot_ha.ui.components.devices.DeviceTitle
2052. import com.example.iot_ha.ui.viewmodels.shared.DevicesViewModel
2053. import com.example.iot_ha.ui.viewmodels.shared.RoomsViewModel
2054. 
2055. @OptIn(ExperimentalMaterial3Api::class)
2056. @Composable
2057. fun DeviceDetailScreen(
2058.     backStackEntry: NavBackStackEntry,
2059.     devicesViewModel: DevicesViewModel,
2060.     roomsViewModel: RoomsViewModel
2061. ) {
2062.     val deviceId = backStackEntry.arguments?.getString("deviceId")?.toIntOrNull() ?: -1
2063. 
2064.     val devices by devicesViewModel.devices.collectAsState()
2065.     val deviceState by DeviceState.devicesData.collectAsState()
2066.     val deviceData = deviceState[deviceId]
2067. 
2068.     val rooms by roomsViewModel.rooms.collectAsState()
2069.     val device = devices.find { it.id == deviceId }
2070.     val currentRoom = rooms.find { it.id == device?.roomId }
2071.     var selectedRoom by remember { mutableStateOf(currentRoom?.name ?: "Select room") }
2072.     var expanded by remember { mutableStateOf(false) }
2073. 
2074.     var showEditDialog by remember { mutableStateOf(false) }
2075.     var newName by remember { mutableStateOf(device?.friendlyName ?: "") }
2076. 
2077.     if (showEditDialog) {
2078.         AlertDialog(
2079.             onDismissRequest = { showEditDialog = false },
2080.             title = { Text("Edit device name") },
2081.             text = {
2082.                 OutlinedTextField(
2083.                     value = newName,
2084.                     onValueChange = { newName = it },
2085.                     label = { Text("New name") }
2086.                 )
2087.             },
2088.             confirmButton = {
2089.                 TextButton(
2090.                     onClick = {
2091.                         devicesViewModel.updateDeviceName(deviceId, newName)
2092.                         showEditDialog = false
2093.                     }
2094.                 ) {
2095.                     Text("Save")
2096.                 }
2097.             },
2098.             dismissButton = {
2099.                 TextButton(
2100.                     onClick = { showEditDialog = false }
2101.                 ) {
2102.                     Text("Cancel")
2103.                 }
2104.             }
2105.         )
2106.     }
2107. 
2108.     Surface(
2109.         modifier = Modifier
2110.             .fillMaxSize()
2111.             .padding(16.dp),
2112.         color = MaterialTheme.colorScheme.background
2113.     ) {
2114.         Column(
2115.             modifier = Modifier.fillMaxSize(),
2116.             horizontalAlignment = Alignment.CenterHorizontally
2117.         ) {
2118.             DeviceTitle(
2119.                 friendlyName = device?.friendlyName?.uppercase() ?: "Unknown Device",
2120.                 onEditClick = { showEditDialog = true }
2121.             )
2122. 
2123.             Spacer(modifier = Modifier.height(8.dp))
2124. 
2125.             ExposedDropdownMenuBox(
2126.                 expanded = expanded,
2127.                 onExpandedChange = { expanded = !expanded }
2128.             ) {
2129.                 OutlinedTextField(
2130.                     value = selectedRoom,
2131.                     onValueChange = {},
2132.                     readOnly = true,
2133.                     modifier = Modifier
2134.                         .fillMaxWidth()
2135.                         .menuAnchor(),
2136.                     trailingIcon = {
2137.                         ExposedDropdownMenuDefaults.TrailingIcon(expanded = expanded)
2138.                     }
2139.                 )
2140.                 ExposedDropdownMenu(
2141.                     expanded = expanded,
2142.                     onDismissRequest = { expanded = false }
2143.                 ) {
2144.                     DropdownMenuItem(
2145.                         text = { Text("Select room") },
2146.                         onClick = {
2147.                             selectedRoom = "Select room"
2148.                             expanded = false
2149.                             devicesViewModel.assignRoomToDevice(deviceId, null)
2150.                         }
2151.                     )
2152.                     rooms.forEach { room ->
2153.                         DropdownMenuItem(
2154.                             text = { Text(room.name) },
2155.                             onClick = {
2156.                                 selectedRoom = room.name
2157.                                 expanded = false
2158.                                 devicesViewModel.assignRoomToDevice(deviceId, room.id)
2159.                             }
2160.                         )
2161.                     }
2162.                 }
2163.             }
2164. 
2165.             Spacer(modifier = Modifier.height(8.dp))
2166. 
2167.             if (deviceData != null) {
2168.                 DeviceDetails(deviceData)
2169.             } else {
2170.                 DeviceNotFoundMessage()
2171.             }
2172.         }
2173.     }
2174. }


DevicesScreen.kt

2175. package com.example.iot_ha.ui.screens.home
2176. 
2177. import androidx.compose.foundation.layout.Arrangement
2178. import androidx.compose.foundation.layout.Column
2179. import androidx.compose.foundation.layout.Spacer
2180. import androidx.compose.foundation.layout.fillMaxSize
2181. import androidx.compose.foundation.layout.height
2182. import androidx.compose.foundation.layout.padding
2183. import androidx.compose.foundation.rememberScrollState
2184. import androidx.compose.foundation.verticalScroll
2185. import androidx.compose.material3.Scaffold
2186. import androidx.compose.runtime.Composable
2187. import androidx.compose.runtime.collectAsState
2188. import androidx.compose.runtime.getValue
2189. import androidx.compose.ui.Alignment
2190. import androidx.compose.ui.Modifier
2191. import androidx.compose.ui.unit.dp
2192. import androidx.navigation.NavHostController
2193. import com.example.iot_ha.R
2194. import com.example.iot_ha.data.local.device.DeviceState
2195. import com.example.iot_ha.ui.components.devices.DeviceCard
2196. import com.example.iot_ha.ui.viewmodels.shared.DevicesViewModel
2197. import com.example.iot_ha.utils.Constants
2198. import com.example.iot_ha.utils.toBooleanState
2199. 
2200. @Composable
2201. fun DevicesScreen(navHostController: NavHostController, devicesViewModel: DevicesViewModel) {
2202.     val switchDevices by devicesViewModel.getDevicesByTypeFlow("switch").collectAsState()
2203.     val devicesWithoutCommands by devicesViewModel.getDevicesWithoutCommandsFlow().collectAsState()
2204.     val deviceState by DeviceState.devicesData.collectAsState()
2205. 
2206.     Scaffold { paddingValues ->
2207.         Column(
2208.             modifier = Modifier
2209.                 .fillMaxSize()
2210.                 .padding(paddingValues)
2211.                 .verticalScroll(rememberScrollState())
2212.                 .padding(16.dp)
2213.         ) {
2214.             if (devicesWithoutCommands.isEmpty() && switchDevices.isEmpty()) {
2215.                 Column(
2216.                     modifier = Modifier
2217.                         .fillMaxSize(),
2218.                     verticalArrangement = Arrangement.Center,
2219.                     horizontalAlignment = Alignment.CenterHorizontally
2220.                 ) {
2221.                     androidx.compose.material3.Text(
2222.                         text = "No connected devices",
2223.                         style = androidx.compose.material3.MaterialTheme.typography.titleMedium
2224.                     )
2225.                 }
2226.             } else {
2227.                 devicesWithoutCommands.forEach { device ->
2228.                     DeviceCard(
2229.                         deviceId = device.id,
2230.                         imageRes = R.drawable.mqtt_logo,
2231.                         name = device.friendlyName,
2232.                         navController = navHostController,
2233.                         onToggle = { state ->
2234.                             devicesViewModel.onToggle(device.id, state)
2235.                         }
2236.                     )
2237.                     Spacer(modifier = Modifier.height(8.dp))
2238.                 }
2239. 
2240.                 switchDevices.forEach { device ->
2241.                     val deviceData = deviceState[device.id]
2242. 
2243.                     DeviceCard(
2244.                         deviceId = device.id,
2245.                         imageRes = R.drawable.mqtt_logo,
2246.                         name = device.friendlyName,
2247.                         type = Constants.SWITCH_TYPE,
2248.                         value = (deviceData?.get("state") as? String)?.toBooleanState() ?: false,
2249.                         navController = navHostController,
2250.                         onToggle = { state ->
2251.                             devicesViewModel.onToggle(device.id, state)
2252.                         }
2253.                     )
2254.                     Spacer(modifier = Modifier.height(8.dp))
2255.                 }
2256.             }
2257.         }
2258.     }
2259. }


RoomDetailScreen.kt

2260. package com.example.iot_ha.ui.screens.home
2261. 
2262. import androidx.compose.foundation.layout.Column
2263. import androidx.compose.foundation.layout.Spacer
2264. import androidx.compose.foundation.layout.fillMaxSize
2265. import androidx.compose.foundation.layout.height
2266. import androidx.compose.foundation.layout.padding
2267. import androidx.compose.foundation.rememberScrollState
2268. import androidx.compose.foundation.verticalScroll
2269. import androidx.compose.material3.Scaffold
2270. import androidx.compose.material3.Text
2271. import androidx.compose.runtime.Composable
2272. import androidx.compose.runtime.collectAsState
2273. import androidx.compose.runtime.getValue
2274. import androidx.compose.ui.Modifier
2275. import androidx.compose.ui.unit.dp
2276. import androidx.navigation.NavBackStackEntry
2277. import androidx.navigation.NavHostController
2278. import com.example.iot_ha.R
2279. import com.example.iot_ha.data.local.device.DeviceState
2280. import com.example.iot_ha.ui.components.devices.DeviceCard
2281. import com.example.iot_ha.ui.viewmodels.shared.DevicesViewModel
2282. import com.example.iot_ha.ui.viewmodels.shared.RoomsViewModel
2283. import com.example.iot_ha.utils.Constants
2284. import com.example.iot_ha.utils.toBooleanState
2285. 
2286. @Composable
2287. fun RoomDetailScreen(
2288.     backStackEntry: NavBackStackEntry,
2289.     roomsViewModel: RoomsViewModel,
2290.     devicesViewModel: DevicesViewModel,
2291.     navHostController: NavHostController
2292. ) {
2293.     val roomId = backStackEntry.arguments?.getString("roomId")?.toIntOrNull() ?: -1
2294. 
2295.     val roomDevices by devicesViewModel.getDevicesByRoomIdFlow(roomId).collectAsState()
2296.     val switchDevices by devicesViewModel.getDevicesByTypeFlow("switch").collectAsState()
2297. 
2298.     val roomSwitchDevices = switchDevices.filter { it -> it.id in roomDevices.map { it.id } }
2299. 
2300.     val deviceState by DeviceState.devicesData.collectAsState()
2301. 
2302.     Scaffold { paddingValues ->
2303.         Column(
2304.             modifier = Modifier
2305.                 .fillMaxSize()
2306.                 .padding(paddingValues)
2307.                 .verticalScroll(rememberScrollState())
2308.                 .padding(16.dp)
2309.         ) {
2310.             roomSwitchDevices.forEach { device ->
2311.                 val deviceData = deviceState[device.id]
2312. 
2313.                 DeviceCard(
2314.                     deviceId = device.id,
2315.                     imageRes = R.drawable.mqtt_logo,
2316.                     name = device.friendlyName,
2317.                     type = Constants.SWITCH_TYPE,
2318.                     value = (deviceData?.get("state") as? String)?.toBooleanState() ?: false,
2319.                     navController = navHostController,
2320.                     onToggle = { state ->
2321.                         devicesViewModel.onToggle(device.id, state)
2322.                     }
2323.                 )
2324.                 Spacer(modifier = Modifier.height(8.dp))
2325.             }
2326.         }
2327.     }
2328. }
2329. 
2330. 


RoomsScreen.kt

2331. package com.example.iot_ha.ui.screens.home
2332. 
2333. import android.util.Log
2334. import androidx.compose.foundation.layout.Box
2335. import androidx.compose.foundation.layout.Column
2336. import androidx.compose.foundation.layout.PaddingValues
2337. import androidx.compose.foundation.layout.fillMaxSize
2338. import androidx.compose.foundation.layout.padding
2339. import androidx.compose.foundation.lazy.LazyColumn
2340. import androidx.compose.foundation.lazy.items
2341. import androidx.compose.material.icons.Icons
2342. import androidx.compose.material.icons.filled.Add
2343. import androidx.compose.material3.FloatingActionButton
2344. import androidx.compose.material3.Icon
2345. import androidx.compose.material3.MaterialTheme
2346. import androidx.compose.runtime.Composable
2347. import androidx.compose.runtime.LaunchedEffect
2348. import androidx.compose.runtime.collectAsState
2349. import androidx.compose.runtime.getValue
2350. import androidx.compose.runtime.mutableIntStateOf
2351. import androidx.compose.runtime.mutableStateOf
2352. import androidx.compose.runtime.remember
2353. import androidx.compose.runtime.setValue
2354. import androidx.compose.ui.Alignment
2355. import androidx.compose.ui.Modifier
2356. import androidx.compose.ui.unit.dp
2357. import androidx.navigation.NavHostController
2358. import com.example.iot_ha.ui.components.rooms.AddRoomDialog
2359. import com.example.iot_ha.ui.components.rooms.RoomCard
2360. import com.example.iot_ha.ui.viewmodels.shared.RoomsViewModel
2361. 
2362. @Composable
2363. fun RoomsScreen(
2364.     navHostController: NavHostController,
2365.     roomsViewModel: RoomsViewModel
2366. ) {
2367.     var showDialog by remember { mutableStateOf(false) }
2368.     val rooms by roomsViewModel.rooms.collectAsState()
2369. 
2370.     Box(modifier = Modifier.fillMaxSize()) {
2371.         Column(modifier = Modifier.fillMaxSize()) {
2372.             LazyColumn(
2373.                 modifier = Modifier.weight(1f),
2374.                 contentPadding = PaddingValues(16.dp)
2375.             ) {
2376.                 items(rooms) { room ->
2377.                     var deviceCount by remember { mutableIntStateOf(0) }
2378. 
2379.                     LaunchedEffect(room.id) {
2380.                         roomsViewModel.getDeviceCount(room.id) { count ->
2381.                             deviceCount = count
2382.                         }
2383.                     }
2384. 
2385.                     RoomCard(
2386.                         roomId = room.id.toInt(),
2387.                         roomName = room.name,
2388.                         deviceCount = deviceCount,
2389.                         navHostController = navHostController,
2390.                         onDelete = { roomId ->
2391.                             roomsViewModel.deleteRoom(roomId)
2392.                         }
2393.                     )
2394.                 }
2395. 
2396.             }
2397.         }
2398. 
2399.         FloatingActionButton(
2400.             onClick = { showDialog = true },
2401.             containerColor = MaterialTheme.colorScheme.primary,
2402.             modifier = Modifier
2403.                 .align(Alignment.BottomEnd)
2404.                 .padding(16.dp)
2405.         ) {
2406.             Icon(imageVector = Icons.Default.Add, contentDescription = "Добавить комнату")
2407.         }
2408.     }
2409. 
2410.     if (showDialog) {
2411.         AddRoomDialog(
2412.             onDismiss = { showDialog = false },
2413.             onConfirm = { roomName ->
2414.                 roomsViewModel.addRoom(roomName)
2415.                 showDialog = false
2416.                 Log.i("Rooms", "Комната добавлена: $roomName")
2417.             }
2418.         )
2419.     }
2420. }
2421. 


ScheduleScreen.kt

2422. package com.example.iot_ha.ui.screens.home
2423. 
2424. import androidx.compose.material3.Text
2425. import androidx.compose.runtime.Composable
2426. 
2427. @Composable
2428. fun ScheduleScreen() {
2429.     Text("Schedule Screen")
2430. }

SettingsScreen.kt

2431. package com.example.iot_ha.ui.screens.home
2432. 
2433. import androidx.compose.foundation.layout.Arrangement
2434. import androidx.compose.foundation.layout.Column
2435. import androidx.compose.foundation.layout.Row
2436. import androidx.compose.foundation.layout.Spacer
2437. import androidx.compose.foundation.layout.fillMaxSize
2438. import androidx.compose.foundation.layout.fillMaxWidth
2439. import androidx.compose.foundation.layout.height
2440. import androidx.compose.foundation.layout.padding
2441. import androidx.compose.foundation.shape.RoundedCornerShape
2442. import androidx.compose.material3.Card
2443. import androidx.compose.material3.CardDefaults
2444. import androidx.compose.material3.MaterialTheme
2445. import androidx.compose.material3.Switch
2446. import androidx.compose.material3.SwitchDefaults
2447. import androidx.compose.material3.Text
2448. import androidx.compose.runtime.Composable
2449. import androidx.compose.runtime.LaunchedEffect
2450. import androidx.compose.runtime.collectAsState
2451. import androidx.compose.runtime.getValue
2452. import androidx.compose.runtime.mutableIntStateOf
2453. import androidx.compose.runtime.remember
2454. import androidx.compose.runtime.setValue
2455. import androidx.compose.ui.Alignment
2456. import androidx.compose.ui.Modifier
2457. import androidx.compose.ui.graphics.Color
2458. import androidx.compose.ui.unit.dp
2459. import androidx.navigation.NavController
2460. import com.example.iot_ha.data.local.broker.discovery.DiscoveryState
2461. import com.example.iot_ha.ui.navigation.Routes
2462. import kotlinx.coroutines.delay
2463. 
2464. @Composable
2465. fun SettingsScreen(navHostController: NavController) {
2466.     val discoveryState by DiscoveryState.isDiscoveryActive.collectAsState()
2467. 
2468.     var remainingTime by remember { mutableIntStateOf(0) }
2469. 
2470.     fun onSwitchChanged(enabled: Boolean) { // rename to onDiscoverySwitchChanged
2471.         if (enabled) {
2472.             DiscoveryState.startDiscovery()
2473.         } else {
2474.             DiscoveryState.stopDiscovery()
2475.         }
2476.     }
2477. 
2478.     LaunchedEffect(discoveryState) {
2479.         if (discoveryState) {
2480.             remainingTime = 255
2481.             while (remainingTime > 0) {
2482.                 delay(1000)
2483.                 remainingTime -= 1
2484.             }
2485.         } else {
2486.             remainingTime = 0
2487.         }
2488.     }
2489. 
2490.     Column(
2491.         modifier = Modifier
2492.             .fillMaxSize()
2493.             .padding(16.dp),
2494.         verticalArrangement = Arrangement.Top,
2495.         horizontalAlignment = Alignment.CenterHorizontally
2496.     ) {
2497. 
2498.         Spacer(modifier = Modifier.height(16.dp))
2499. 
2500.         Card(
2501.             shape = RoundedCornerShape(16.dp),
2502.             colors = CardDefaults.cardColors(containerColor = Color(0xFFb697c4)),
2503.             elevation = CardDefaults.cardElevation(6.dp),
2504.             modifier = Modifier.fillMaxWidth()
2505.         ) {
2506.             Column(
2507.                 modifier = Modifier
2508.                     .fillMaxWidth()
2509.                     .padding(16.dp)
2510.             ) {
2511.                 Row(
2512.                     verticalAlignment = Alignment.CenterVertically
2513.                 ) {
2514.                     Text(
2515.                         text = "Device discovery mode",
2516.                         modifier = Modifier.weight(1f),
2517.                         style = MaterialTheme.typography.bodyLarge
2518.                     )
2519.                     Switch(
2520.                         checked = discoveryState,
2521.                         onCheckedChange = { onSwitchChanged(it) },
2522.                         colors = SwitchDefaults.colors(
2523.                             checkedThumbColor = Color.White,
2524.                             checkedTrackColor = Color(0xFF4CAF50),
2525.                             uncheckedThumbColor = Color.White,
2526.                             uncheckedTrackColor = Color(0xFFF44336)
2527.                         )
2528.                     )
2529.                 }
2530. 
2531.                 if (discoveryState) {
2532.                     Text(
2533.                         text = "Time left: $remainingTime s",
2534.                         style = MaterialTheme.typography.bodyMedium,
2535.                         color = Color.Black
2536.                     )
2537.                 }
2538.             }
2539.         }
2540. 
2541.         Spacer(modifier = Modifier.height(16.dp))
2542. 
2543.         Card(
2544.             shape = RoundedCornerShape(16.dp),
2545.             colors = CardDefaults.cardColors(containerColor = Color(0xFFb697c4)),
2546.             elevation = CardDefaults.cardElevation(6.dp),
2547.             modifier = Modifier.fillMaxWidth()
2548.         ) {
2549.             Column(
2550.                 modifier = Modifier
2551.                     .fillMaxWidth()
2552.                     .padding(16.dp)
2553.             ) {
2554.                 Row(
2555.                     verticalAlignment = Alignment.CenterVertically
2556.                 ) {
2557.                     Text(
2558.                         text = "LED Settings",
2559.                         modifier = Modifier.weight(1f),
2560.                         style = MaterialTheme.typography.bodyLarge
2561.                     )
2562.                 }
2563. 
2564.                 Text(
2565.                     text = "Adjust LED brightness and color",
2566.                     style = MaterialTheme.typography.bodyMedium,
2567.                     color = Color.Black,
2568.                     modifier = Modifier.padding(top = 8.dp)
2569.                 )
2570. 
2571.                 Spacer(modifier = Modifier.height(8.dp))
2572. 
2573.                 androidx.compose.material3.Button(
2574.                     onClick = { navHostController.navigate(Routes.LED_SETTINGS_SCREEN) },
2575.                     modifier = Modifier.fillMaxWidth()
2576.                 ) {
2577.                     Text(text = "Go to LED Settings")
2578.                 }
2579. 
2580.             }
2581.         }
2582.     }
2583. }


LEDScreen.kt

2584. package com.example.iot_ha.ui.screens.home.settings
2585. 
2586. import androidx.compose.foundation.layout.Column
2587. import androidx.compose.foundation.layout.Spacer
2588. import androidx.compose.foundation.layout.fillMaxSize
2589. import androidx.compose.foundation.layout.fillMaxWidth
2590. import androidx.compose.foundation.layout.height
2591. import androidx.compose.foundation.layout.padding
2592. import androidx.compose.foundation.rememberScrollState
2593. import androidx.compose.foundation.verticalScroll
2594. import androidx.compose.material3.*
2595. import androidx.compose.runtime.*
2596. import androidx.compose.ui.Alignment
2597. import androidx.compose.ui.Modifier
2598. import androidx.compose.ui.graphics.Color
2599. import androidx.compose.ui.unit.dp
2600. import androidx.lifecycle.viewmodel.compose.viewModel
2601. import com.example.iot_ha.data.local.led.LEDState
2602. import com.example.iot_ha.ui.components.settings.led.BrigtnessCard
2603. import com.example.iot_ha.ui.components.settings.led.ColorsCard
2604. import com.example.iot_ha.ui.viewmodels.LEDScreenViewModel
2605. import com.example.iot_ha.ui.viewmodels.factory.LEDScreenViewModelFactory
2606. 
2607. @OptIn(ExperimentalMaterial3Api::class)
2608. @Composable
2609. fun LEDScreen() {
2610.     val brightness by LEDState.brightness.collectAsState()
2611.     val red by LEDState.red.collectAsState()
2612.     val green by LEDState.green.collectAsState()
2613.     val blue by LEDState.blue.collectAsState()
2614. 
2615.     val ledScreenViewModel: LEDScreenViewModel = viewModel(factory = LEDScreenViewModelFactory())
2616. 
2617.     var selectedMode by remember { mutableStateOf("AUTO") }
2618.     var expanded by remember { mutableStateOf(false) }
2619. 
2620.     Column(
2621.         modifier = Modifier
2622.             .fillMaxSize()
2623.             .padding(16.dp)
2624.             .verticalScroll(rememberScrollState()),
2625.         horizontalAlignment = Alignment.CenterHorizontally
2626.     ) {
2627.         Text(text = "Edit LED Settings", style = MaterialTheme.typography.headlineSmall)
2628. 
2629.         Spacer(modifier = Modifier.height(16.dp))
2630. 
2631.         ExposedDropdownMenuBox(
2632.             expanded = expanded,
2633.             onExpandedChange = { expanded = !expanded }
2634.         ) {
2635.             OutlinedTextField(
2636.                 value = selectedMode,
2637.                 onValueChange = {},
2638.                 readOnly = true,
2639.                 modifier = Modifier
2640.                     .fillMaxWidth()
2641.                     .menuAnchor(),
2642.                 trailingIcon = {
2643.                     ExposedDropdownMenuDefaults.TrailingIcon(expanded = expanded)
2644.                 }
2645.             )
2646. 
2647.             ExposedDropdownMenu(
2648.                 expanded = expanded,
2649.                 onDismissRequest = { expanded = false }
2650.             ) {
2651.                 DropdownMenuItem(
2652.                     text = { Text("AUTO") },
2653.                     onClick = {
2654.                         ledScreenViewModel.setAUTOMode()
2655.                         selectedMode = "AUTO"
2656.                         expanded = false
2657.                     }
2658.                 )
2659.                 DropdownMenuItem(
2660.                     text = { Text("MANUAL") },
2661.                     onClick = {
2662.                         selectedMode = "MANUAL"
2663.                         expanded = false
2664.                     }
2665.                 )
2666.             }
2667.         }
2668. 
2669.         Spacer(modifier = Modifier.height(16.dp))
2670. 
2671.         if (selectedMode == "MANUAL") {
2672.             BrigtnessCard(
2673.                 title = "Brightness",
2674.                 color = Color(brightness / 255f, brightness / 255f, brightness / 255f),
2675.                 value = brightness,
2676.                 onValueChange = { LEDState.setBrightness(it) },
2677.                 onValueChangeFinished = { ledScreenViewModel.sendLEDStatus() }
2678.             )
2679. 
2680.             Spacer(modifier = Modifier.height(16.dp))
2681. 
2682.             ColorsCard(
2683.                 red = red,
2684.                 green = green,
2685.                 blue = blue,
2686.                 onRedChange = { LEDState.setRed(it) },
2687.                 onGreenChange = { LEDState.setGreen(it) },
2688.                 onBlueChange = { LEDState.setBlue(it) },
2689.                 onValueChangeFinished = { ledScreenViewModel.sendLEDStatus() }
2690.             )
2691.         } else {
2692.             Text(text = "LED settings are in AUTO mode. No adjustments available.", style = MaterialTheme.typography.bodyMedium)
2693.         }
2694.     }
2695. }


Color.kt

2696. package com.example.iot_ha.ui.theme
2697. 
2698. import androidx.compose.ui.graphics.Color
2699. 
2700. val Purple80 = Color(0xFFD0BCFF)
2701. val PurpleGrey80 = Color(0xFFCCC2DC)
2702. val Pink80 = Color(0xFFEFB8C8)
2703. 
2704. val Purple40 = Color(0xFF6650a4)
2705. val PurpleGrey40 = Color(0xFF625b71)
2706. val Pink40 = Color(0xFF7D5260)

Theme.kt

2707. package com.example.iot_ha.ui.theme
2708. 
2709. import android.os.Build
2710. import androidx.compose.foundation.isSystemInDarkTheme
2711. import androidx.compose.material3.MaterialTheme
2712. import androidx.compose.material3.darkColorScheme
2713. import androidx.compose.material3.dynamicDarkColorScheme
2714. import androidx.compose.material3.dynamicLightColorScheme
2715. import androidx.compose.material3.lightColorScheme
2716. import androidx.compose.runtime.Composable
2717. import androidx.compose.ui.platform.LocalContext
2718. 
2719. private val DarkColorScheme = darkColorScheme(
2720.     primary = Purple80,
2721.     secondary = PurpleGrey80,
2722.     tertiary = Pink80
2723. )
2724. 
2725. private val LightColorScheme = lightColorScheme(
2726.     primary = Purple40,
2727.     secondary = PurpleGrey40,
2728.     tertiary = Pink40
2729. 
2730.     /* Other default colors to override
2731.     background = Color(0xFFFFFBFE),
2732.     surface = Color(0xFFFFFBFE),
2733.     onPrimary = Color.White,
2734.     onSecondary = Color.White,
2735.     onTertiary = Color.White,
2736.     onBackground = Color(0xFF1C1B1F),
2737.     onSurface = Color(0xFF1C1B1F),
2738.     */
2739. )
2740. 
2741. @Composable
2742. fun IothaTheme(
2743.     darkTheme: Boolean = isSystemInDarkTheme(),
2744.     // Dynamic color is available on Android 12+
2745.     dynamicColor: Boolean = true,
2746.     content: @Composable () -> Unit
2747. ) {
2748.     val colorScheme = when {
2749.         dynamicColor && Build.VERSION.SDK_INT >= Build.VERSION_CODES.S -> {
2750.             val context = LocalContext.current
2751.             if (darkTheme) dynamicDarkColorScheme(context) else dynamicLightColorScheme(context)
2752.         }
2753. 
2754.         darkTheme -> DarkColorScheme
2755.         else -> LightColorScheme
2756.     }
2757. 
2758.     MaterialTheme(
2759.         colorScheme = colorScheme,
2760.         typography = Typography,
2761.         content = content
2762.     )
2763. }

Type.kt

2764. package com.example.iot_ha.ui.theme
2765. 
2766. import androidx.compose.material3.Typography
2767. import androidx.compose.ui.text.TextStyle
2768. import androidx.compose.ui.text.font.FontFamily
2769. import androidx.compose.ui.text.font.FontWeight
2770. import androidx.compose.ui.unit.sp
2771. 
2772. // Set of Material typography styles to start with
2773. val Typography = Typography(
2774.     bodyLarge = TextStyle(
2775.         fontFamily = FontFamily.Default,
2776.         fontWeight = FontWeight.Normal,
2777.         fontSize = 16.sp,
2778.         lineHeight = 24.sp,
2779.         letterSpacing = 0.5.sp
2780.     )
2781.     /* Other default text styles to override
2782.     titleLarge = TextStyle(
2783.         fontFamily = FontFamily.Default,
2784.         fontWeight = FontWeight.Normal,
2785.         fontSize = 22.sp,
2786.         lineHeight = 28.sp,
2787.         letterSpacing = 0.sp
2788.     ),
2789.     labelSmall = TextStyle(
2790.         fontFamily = FontFamily.Default,
2791.         fontWeight = FontWeight.Medium,
2792.         fontSize = 11.sp,
2793.         lineHeight = 16.sp,
2794.         letterSpacing = 0.5.sp
2795.     )
2796.     */
2797. )

AuthorizationViewModel.kt

2798. package com.example.iot_ha.ui.viewmodels
2799. 
2800. import androidx.compose.runtime.State
2801. import androidx.compose.runtime.mutableStateOf
2802. import androidx.lifecycle.ViewModel
2803. import androidx.lifecycle.viewModelScope
2804. import com.example.iot_ha.data.local.RoomLocalDatabase
2805. import com.example.iot_ha.data.local.broker.Broker
2806. import com.example.iot_ha.data.local.broker.BrokerState
2807. import com.example.iot_ha.data.mqtt.MQTTClient
2808. import com.example.iot_ha.data.mqtt.domain.MQTTMessageHandler
2809. import com.example.iot_ha.data.mqtt.util.Topics
2810. import kotlinx.coroutines.Dispatchers
2811. import kotlinx.coroutines.delay
2812. import kotlinx.coroutines.launch
2813. 
2814. class AuthorizationViewModel(
2815.     private val db: RoomLocalDatabase,
2816.     private val messageHandler: MQTTMessageHandler
2817. ) : ViewModel() {
2818. 
2819.     private val brokerDao = db.brokerDAO()
2820. 
2821.     private var _brokers = mutableStateOf<List<Broker>>(emptyList())
2822.     val brokers: State<List<Broker>> = _brokers
2823. 
2824.     init {
2825.         loadBrokers()
2826.     }
2827. 
2828.     private fun loadBrokers() {
2829.         viewModelScope.launch {
2830.             _brokers.value = brokerDao.getAllBrokers()
2831.         }
2832.     }
2833. 
2834.     fun addBroker(serverUri: String, serverPort: Int, user: String?, password: String?) {
2835.         if (serverUri.isBlank()) return
2836.         if (serverPort !in 1..65535) return
2837. 
2838.         viewModelScope.launch {
2839.             val broker = Broker(
2840.                 serverUri = serverUri,
2841.                 serverPort = serverPort,
2842.                 user = user,
2843.                 password = password
2844.             )
2845.             brokerDao.insert(broker)
2846.             loadBrokers()
2847.         }
2848.     }
2849. 
2850. 
2851.     fun deleteBroker(broker: Broker) {
2852.         viewModelScope.launch {
2853.             MQTTClient.getInstance().disconnect()
2854.             brokerDao.deleteBroker(broker)
2855.             loadBrokers()
2856.         }
2857.     }
2858. 
2859.     fun handleLogin(broker: Broker, onSuccess: () -> Unit) {
2860.         BrokerState.setBrokerId(broker.id)
2861. 
2862.         val mqttClient = MQTTClient.reinitialize(broker, messageHandler)
2863.         val isSuccess = mqttClient.connect()
2864.         if (isSuccess) {
2865.             onSuccess()
2866. 
2867.             viewModelScope.launch(Dispatchers.IO) {
2868.                 mqttClient.subscribe(Topics.SUBSCRIBE_DEVICE_LIST_TOPIC)
2869.                 delay(500)
2870.                 mqttClient.subscribe(Topics.SUBSCRIBE_DEVICE_COMMANDS_TOPIC)
2871.                 mqttClient.subscribe(Topics.SUBSCRIBE_DEVICE_STATE_TOPIC)
2872. 
2873.                 mqttClient.subscribe(Topics.SUBSCRIBE_LED_STATE_TOPIC)
2874.             }
2875.         }
2876.     }
2877. }


HomeViewModel.kt

2878. package com.example.iot_ha.ui.viewmodels
2879. 
2880. import androidx.lifecycle.ViewModel
2881. import com.example.iot_ha.data.local.RoomLocalDatabase
2882. 
2883. 
2884. class HomeViewModel(db: RoomLocalDatabase) : ViewModel()

LEDScreenViewModel.kt

2885. package com.example.iot_ha.ui.viewmodels
2886. 
2887. import androidx.lifecycle.ViewModel
2888. import androidx.lifecycle.viewModelScope
2889. import com.example.iot_ha.data.local.led.LEDState
2890. import com.example.iot_ha.data.local.led.LEDStatus
2891. import com.example.iot_ha.data.mqtt.MQTTClient
2892. import com.example.iot_ha.data.mqtt.util.Topics
2893. import kotlinx.coroutines.flow.first
2894. import kotlinx.coroutines.launch
2895. 
2896. class LEDScreenViewModel : ViewModel() {
2897. 
2898.     // Отправить статус LED
2899.     fun sendLEDStatus() {
2900.         viewModelScope.launch {
2901.             val brightness = LEDState.brightness.first().toInt()
2902.             val red = LEDState.red.first().toInt()
2903.             val green = LEDState.green.first().toInt()
2904.             val blue = LEDState.blue.first().toInt()
2905. 
2906.             val ledStatus = LEDStatus(
2907.                 brightness = brightness,
2908.                 red = red,
2909.                 green = green,
2910.                 blue = blue
2911.             )
2912. 
2913.             MQTTClient.publish(Topics.LED_SET_STATE_TOPIC, ledStatus.toJson())
2914.         }
2915.     }
2916. 
2917.     fun setAUTOMode() {
2918.         viewModelScope.launch {
2919.             // Статус AUTO
2920.             val ledAutoStatus = """
2921.                 {
2922.                   "state": "OFF",
2923.                   "brightness": 255,
2924.                   "color": {
2925.                     "r": 255,
2926.                     "g": 255,
2927.                     "b": 255
2928.                   },
2929.                   "color_mode": "rgb",
2930.                   "mode": "auto"
2931.                 }
2932.             """.trimIndent()
2933. 
2934.             MQTTClient.publish(Topics.LED_SET_STATE_TOPIC, ledAutoStatus)
2935.         }
2936.     }
2937. }


AuthorizationViewModelFactory.kt

2938. package com.example.iot_ha.ui.viewmodels.factory
2939. 
2940. import androidx.lifecycle.ViewModel
2941. import androidx.lifecycle.ViewModelProvider
2942. import com.example.iot_ha.data.local.RoomLocalDatabase
2943. import com.example.iot_ha.data.mqtt.domain.MQTTMessageHandler
2944. import com.example.iot_ha.ui.viewmodels.AuthorizationViewModel
2945. 
2946. class AuthorizationViewModelFactory(
2947.     private val db: RoomLocalDatabase,
2948.     private val messageHandler: MQTTMessageHandler,
2949. ) : ViewModelProvider.Factory {
2950. 
2951.     @Suppress("UNCHECKED_CAST")
2952.     override fun <T : ViewModel> create(modelClass: Class<T>): T {
2953.         if (modelClass.isAssignableFrom(AuthorizationViewModel::class.java)) {
2954.             return AuthorizationViewModel(db, messageHandler) as T
2955.         }
2956.         throw IllegalArgumentException("Unknown ViewModel class")
2957.     }
2958. }

DevicesViewModelFactory.kt

2959. package com.example.iot_ha.ui.viewmodels.factory
2960. 
2961. import androidx.lifecycle.ViewModel
2962. import androidx.lifecycle.ViewModelProvider
2963. import com.example.iot_ha.data.local.RoomLocalDatabase
2964. import com.example.iot_ha.ui.viewmodels.shared.DevicesViewModel
2965. 
2966. class DevicesViewModelFactory(private val db: RoomLocalDatabase) : ViewModelProvider.Factory {
2967.     override fun <T : ViewModel> create(modelClass: Class<T>): T {
2968.         if (modelClass.isAssignableFrom(DevicesViewModel::class.java)) {
2969.             @Suppress("UNCHECKED_CAST")
2970.             return DevicesViewModel(db) as T
2971.         }
2972.         throw IllegalArgumentException("Unknown ViewModel class")
2973.     }
2974. }

HomeViewModelFactory.kt

2975. package com.example.iot_ha.ui.viewmodels.factory
2976. 
2977. import androidx.lifecycle.ViewModel
2978. import androidx.lifecycle.ViewModelProvider
2979. import com.example.iot_ha.data.local.RoomLocalDatabase
2980. import com.example.iot_ha.ui.viewmodels.HomeViewModel
2981. 
2982. class HomeViewModelFactory(private val db: RoomLocalDatabase) : ViewModelProvider.Factory {
2983.     override fun <T : ViewModel> create(modelClass: Class<T>): T {
2984.         if (modelClass.isAssignableFrom(HomeViewModel::class.java)) {
2985.             @Suppress("UNCHECKED_CAST")
2986.             return HomeViewModel(db) as T
2987.         }
2988.         throw IllegalArgumentException("Unknown ViewModel class")
2989.     }
2990. }


LEDScreenViewModelFactory.kt

2991. package com.example.iot_ha.ui.viewmodels.factory
2992. 
2993. import androidx.lifecycle.ViewModel
2994. import androidx.lifecycle.ViewModelProvider
2995. import com.example.iot_ha.ui.viewmodels.LEDScreenViewModel
2996. 
2997. class LEDScreenViewModelFactory : ViewModelProvider.Factory {
2998.     override fun <T : ViewModel> create(modelClass: Class<T>): T {
2999.         if (modelClass.isAssignableFrom(LEDScreenViewModel::class.java)) {
3000.             @Suppress("UNCHECKED_CAST")
3001.             return LEDScreenViewModel() as T
3002.         }
3003.         throw IllegalArgumentException("Unknown ViewModel class")
3004.     }
3005. }

RoomsViewModelFactory.kt

3006. package com.example.iot_ha.ui.viewmodels.factory
3007. 
3008. import androidx.lifecycle.ViewModel
3009. import androidx.lifecycle.ViewModelProvider
3010. import com.example.iot_ha.data.local.RoomLocalDatabase
3011. import com.example.iot_ha.ui.viewmodels.shared.RoomsViewModel
3012. 
3013. class RoomsViewModelFactory(private val db: RoomLocalDatabase) : ViewModelProvider.Factory {
3014.     override fun <T : ViewModel> create(modelClass: Class<T>): T {
3015.         if (modelClass.isAssignableFrom(RoomsViewModel::class.java)) {
3016.             @Suppress("UNCHECKED_CAST")
3017.             return RoomsViewModel(db) as T
3018.         }
3019.         throw IllegalArgumentException("Unknown ViewModel class")
3020.     }
3021. }

SensorsViewModelFactory.kt

3022. package com.example.iot_ha.ui.viewmodels.factory
3023. 
3024. import androidx.lifecycle.ViewModel
3025. import androidx.lifecycle.ViewModelProvider
3026. import com.example.iot_ha.ui.viewmodels.shared.SensorsViewModel
3027. 
3028. class SensorsViewModelFactory : ViewModelProvider.Factory {
3029.     @Suppress("UNCHECKED_CAST")
3030.     override fun <T : ViewModel> create(modelClass: Class<T>): T {
3031.         if (modelClass.isAssignableFrom(SensorsViewModel::class.java)) {
3032.             return SensorsViewModel() as T
3033.         }
3034.         throw IllegalArgumentException("Unknown ViewModel class")
3035.     }
3036. }


DevicesViewModel.kt

3037. package com.example.iot_ha.ui.viewmodels.shared
3038. 
3039. import android.util.Log
3040. import androidx.lifecycle.ViewModel
3041. import androidx.lifecycle.viewModelScope
3042. import com.example.iot_ha.data.local.RoomLocalDatabase
3043. import com.example.iot_ha.data.local.broker.BrokerState
3044. import com.example.iot_ha.data.local.command.Command
3045. import com.example.iot_ha.data.local.device.Device
3046. import com.example.iot_ha.data.mqtt.MQTTClient
3047. import kotlinx.coroutines.delay
3048. import kotlinx.coroutines.flow.MutableStateFlow
3049. import kotlinx.coroutines.flow.StateFlow
3050. import kotlinx.coroutines.flow.collectLatest
3051. import kotlinx.coroutines.flow.update
3052. import kotlinx.coroutines.launch
3053. 
3054. open class DevicesViewModel(private val db: RoomLocalDatabase) : ViewModel() {
3055.     private val _devices = MutableStateFlow<List<Device>>(emptyList())
3056.     val devices: StateFlow<List<Device>> = _devices
3057. 
3058.     init {
3059.         viewModelScope.launch {
3060.             BrokerState.brokerId.collectLatest { brokerId ->
3061.                 if (brokerId != null) {
3062.                     loadDevices(brokerId)
3063.                 }
3064.             }
3065. 
3066.             while (true) {
3067.                 updateDevices()
3068.                 delay(3000)
3069.             }
3070.         }
3071.     }
3072. 
3073. 
3074.     private suspend fun loadDevices(brokerId: Int) {
3075.         db.deviceDAO().getDevicesByBrokerFlow(brokerId)
3076.             .collect { deviceList ->
3077.                 _devices.value = deviceList
3078.             }
3079.     }
3080. 
3081.     private suspend fun updateDevices() {
3082.         val devicesList = db.deviceDAO().getAllDevices()
3083.         _devices.value = devicesList
3084.     }
3085. 
3086. 
3087.     fun getDeviceIdByIeeeAddr(ieeeAddr: String, callback: (Int?) -> Unit) {
3088.         viewModelScope.launch {
3089.             val device = db.deviceDAO().getDeviceByIeeeAddr(ieeeAddr)
3090.             callback(device?.id)
3091.         }
3092.     }
3093. 
3094. 
3095.     fun getDevicesByTypeFlow(type: String): StateFlow<List<Device>> {
3096.         val resultFlow = MutableStateFlow<List<Device>>(emptyList())
3097. 
3098.         viewModelScope.launch {
3099.             db.commandDAO().getCommandsByTypeFlow(type).collect { commands ->
3100.                 val deviceIds = commands.map { it.deviceId }.toSet()
3101.                 val filteredDevices = _devices.value.filter { it.id in deviceIds }
3102.                 resultFlow.value = filteredDevices
3103.             }
3104.         }
3105. 
3106.         return resultFlow
3107.     }
3108. 
3109.     fun getDevicesWithoutCommandsFlow(): StateFlow<List<Device>> {
3110.         val resultFlow = MutableStateFlow<List<Device>>(emptyList())
3111. 
3112.         viewModelScope.launch {
3113.             db.deviceDAO().getAllDevicesFlow().collect { devices ->
3114.                 db.commandDAO().getAllCommandsFlow().collect { commands ->
3115.                     val deviceIdsWithCommands = commands.map { it.deviceId }.toSet()
3116.                     val devicesWithoutCommands = devices.filter { it.id !in deviceIdsWithCommands }
3117.                     resultFlow.value = devicesWithoutCommands
3118.                 }
3119.             }
3120.         }
3121. 
3122.         return resultFlow
3123.     }
3124. 
3125. 
3126.     fun getDevicesByRoomIdFlow(roomId: Int): StateFlow<List<Device>> {
3127.         val resultFlow = MutableStateFlow<List<Device>>(emptyList())
3128. 
3129.         viewModelScope.launch {
3130.             db.deviceDAO().getDevicesByRoomIdFlow(roomId).collect { devices ->
3131.                 val deviceIds = devices.map { it.id }.toSet()
3132.                 val filteredDevices = _devices.value.filter { it.id in deviceIds }
3133.                 resultFlow.value = filteredDevices
3134.             }
3135.         }
3136. 
3137.         return resultFlow
3138.     }
3139. 
3140.     fun addDeviceIfNotExists(device: Device) {
3141.         viewModelScope.launch {
3142.             val existingDevice = db.deviceDAO().getDeviceByIeeeAddr(device.ieeeAddr)
3143. 
3144.             Log.i("DEVLIST", devices.value.toString())
3145. 
3146.             if (existingDevice == null) {
3147.                 db.deviceDAO().insertDevice(device)
3148.                 Log.i("DevicesViewModel", "Device added: $device")
3149.             } else {
3150.                 Log.i("DevicesViewModel", "Device already exists: $device")
3151.             }
3152.         }
3153.     }
3154. 
3155.     fun updateDeviceName(deviceId: Int, newName: String) {
3156.         viewModelScope.launch {
3157.             val device = db.deviceDAO().getDeviceById(deviceId)
3158. 
3159.             val updatedDevice = device.copy(friendlyName = newName)
3160. 
3161.             db.deviceDAO().updateDevice(updatedDevice)
3162.             _devices.update { list ->
3163.                 list.map {
3164.                     if (it.id == deviceId) updatedDevice else it
3165.                 }
3166.             }
3167.         }
3168.     }
3169. 
3170. 
3171.     fun addCommandIfNotExists(command: Command) {
3172.         Log.i("addCommandIfNotExists", command.toString())
3173. 
3174.         viewModelScope.launch {
3175.             val existingCommand = db.commandDAO().getCommandByCommandTopic(command.commandTopic)
3176. 
3177.             if (existingCommand == null) {
3178.                 db.commandDAO().insertCommand(command)
3179.             } else {
3180.                 Log.i("DevicesViewModel", "Command already exists: $existingCommand")
3181.             }
3182.         }
3183.     }
3184. 
3185.     fun onToggle(deviceId: Int, state: Boolean) {
3186.         viewModelScope.launch {
3187.             val cmd = db.commandDAO().getSwitchCommandByDeviceId(deviceId)
3188. 
3189.             val newState = if (!state) cmd?.payloadOff else cmd?.payloadOn
3190.             cmd?.let {
3191.                 if (newState != null) {
3192.                     sendCommandToMqtt(it.commandTopic, newState)
3193.                 }
3194.             }
3195.         }
3196.     }
3197. 
3198.     fun onSelectChange(deviceId: Int, option: String) {
3199.         viewModelScope.launch {
3200.             sendCommandToMqtt("command", "")
3201.         }
3202.     }
3203. 
3204.     fun onValueChange(deviceId: Int, value: Int) {
3205.         viewModelScope.launch {
3206.             sendCommandToMqtt("command", "")
3207.         }
3208.     }
3209. 
3210.     private fun sendCommandToMqtt(topic: String, command: String) {
3211.         val mqttClient = MQTTClient.getInstance()
3212.         mqttClient.publish(topic, command)
3213.         println("Отправка в MQTT: $command")
3214.     }
3215. 
3216.     fun assignRoomToDevice(deviceId: Int, roomId: Long?) {
3217.         viewModelScope.launch {
3218.             val device = db.deviceDAO().getDeviceById(deviceId)
3219.             val updatedDevice = device.copy(roomId = roomId)
3220.             db.deviceDAO().updateDevice(updatedDevice)
3221.         }
3222.     }
3223. 
3224. }
3225. 


RoomsViewModel.kt

3226. package com.example.iot_ha.ui.viewmodels.shared
3227. 
3228. import androidx.lifecycle.ViewModel
3229. import androidx.lifecycle.viewModelScope
3230. import com.example.iot_ha.data.local.RoomLocalDatabase
3231. import com.example.iot_ha.data.local.room.RoomEntity
3232. import kotlinx.coroutines.flow.MutableStateFlow
3233. import kotlinx.coroutines.flow.StateFlow
3234. import kotlinx.coroutines.launch
3235. 
3236. class RoomsViewModel(private val db: RoomLocalDatabase) : ViewModel() {
3237.     private val _rooms = MutableStateFlow<List<RoomEntity>>(emptyList())
3238.     val rooms: StateFlow<List<RoomEntity>> = _rooms
3239. 
3240.     init {
3241.         viewModelScope.launch {
3242.             db.roomEntityDAO().getAllRooms().collect { _rooms.value = it }
3243.         }
3244.     }
3245. 
3246.     fun addRoom(name: String) {
3247.         viewModelScope.launch {
3248.             db.roomEntityDAO().insertRoom(RoomEntity(name = name))
3249.         }
3250.     }
3251. 
3252.     fun getDeviceCount(roomId: Long, onResult: (Int) -> Unit) {
3253.         viewModelScope.launch {
3254.             val count = db.deviceDAO().getDeviceCountForRoom(roomId)
3255.             onResult(count)
3256.         }
3257.     }
3258. 
3259.     fun deleteRoom(roomId: Int) {
3260.         viewModelScope.launch {
3261.             db.roomEntityDAO().deleteRoom(roomId)
3262.         }
3263.     }
3264. }


SensorsViewModel.kt

3265. package com.example.iot_ha.ui.viewmodels.shared
3266. 
3267. import androidx.lifecycle.ViewModel
3268. import com.example.iot_ha.ui.viewmodels.shared.data.SensorsData
3269. import kotlinx.coroutines.flow.MutableStateFlow
3270. import kotlinx.coroutines.flow.StateFlow
3271. 
3272. class SensorsViewModel : ViewModel() {
3273.     private val _sensorData = MutableStateFlow<Map<String, SensorsData>>(emptyMap())
3274.     val sensorData: StateFlow<Map<String, SensorsData>> = _sensorData
3275. 
3276.     fun updateSensorData(topic: String, payload: String) {
3277.         _sensorData.value += (topic to SensorsData(topic, payload))
3278.     }
3279. }

SensorsData.kt

3280. package com.example.iot_ha.ui.viewmodels.shared.data
3281. 
3282. data class SensorsData(
3283.     val topic: String,
3284.     val payload: String,
3285.     val timestamp: Long = System.currentTimeMillis()
3286. )


Constants.kt

3287. package com.example.iot_ha.utils
3288. 
3289. object Constants {
3290.     const val SWITCH_TYPE = "switch"
3291.     const val SELECT_TYPE = "select"
3292.     const val DIMMER_TYPE = "dimmer"
3293. 
3294.     val TABS_LIST = listOf("Devices", "Rooms", "Settings")
3295. 
3296.     const val DISCOVERY_ENABLE = "true"
3297.     const val DISCOVERY_DISABLE = "false"
3298.     const val DISCOVERY_TIME = 255_000L
3299. }

DeviceActionBuilder.kt

3300. class DeviceActionBuilder(private val deviceId: Int) {
3301.     fun buildOnToggle(): (Int, Boolean) -> Unit = { id, state ->
3302.         if (id == deviceId) {
3303.             println("[$deviceId] Toggle changed: $state")
3304.         }
3305.     }
3306. 
3307.     fun buildOnSliderChange(): (Int, Float) -> Unit = { id, value ->
3308.         if (id == deviceId) {
3309.             println("[$deviceId] Slider value: $value")
3310.         }
3311.     }
3312. 
3313.     fun buildOnSelectChange(): (Int, String) -> Unit = { id, option ->
3314.         if (id == deviceId) {
3315.             println("[$deviceId] Selected: $option")
3316.         }
3317.     }
3318. }


Extensions.kt

3319. package com.example.iot_ha.utils
3320. 
3321. fun String.toBooleanState(): Boolean = when (this) {
3322.     "ON", "true", "1" -> true
3323.     else -> false
3324. }

Logger.kt

3325. package com.example.iot_ha.utils.logging
3326. 
3327. import android.util.Log
3328. import kotlin.reflect.KClass
3329. 
3330. object Logger {
3331.     fun log(className: KClass<*>, message: String) {
3332.         Log.i(className.simpleName, message)
3333.     }
3334. 
3335.     fun log(tag: String, message: String) {
3336.         Log.i(tag, message)
3337.     }
3338. }


ExampleUnitTest.kt

3339. package com.example.iot_ha
3340. 
3341. import org.junit.Assert.assertEquals
3342. import org.junit.Test
3343. 
3344. /**
3345.  * Example local unit test, which will execute on the development machine (host).
3346.  *
3347.  * See [testing documentation](http://d.android.com/tools/testing).
3348.  */
3349. class ExampleUnitTest {
3350.     @Test
3351.     fun addition_isCorrect() {
3352.         assertEquals(4, 2 + 2)
3353.     }
3354. }

