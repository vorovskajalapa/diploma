ExampleInstrumentedTest.kt

0001. package com.example.iot_ha
0002. 
0003. import androidx.test.ext.junit.runners.AndroidJUnit4
0004. import androidx.test.platform.app.InstrumentationRegistry
0005. import org.junit.Assert.assertEquals
0006. import org.junit.Test
0007. import org.junit.runner.RunWith
0008. 
0009. /**
0010.  * Instrumented test, which will execute on an Android device.
0011.  *
0012.  * See [testing documentation](http://d.android.com/tools/testing).
0013.  */
0014. @RunWith(AndroidJUnit4::class)
0015. class ExampleInstrumentedTest {
0016.     @Test
0017.     fun useAppContext() {
0018.         // Context of the app under test.
0019.         val appContext = InstrumentationRegistry.getInstrumentation().targetContext
0020.         assertEquals("com.example.iot_ha", appContext.packageName)
0021.     }
0022. }

MainActivity.kt

0023. package com.example.iot_ha
0024. 
0025. import android.os.Bundle
0026. import androidx.activity.ComponentActivity
0027. import androidx.activity.compose.setContent
0028. import androidx.navigation.compose.rememberNavController
0029. import com.example.iot_ha.ui.navigation.AppNavHost
0030. 
0031. class MainActivity : ComponentActivity() {
0032.     override fun onCreate(savedInstanceState: Bundle?) {
0033.         super.onCreate(savedInstanceState)
0034. 
0035.         setContent {
0036.             val navController = rememberNavController()
0037.             AppNavHost(navController, "auth")
0038.         }
0039.     }
0040. }
0041. 


MapTypeConvertor.kt

0042. package com.example.iot_ha.data.local
0043. 
0044. import androidx.room.TypeConverter
0045. import com.google.gson.Gson
0046. import com.google.gson.reflect.TypeToken
0047. 
0048. class MapTypeConvertor {
0049.     private val gson = Gson()
0050. 
0051.     @TypeConverter
0052.     fun fromMap(map: Map<String, String>?): String? {
0053.         return gson.toJson(map)
0054.     }
0055. 
0056.     @TypeConverter
0057.     fun toMap(json: String?): Map<String, String>? {
0058.         return json?.let {
0059.             val type = object : TypeToken<Map<String, String>>() {}.type
0060.             gson.fromJson(it, type)
0061.         }
0062.     }
0063. }
0064. 


RoomLocalDatabase.kt

0065. package com.example.iot_ha.data.local
0066. 
0067. import android.content.Context
0068. import androidx.room.Database
0069. import androidx.room.Room
0070. import androidx.room.RoomDatabase
0071. import androidx.room.TypeConverters
0072. import com.example.iot_ha.data.local.broker.Broker
0073. import com.example.iot_ha.data.local.broker.BrokerDAO
0074. import com.example.iot_ha.data.local.command.Command
0075. import com.example.iot_ha.data.local.command.CommandDAO
0076. import com.example.iot_ha.data.local.device.Device
0077. import com.example.iot_ha.data.local.device.DeviceDAO
0078. import com.example.iot_ha.data.local.room.RoomEntity
0079. import com.example.iot_ha.data.local.room.RoomEntityDAO
0080. 
0081. @Database(
0082.     entities = [Broker::class, Device::class, Command::class, RoomEntity::class],
0083.     version = 1,
0084.     exportSchema = false
0085. )
0086. @TypeConverters(MapTypeConvertor::class)
0087. abstract class RoomLocalDatabase : RoomDatabase() {
0088.     abstract fun brokerDAO(): BrokerDAO
0089.     abstract fun deviceDAO(): DeviceDAO
0090.     abstract fun commandDAO(): CommandDAO
0091.     abstract fun roomEntityDAO(): RoomEntityDAO
0092. 
0093.     companion object {
0094.         @Volatile
0095.         private var INSTANCE: RoomLocalDatabase? = null
0096. 
0097.         fun getInstance(context: Context): RoomLocalDatabase {
0098.             return INSTANCE ?: synchronized(this) {
0099.                 val instance = Room.databaseBuilder(
0100.                     context.applicationContext,
0101.                     RoomLocalDatabase::class.java,
0102.                     "room_local_database"
0103.                 ).build()
0104.                 INSTANCE = instance
0105.                 instance
0106.             }
0107.         }
0108.     }
0109. }

Broker.kt

0110. package com.example.iot_ha.data.local.broker
0111. 
0112. import androidx.room.Entity
0113. import androidx.room.PrimaryKey
0114. 
0115. @Entity(tableName = "brokers")
0116. data class Broker(
0117.     @PrimaryKey(autoGenerate = true) val id: Int = 0,
0118.     val serverUri: String,
0119.     val serverPort: Int,
0120.     val user: String?,
0121.     val password: String?
0122. )
0123. 


BrokerDAO.kt

0124. package com.example.iot_ha.data.local.broker
0125. 
0126. import androidx.room.Dao
0127. import androidx.room.Delete
0128. import androidx.room.Insert
0129. import androidx.room.OnConflictStrategy
0130. import androidx.room.Query
0131. 
0132. @Dao
0133. interface BrokerDAO {
0134.     @Insert(onConflict = OnConflictStrategy.REPLACE)
0135.     suspend fun insert(broker: Broker)
0136. 
0137.     @Query("SELECT * FROM brokers")
0138.     suspend fun getAllBrokers(): List<Broker>
0139. 
0140.     @Query("SELECT * FROM brokers ORDER BY id DESC LIMIT 1")
0141.     suspend fun getLastBroker(): Broker?
0142. 
0143.     @Delete
0144.     suspend fun deleteBroker(broker: Broker)
0145. }

BrokerState.kt

0146. package com.example.iot_ha.data.local.broker
0147. 
0148. import kotlinx.coroutines.flow.MutableStateFlow
0149. import kotlinx.coroutines.flow.StateFlow
0150. 
0151. object BrokerState {
0152.     private val _brokerId = MutableStateFlow<Int?>(null)
0153.     val brokerId: StateFlow<Int?> = _brokerId
0154. 
0155.     fun setBrokerId(id: Int) {
0156.         _brokerId.value = id
0157.     }
0158. }


Command.kt

0159. package com.example.iot_ha.data.local.command
0160. 
0161. import androidx.room.Entity
0162. import androidx.room.ForeignKey
0163. import androidx.room.PrimaryKey
0164. import androidx.room.TypeConverters
0165. import com.example.iot_ha.data.local.MapTypeConvertor
0166. import com.example.iot_ha.data.local.device.Device
0167. 
0168. @Entity(
0169.     tableName = "commands",
0170.     foreignKeys = [ForeignKey(
0171.         entity = Device::class,
0172.         parentColumns = ["id"],
0173.         childColumns = ["deviceId"],
0174.         onDelete = ForeignKey.CASCADE
0175.     )]
0176. )
0177. data class Command(
0178.     @PrimaryKey(autoGenerate = true) val id: Int = 0,
0179.     val deviceId: Int,
0180. 
0181.     val commandTopic: String,
0182. 
0183.     // for switch commands
0184.     val payloadOn: String?,
0185.     val payloadOff: String?,
0186. 
0187.     // for select commands
0188.     @TypeConverters(MapTypeConvertor::class) val options: Map<String, String>?,
0189.     val commandTemplate: String?,
0190. 
0191. 
0192.     val commandType: String,
0193. )


CommandDAO.kt

0194. package com.example.iot_ha.data.local.command
0195. 
0196. import androidx.room.Dao
0197. import androidx.room.Insert
0198. import androidx.room.OnConflictStrategy
0199. import androidx.room.Query
0200. import kotlinx.coroutines.flow.Flow
0201. 
0202. @Dao
0203. interface CommandDAO {
0204. 
0205.     @Query("SELECT * FROM commands WHERE commandTopic = :commandTopic LIMIT 1")
0206.     suspend fun getCommandByCommandTopic(commandTopic: String): Command?
0207. 
0208. 
0209.     @Query("SELECT * FROM commands WHERE deviceId = :deviceId AND commandType = 'switch' LIMIT 1")
0210.     suspend fun getSwitchCommandByDeviceId(deviceId: Int): Command?
0211. 
0212.     @Insert(onConflict = OnConflictStrategy.REPLACE)
0213.     suspend fun insertCommand(command: Command)
0214. 
0215.     @Query("SELECT * FROM commands WHERE commandType = :type")
0216.     fun getCommandsByTypeFlow(type: String): Flow<List<Command>>
0217. }

Device.kt

0218. package com.example.iot_ha.data.local.device
0219. 
0220. import androidx.room.Entity
0221. import androidx.room.ForeignKey
0222. import androidx.room.Index
0223. import androidx.room.PrimaryKey
0224. import com.example.iot_ha.data.local.broker.Broker
0225. import com.example.iot_ha.data.local.room.RoomEntity
0226. 
0227. @Entity(
0228.     tableName = "devices",
0229.     foreignKeys = [
0230.         ForeignKey(
0231.             entity = Broker::class,
0232.             parentColumns = ["id"],
0233.             childColumns = ["brokerId"],
0234.             onDelete = ForeignKey.CASCADE
0235.         ),
0236.         ForeignKey(
0237.             entity = RoomEntity::class,
0238.             parentColumns = ["id"],
0239.             childColumns = ["roomId"],
0240.             onDelete = ForeignKey.SET_NULL
0241.         )
0242.     ],
0243.     indices = [Index(value = ["roomId"])]
0244. )
0245. data class Device(
0246.     @PrimaryKey(autoGenerate = true) val id: Int = 0,
0247.     val ieeeAddr: String,
0248.     val friendlyName: String,
0249.     val modelId: String,
0250.     val topic: String,
0251.     val roomId: Long?,
0252.     val brokerId: Int
0253. ) {
0254.     companion object {
0255.         fun create(
0256.             ieeeAddr: String,
0257.             friendlyName: String,
0258.             modelId: String,
0259.             roomId: Long?,
0260.             brokerId: Int
0261.         ): Device {
0262.             val topic = "zigbee/0x$ieeeAddr"
0263.             return Device(
0264.                 ieeeAddr = "0x$ieeeAddr",
0265.                 friendlyName = friendlyName,
0266.                 modelId = modelId,
0267.                 topic = topic,
0268.                 roomId = roomId,
0269.                 brokerId = brokerId
0270.             )
0271.         }
0272.     }
0273. }


DeviceDAO.kt

0274. package com.example.iot_ha.data.local.device
0275. 
0276. import androidx.room.Dao
0277. import androidx.room.Insert
0278. import androidx.room.OnConflictStrategy
0279. import androidx.room.Query
0280. import androidx.room.Update
0281. import kotlinx.coroutines.flow.Flow
0282. 
0283. @Dao
0284. interface DeviceDAO {
0285.     @Query("SELECT * FROM devices WHERE brokerId = :brokerId")
0286.     suspend fun getDevicesByBroker(brokerId: Int): List<Device>
0287. 
0288.     @Query("SELECT * FROM devices WHERE brokerId = :brokerId")
0289.     fun getDevicesByBrokerFlow(brokerId: Int): Flow<List<Device>>
0290. 
0291.     @Query("SELECT * FROM devices")
0292.     suspend fun getAllDevices(): List<Device>
0293. 
0294.     @Query("SELECT * FROM devices WHERE ieeeAddr = :ieeeAddr LIMIT 1")
0295.     suspend fun getDeviceByIeeeAddr(ieeeAddr: String): Device?
0296. 
0297.     @Query("SELECT * FROM devices WHERE id = :deviceId LIMIT 1")
0298.     suspend fun getDeviceById(deviceId: Int): Device // ? был тут
0299. 
0300.     @Insert(onConflict = OnConflictStrategy.IGNORE)
0301.     suspend fun insertDevice(device: Device): Long
0302. 
0303.     @Query("SELECT * FROM devices WHERE roomId = :roomId")
0304.     fun getDevicesByRoomIdFlow(roomId: Int): Flow<List<Device>>
0305. 
0306.     @Update
0307.     suspend fun updateDevice(device: Device)
0308. 
0309.     @Query("SELECT COUNT(*) FROM devices WHERE roomId = :roomId")
0310.     suspend fun getDeviceCountForRoom(roomId: Long): Int
0311. }


DeviceState.kt

0312. package com.example.iot_ha.data.local.device
0313. 
0314. import kotlinx.coroutines.flow.MutableStateFlow
0315. import kotlinx.coroutines.flow.StateFlow
0316. import kotlinx.coroutines.flow.update
0317. 
0318. object DeviceState {
0319.     private val _devicesData = MutableStateFlow<Map<Int, Map<String, Any>>>(emptyMap())
0320.     val devicesData: StateFlow<Map<Int, Map<String, Any>>> = _devicesData
0321. 
0322.     fun updateDeviceData(deviceId: Int, payload: String) {
0323.         val parsedData: Map<String, Any> = parseJson(payload)
0324. 
0325.         _devicesData.update { currentData ->
0326.             currentData.toMutableMap().apply { this[deviceId] = parsedData }
0327.         }
0328.     }
0329. 
0330. 
0331.     private fun parseJson(json: String): Map<String, Any> {
0332.         return try {
0333.             val jsonObject = org.json.JSONObject(json)
0334.             jsonObject.keys().asSequence().associateWith { jsonObject.get(it) }
0335.         } catch (e: Exception) {
0336.             emptyMap()
0337.         }
0338.     }
0339. 
0340.     fun getDeviceValue(deviceId: Int, key: String): Any? {
0341.         return _devicesData.value[deviceId]?.get(key)
0342.     }
0343. }


RoomEntity.kt

0344. package com.example.iot_ha.data.local.room
0345. 
0346. import androidx.room.Entity
0347. import androidx.room.PrimaryKey
0348. 
0349. @Entity(tableName = "rooms")
0350. data class RoomEntity(
0351.     @PrimaryKey(autoGenerate = true) val id: Long = 0,
0352.     val name: String
0353. )


RoomEntityDAO.kt

0354. package com.example.iot_ha.data.local.room
0355. 
0356. import androidx.room.Dao
0357. import androidx.room.Insert
0358. import androidx.room.OnConflictStrategy
0359. import androidx.room.Query
0360. import kotlinx.coroutines.flow.Flow
0361. 
0362. @Dao
0363. interface RoomEntityDAO {
0364.     @Query("SELECT * FROM rooms")
0365.     fun getAllRooms(): Flow<List<RoomEntity>>
0366. 
0367.     @Insert(onConflict = OnConflictStrategy.REPLACE)
0368.     suspend fun insertRoom(room: RoomEntity)
0369. }


MQTTClient.kt

0370. package com.example.iot_ha.data.mqtt
0371. 
0372. import android.util.Log
0373. import com.example.iot_ha.data.local.broker.Broker
0374. import org.eclipse.paho.client.mqttv3.IMqttDeliveryToken
0375. import org.eclipse.paho.client.mqttv3.MqttCallback
0376. import org.eclipse.paho.client.mqttv3.MqttClient
0377. import org.eclipse.paho.client.mqttv3.MqttConnectOptions
0378. import org.eclipse.paho.client.mqttv3.MqttException
0379. import org.eclipse.paho.client.mqttv3.MqttMessage
0380. 
0381. object MQTTClient {
0382.     private var mqttClient: MqttClient? = null
0383.     private var broker: Broker? = null
0384.     private var messageHandler: MQTTMessageHandler? = null
0385. 
0386.     fun initialize(broker: Broker, handler: MQTTMessageHandler): MQTTClient {
0387.         this.broker = broker
0388.         this.messageHandler = handler
0389.         return this
0390.     }
0391. 
0392.     fun reinitialize(newBroker: Broker, handler: MQTTMessageHandler): MQTTClient {
0393.         disconnect()
0394.         broker = newBroker
0395.         messageHandler = handler
0396.         return this
0397.     }
0398. 
0399.     fun getInstance(): MQTTClient {
0400.         return this
0401.     }
0402. 
0403.     fun connect(): Boolean {
0404.         return try {
0405.             val clientId = MqttClient.generateClientId()
0406.             mqttClient =
0407.                 MqttClient("tcp://${broker?.serverUri}:${broker?.serverPort}", clientId, null)
0408. 
0409.             val options = MqttConnectOptions().apply {
0410.                 userName = broker?.user
0411.                 password = broker?.password?.toCharArray()
0412.                 isAutomaticReconnect = true
0413.                 isCleanSession = true
0414.             }
0415. 
0416.             mqttClient?.connect(options)
0417.             Log.i("MQTT", "✅ Подключение успешно!")
0418.             true
0419.         } catch (e: MqttException) {
0420.             Log.e("MQTT", "Ошибка подключения: ${e.reasonCode} - ${e.message}")
0421.             false
0422.         }
0423.     }
0424. 
0425.     fun subscribe(topic: String) {
0426.         try {
0427.             mqttClient?.setCallback(object : MqttCallback {
0428.                 override fun connectionLost(cause: Throwable?) {
0429.                     Log.e("MQTT", "Соединение потеряно: ${cause?.message}")
0430.                 }
0431. 
0432.                 override fun messageArrived(topic: String, message: MqttMessage) {
0433.                     val payload = message.toString()
0434.                     Log.i("MQTT", "📩 Получено сообщение: $message на топик: $topic")
0435. 
0436.                     messageHandler?.handleMessage(topic, payload)
0437.                 }
0438. 
0439.                 override fun deliveryComplete(token: IMqttDeliveryToken) {
0440.                     Log.i("MQTT", "Сообщение отправлено")
0441.                 }
0442.             })
0443. 
0444.             mqttClient?.subscribe(topic)
0445.             Log.i("MQTT", "📡 Подписался на $topic")
0446.         } catch (e: MqttException) {
0447.             Log.e("MQTT", "Ошибка подписки: ${e.reasonCode} - ${e.message}")
0448.         }
0449.     }
0450. 
0451.     fun publish(topic: String, payload: String, qos: Int = 1, retained: Boolean = false) {
0452.         try {
0453.             val message = MqttMessage(payload.toByteArray()).apply {
0454.                 this.qos = qos
0455.                 this.isRetained = retained
0456.             }
0457.             mqttClient?.publish(topic, message)
0458.             Log.i("MQTT", "📤 Отправлено сообщение: $payload в топик: $topic")
0459.         } catch (e: MqttException) {
0460.             Log.e("MQTT", "Ошибка отправки сообщения: ${e.reasonCode} - ${e.message}")
0461.         }
0462.     }
0463. 
0464.     fun disconnect() {
0465.         try {
0466.             mqttClient?.disconnect()
0467.             Log.i("MQTT", "🔌 Отключен от брокера")
0468.         } catch (e: MqttException) {
0469.             Log.e("MQTT", "Ошибка отключения: ${e.message}")
0470.         }
0471.     }
0472. }


MQTTMessageHandler.kt

0473. package com.example.iot_ha.data.mqtt
0474. 
0475. import android.util.Log
0476. import com.example.iot_ha.data.local.broker.BrokerState
0477. import com.example.iot_ha.data.local.command.Command
0478. import com.example.iot_ha.data.local.device.Device
0479. import com.example.iot_ha.data.local.device.DeviceState
0480. import com.example.iot_ha.ui.viewmodels.shared.DevicesViewModel
0481. import com.example.iot_ha.ui.viewmodels.shared.SensorsViewModel
0482. import org.json.JSONObject
0483. 
0484. class MQTTMessageHandler(
0485.     private val sensorsViewModel: SensorsViewModel,
0486.     private val devicesViewModel: DevicesViewModel,
0487. ) {
0488.     fun handleMessage(topic: String, payload: String) {
0489.         Log.i("MQTTHandler", "📩 Обрабатываем сообщение: $payload с топика: $topic")
0490. 
0491.         when {
0492.             topic.startsWith("zigbee/0x") -> handleDeviceStateMessage(topic, payload)
0493.             topic.startsWith("homeassistant/") -> handleDeviceCommandMessage(topic, payload)
0494.             topic.startsWith("devicelist") -> handleDeviceListMessage(payload)
0495.             else -> Log.i("MQTTHandler", "⚠ Необрабатываемый топик: $topic")
0496.         }
0497.     }
0498. 
0499.     private fun handleDeviceStateMessage(topic: String, payload: String) {
0500.         val ieeeAddr = extractIeeeAddrFromTopic(topic)
0501.         val deviceId = devicesViewModel.devices.value.find { it.ieeeAddr == ieeeAddr }?.id
0502. 
0503.         if (deviceId != null) {
0504.             DeviceState.updateDeviceData(deviceId, payload)
0505.             Log.i("KAKASHKI", "PRESS")
0506.             Log.i("STATE", DeviceState.devicesData.value.toString())
0507. //            when (val value = DeviceState.getDeviceValue(deviceId, "power")) {
0508. //                is String -> println("Значение - строка: $value")
0509. //                is Int -> println("Значение - число: $value")
0510. //                is Double -> println("Значение - дробное число: $value")
0511. //                is Boolean -> println("Значение - булево: $value")
0512. //                else -> println("Неизвестный тип: ${value?.javaClass}")
0513. //            }
0514. 
0515.         } else {
0516.             println("Устройство с IEEE Addr $ieeeAddr не найдено")
0517.         }
0518.     }
0519. 
0520. 
0521.     private fun handleDeviceCommandMessage(topic: String, payload: String) {
0522.         try {
0523.             val jsonObject = JSONObject(payload)
0524. 
0525.             val commandTopic =
0526.                 jsonObject.optString("command_topic").takeIf { it.isNotBlank() } ?: return
0527.             val payloadOn = jsonObject.optString("payload_on", null)
0528.             val payloadOff = jsonObject.optString("payload_off", null)
0529.             val commandTemplate = jsonObject.optString("command_template", null)
0530. 
0531.             val options = jsonObject.optJSONArray("options")?.let { array ->
0532.                 (0 until array.length()).associate { index ->
0533.                     array.getString(index) to array.getString(
0534.                         index
0535.                     )
0536.                 }
0537.             } ?: emptyMap()
0538. 
0539.             val commandType = extractCommandTypeFromTopic(topic)
0540.             val deviceIeeeAddr = extractIeeeAddrFromTopic(topic)
0541. 
0542.             if (deviceIeeeAddr != null && commandType != "unknown") {
0543.                 devicesViewModel.getDeviceIdByIeeeAddr(deviceIeeeAddr) { deviceId ->
0544.                     if (deviceId != null) {
0545.                         val command = Command(
0546.                             deviceId = deviceId,
0547.                             commandTopic = commandTopic,
0548.                             payloadOn = payloadOn,
0549.                             payloadOff = payloadOff,
0550.                             options = options,
0551.                             commandTemplate = commandTemplate,
0552.                             commandType = commandType
0553.                         )
0554. 
0555.                         devicesViewModel.addCommandIfNotExists(command)
0556.                         Log.i("MQTTHandler", "📥 Команда сохранена: $command")
0557.                     } else {
0558.                         Log.e("DeviceId", "Device not found for IEEE Address: $deviceIeeeAddr")
0559.                     }
0560.                 }
0561.             }
0562.         } catch (e: Exception) {
0563.             Log.e("MQTTHandler", "Ошибка обработки команды: ${e.message}")
0564.         }
0565.     }
0566. 
0567.     private fun extractCommandTypeFromTopic(topic: String): String {
0568.         return when {
0569.             topic.contains("/switch/", ignoreCase = true) -> "switch"
0570. //            topic.contains("/select/", ignoreCase = true) -> "select"
0571. //            topic.contains("/light/", ignoreCase = true) -> "dimmer"
0572.             else -> "unknown"
0573.         }
0574.     }
0575. 
0576.     private fun extractIeeeAddrFromTopic(topic: String): String? {
0577.         val regex = Regex("0x[0-9A-Fa-f]+")
0578.         return regex.find(topic)?.value
0579.     }
0580. 
0581.     private fun handleDeviceListMessage(payload: String) {
0582.         try {
0583.             val jsonObject = JSONObject(payload)
0584. 
0585.             val key = jsonObject.keys().asSequence().firstOrNull() ?: "Нет данных"
0586.             val deviceJson = jsonObject.optJSONObject(key) ?: JSONObject()
0587. 
0588.             val ieeeAddr = deviceJson.optString("ieeeAddr")
0589.             val friendlyName = deviceJson.getString("friendly_name")
0590.             val modelId = deviceJson.optString("ModelId")
0591. 
0592.             val device = Device.create(
0593.                 ieeeAddr = ieeeAddr,
0594.                 friendlyName = friendlyName,
0595.                 modelId = modelId,
0596.                 roomId = null,
0597.                 brokerId = BrokerState.brokerId.value ?: -1
0598.             )
0599. 
0600.             Log.i("DEVICE", "📥 Получено устройство: $device")
0601. 
0602.             devicesViewModel.addDeviceIfNotExists(device)
0603. 
0604.         } catch (e: Exception) {
0605.             Log.e("DEVICE", "Ошибка обработки списка устройств: ${e.message}")
0606.         }
0607.     }
0608. }
0609. 


BrokerInputForm.kt

0610. package com.example.iot_ha.ui.components.broker
0611. 
0612. import androidx.compose.foundation.layout.Column
0613. import androidx.compose.foundation.layout.Spacer
0614. import androidx.compose.foundation.layout.fillMaxWidth
0615. import androidx.compose.foundation.layout.height
0616. import androidx.compose.foundation.shape.RoundedCornerShape
0617. import androidx.compose.material3.Button
0618. import androidx.compose.material3.ButtonDefaults
0619. import androidx.compose.material3.MaterialTheme
0620. import androidx.compose.material3.Text
0621. import androidx.compose.runtime.Composable
0622. import androidx.compose.ui.Modifier
0623. import androidx.compose.ui.graphics.Color
0624. import androidx.compose.ui.unit.dp
0625. import com.example.iot_ha.ui.components.common.CustomOutlinedTextField
0626. 
0627. @Composable
0628. fun BrokerInputForm(
0629.     serverUri: String,
0630.     serverPort: String,
0631.     user: String,
0632.     password: String,
0633.     onServerUriChange: (String) -> Unit,
0634.     onServerPortChange: (String) -> Unit,
0635.     onUserChange: (String) -> Unit,
0636.     onPasswordChange: (String) -> Unit,
0637.     onAddBroker: () -> Unit
0638. ) {
0639.     Column(modifier = Modifier.fillMaxWidth()) {
0640.         CustomOutlinedTextField(
0641.             value = serverUri,
0642.             label = "Server URI",
0643.             onValueChange = onServerUriChange
0644.         )
0645.         CustomOutlinedTextField(
0646.             value = serverPort,
0647.             label = "Server Port",
0648.             onValueChange = onServerPortChange
0649.         )
0650.         CustomOutlinedTextField(
0651.             value = user,
0652.             label = "User (optional)",
0653.             onValueChange = onUserChange
0654.         )
0655.         CustomOutlinedTextField(
0656.             value = password,
0657.             label = "Password (optional)",
0658.             onValueChange = onPasswordChange
0659.         )
0660. 
0661.         Spacer(modifier = Modifier.height(12.dp))
0662. 
0663.         Button(
0664.             onClick = onAddBroker,
0665.             modifier = Modifier.fillMaxWidth(),
0666.             shape = RoundedCornerShape(12.dp),
0667.             colors = ButtonDefaults.buttonColors(containerColor = MaterialTheme.colorScheme.primary)
0668.         ) {
0669.             Text("Add broker", color = Color.White)
0670.         }
0671.     }
0672. }


BrokerItem.kt

0673. package com.example.iot_ha.ui.components.broker
0674. 
0675. import androidx.compose.foundation.layout.Arrangement
0676. import androidx.compose.foundation.layout.Column
0677. import androidx.compose.foundation.layout.Row
0678. import androidx.compose.foundation.layout.Spacer
0679. import androidx.compose.foundation.layout.fillMaxWidth
0680. import androidx.compose.foundation.layout.height
0681. import androidx.compose.foundation.layout.padding
0682. import androidx.compose.foundation.layout.width
0683. import androidx.compose.foundation.shape.RoundedCornerShape
0684. import androidx.compose.material3.Button
0685. import androidx.compose.material3.ButtonDefaults
0686. import androidx.compose.material3.Card
0687. import androidx.compose.material3.CardDefaults
0688. import androidx.compose.material3.MaterialTheme
0689. import androidx.compose.material3.OutlinedButton
0690. import androidx.compose.material3.Text
0691. import androidx.compose.runtime.Composable
0692. import androidx.compose.ui.Modifier
0693. import androidx.compose.ui.draw.shadow
0694. import androidx.compose.ui.graphics.Color
0695. import androidx.compose.ui.unit.dp
0696. import com.example.iot_ha.data.local.broker.Broker
0697. 
0698. @Composable
0699. fun BrokerItem(broker: Broker, onDelete: () -> Unit, onLogin: () -> Unit) {
0700.     Card(
0701.         modifier = Modifier
0702.             .fillMaxWidth()
0703.             .padding(6.dp)
0704.             .shadow(4.dp, shape = RoundedCornerShape(12.dp)),
0705.         elevation = CardDefaults.elevatedCardElevation(8.dp)
0706.     ) {
0707.         Column(modifier = Modifier.padding(12.dp)) {
0708.             Text(text = "URI: ${broker.serverUri}", style = MaterialTheme.typography.bodyLarge)
0709.             Text(text = "Port: ${broker.serverPort}", style = MaterialTheme.typography.bodyMedium)
0710.             broker.user?.let {
0711.                 Text(
0712.                     text = "User: $it",
0713.                     style = MaterialTheme.typography.bodyMedium
0714.                 )
0715.             }
0716.             broker.password?.let {
0717.                 Text(
0718.                     text = "Password: ${"*".repeat(it.length)}",
0719.                     style = MaterialTheme.typography.bodyMedium
0720.                 )
0721.             }
0722. 
0723.             Spacer(modifier = Modifier.height(8.dp))
0724. 
0725.             Row(
0726.                 modifier = Modifier.fillMaxWidth(),
0727.                 horizontalArrangement = Arrangement.SpaceBetween
0728.             ) {
0729.                 Button(
0730.                     onClick = onLogin,
0731.                     modifier = Modifier.weight(1f),
0732.                     shape = RoundedCornerShape(12.dp),
0733.                     colors = ButtonDefaults.buttonColors(containerColor = MaterialTheme.colorScheme.primary)
0734.                 ) {
0735.                     Text("Login", color = Color.White)
0736.                 }
0737.                 Spacer(modifier = Modifier.width(6.dp))
0738.                 OutlinedButton(
0739.                     onClick = onDelete,
0740.                     modifier = Modifier.weight(1f),
0741.                     shape = RoundedCornerShape(12.dp),
0742.                     colors = ButtonDefaults.outlinedButtonColors(contentColor = MaterialTheme.colorScheme.error)
0743.                 ) {
0744.                     Text("Delete")
0745.                 }
0746.             }
0747.         }
0748.     }
0749. }


BrokerList.kt

0750. package com.example.iot_ha.ui.components.broker
0751. 
0752. 
0753. import androidx.compose.foundation.layout.Spacer
0754. import androidx.compose.foundation.layout.height
0755. import androidx.compose.material3.MaterialTheme
0756. import androidx.compose.material3.Text
0757. import androidx.compose.runtime.Composable
0758. import androidx.compose.ui.Modifier
0759. import androidx.compose.ui.unit.dp
0760. import com.example.iot_ha.data.local.broker.Broker
0761. 
0762. @Composable
0763. fun BrokerList(
0764.     brokers: List<Broker>,
0765.     onDelete: (Broker) -> Unit,
0766.     onLogin: (Broker) -> Unit
0767. ) {
0768.     brokers.lastOrNull()?.let { broker ->
0769.         Text("Recently used broker:", style = MaterialTheme.typography.labelMedium)
0770.         Spacer(modifier = Modifier.height(1.dp))
0771.         BrokerItem(
0772.             broker = broker,
0773.             onDelete = { onDelete(broker) },
0774.             onLogin = { onLogin(broker) }
0775.         )
0776.     }
0777. }

CustomOutlinedTextField.kt

0778. package com.example.iot_ha.ui.components.common
0779. 
0780. import androidx.compose.foundation.layout.Spacer
0781. import androidx.compose.foundation.layout.fillMaxWidth
0782. import androidx.compose.foundation.layout.height
0783. import androidx.compose.foundation.shape.RoundedCornerShape
0784. import androidx.compose.material3.OutlinedTextField
0785. import androidx.compose.material3.Text
0786. import androidx.compose.runtime.Composable
0787. import androidx.compose.ui.Modifier
0788. import androidx.compose.ui.unit.dp
0789. 
0790. @Composable
0791. fun CustomOutlinedTextField(
0792.     value: String,
0793.     label: String,
0794.     onValueChange: (String) -> Unit,
0795. ) {
0796.     OutlinedTextField(
0797.         value = value,
0798.         onValueChange = onValueChange,
0799.         label = { Text(label) },
0800.         shape = RoundedCornerShape(12.dp),
0801.         modifier = Modifier.fillMaxWidth()
0802.     )
0803.     Spacer(modifier = Modifier.height(8.dp))
0804. }


TabButton.kt

0805. package com.example.iot_ha.ui.components.common
0806. 
0807. import androidx.compose.foundation.BorderStroke
0808. import androidx.compose.foundation.clickable
0809. import androidx.compose.foundation.layout.Arrangement
0810. import androidx.compose.foundation.layout.Row
0811. import androidx.compose.foundation.layout.height
0812. import androidx.compose.foundation.layout.padding
0813. import androidx.compose.foundation.shape.RoundedCornerShape
0814. import androidx.compose.material3.MaterialTheme
0815. import androidx.compose.material3.Surface
0816. import androidx.compose.material3.Text
0817. import androidx.compose.runtime.Composable
0818. import androidx.compose.ui.Alignment
0819. import androidx.compose.ui.Modifier
0820. import androidx.compose.ui.draw.clip
0821. import androidx.compose.ui.graphics.Color
0822. import androidx.compose.ui.text.font.FontWeight
0823. import androidx.compose.ui.unit.dp
0824. 
0825. @Composable
0826. fun TabButton(title: String, isSelected: Boolean, onClick: () -> Unit) {
0827.     val borderColor = if (isSelected) MaterialTheme.colorScheme.primary else Color.Transparent
0828.     val textColor = Color.Black
0829.     Surface(
0830.         modifier = Modifier
0831.             .padding(horizontal = 4.dp, vertical = 4.dp)
0832.             .height(40.dp)
0833.             .clip(RoundedCornerShape(8.dp))
0834.             .clickable { onClick() },
0835.         color = if (isSelected) MaterialTheme.colorScheme.primary.copy(alpha = 0.1f) else Color.Transparent,
0836.         shape = RoundedCornerShape(8.dp),
0837.         border = BorderStroke(if (isSelected) 2.dp else 0.dp, borderColor)
0838.     ) {
0839.         Row(
0840.             modifier = Modifier.padding(horizontal = 20.dp, vertical = 8.dp),
0841.             verticalAlignment = Alignment.CenterVertically,
0842.             horizontalArrangement = Arrangement.Center
0843.         ) {
0844.             Text(
0845.                 text = title,
0846.                 color = textColor,
0847.                 style = MaterialTheme.typography.labelLarge,
0848.                 fontWeight = if (isSelected) FontWeight.Bold else FontWeight.Normal
0849.             )
0850.         }
0851.     }
0852. }

DeviceCard.kt

0853. package com.example.iot_ha.ui.components.devices
0854. 
0855. import androidx.compose.foundation.Image
0856. import androidx.compose.foundation.clickable
0857. import androidx.compose.foundation.layout.Column
0858. import androidx.compose.foundation.layout.Row
0859. import androidx.compose.foundation.layout.Spacer
0860. import androidx.compose.foundation.layout.fillMaxWidth
0861. import androidx.compose.foundation.layout.padding
0862. import androidx.compose.foundation.layout.size
0863. import androidx.compose.foundation.layout.width
0864. import androidx.compose.foundation.shape.RoundedCornerShape
0865. import androidx.compose.material3.Card
0866. import androidx.compose.material3.CardDefaults
0867. import androidx.compose.material3.DropdownMenuItem
0868. import androidx.compose.material3.ExperimentalMaterial3Api
0869. import androidx.compose.material3.ExposedDropdownMenuBox
0870. import androidx.compose.material3.ExposedDropdownMenuDefaults
0871. import androidx.compose.material3.Slider
0872. import androidx.compose.material3.SliderDefaults
0873. import androidx.compose.material3.Switch
0874. import androidx.compose.material3.SwitchDefaults
0875. import androidx.compose.material3.Text
0876. import androidx.compose.material3.TextField
0877. import androidx.compose.runtime.Composable
0878. import androidx.compose.runtime.getValue
0879. import androidx.compose.runtime.mutableFloatStateOf
0880. import androidx.compose.runtime.mutableStateOf
0881. import androidx.compose.runtime.remember
0882. import androidx.compose.runtime.setValue
0883. import androidx.compose.ui.Alignment
0884. import androidx.compose.ui.Modifier
0885. import androidx.compose.ui.draw.clip
0886. import androidx.compose.ui.graphics.Color
0887. import androidx.compose.ui.res.painterResource
0888. import androidx.compose.ui.text.font.FontWeight
0889. import androidx.compose.ui.unit.dp
0890. import androidx.compose.ui.unit.sp
0891. import androidx.navigation.NavHostController
0892. 
0893. @OptIn(ExperimentalMaterial3Api::class)
0894. @Composable
0895. fun DeviceCard(
0896.     deviceId: Int,
0897.     imageRes: Int,
0898.     name: String,
0899.     type: String,
0900.     value: Any,
0901.     navController: NavHostController,
0902.     onToggle: ((Boolean) -> Unit)? = null,
0903.     onSliderChange: ((Float) -> Unit)? = null,
0904.     onSelectChange: ((String) -> Unit)? = null,
0905.     options: List<String> = emptyList()
0906. ) {
0907.     var checked by remember { mutableStateOf(value as? Boolean ?: false) }
0908.     var sliderValue by remember { mutableFloatStateOf(value as? Float ?: 0f) }
0909.     var selectedOption by remember {
0910.         mutableStateOf(
0911.             value as? String ?: options.firstOrNull().orEmpty()
0912.         )
0913.     }
0914.     var expanded by remember { mutableStateOf(false) }
0915. 
0916.     Card(
0917.         shape = RoundedCornerShape(16.dp),
0918.         modifier = Modifier
0919.             .fillMaxWidth()
0920.             .padding(8.dp)
0921.             .clickable { navController.navigate("device_details/$deviceId") },
0922.         elevation = CardDefaults.cardElevation(6.dp)
0923.     ) {
0924.         Row(
0925.             verticalAlignment = Alignment.CenterVertically,
0926.             modifier = Modifier.padding(16.dp)
0927.         ) {
0928.             Image(
0929.                 painter = painterResource(id = imageRes),
0930.                 contentDescription = name,
0931.                 modifier = Modifier
0932.                     .size(64.dp)
0933.                     .clip(RoundedCornerShape(12.dp))
0934.             )
0935.             Spacer(modifier = Modifier.width(16.dp))
0936.             Column(modifier = Modifier.weight(1f)) {
0937.                 Text(
0938.                     text = name,
0939.                     fontSize = 20.sp,
0940.                     fontWeight = FontWeight.Bold,
0941.                     color = Color.Black
0942.                 )
0943.                 when (type) {
0944.                     "switch" -> {
0945.                         Switch(
0946.                             checked = checked,
0947.                             onCheckedChange = {
0948.                                 checked = it
0949.                                 onToggle?.invoke(it)
0950.                             },
0951.                             colors = SwitchDefaults.colors(
0952.                                 checkedThumbColor = Color.White,
0953.                                 checkedTrackColor = Color(0xFF4CAF50),
0954.                                 uncheckedThumbColor = Color.White,
0955.                                 uncheckedTrackColor = Color(0xFFF44336)
0956.                             )
0957.                         )
0958.                     }
0959. 
0960.                     "slider" -> {
0961.                         Slider(
0962.                             value = sliderValue,
0963.                             onValueChange = {
0964.                                 sliderValue = it
0965.                                 onSliderChange?.invoke(it)
0966.                             },
0967.                             valueRange = 0f..100f,
0968.                             colors = SliderDefaults.colors(
0969.                                 thumbColor = Color(0xFF8A9F9B),
0970.                                 activeTrackColor = Color(0xFFA6B6A9)
0971.                             )
0972.                         )
0973.                     }
0974. 
0975.                     "select" -> {
0976.                         ExposedDropdownMenuBox(
0977.                             expanded = expanded,
0978.                             onExpandedChange = { expanded = it }
0979.                         ) {
0980.                             TextField(
0981.                                 value = selectedOption,
0982.                                 onValueChange = {},
0983.                                 readOnly = true,
0984.                                 modifier = Modifier.menuAnchor(),
0985.                                 label = { Text("Выберите") },
0986.                                 trailingIcon = { ExposedDropdownMenuDefaults.TrailingIcon(expanded = expanded) }
0987.                             )
0988.                             ExposedDropdownMenu(
0989.                                 expanded = expanded,
0990.                                 onDismissRequest = { expanded = false }
0991.                             ) {
0992.                                 options.forEach { option ->
0993.                                     DropdownMenuItem(
0994.                                         text = { Text(option) },
0995.                                         onClick = {
0996.                                             selectedOption = option
0997.                                             expanded = false
0998.                                             onSelectChange?.invoke(option)
0999.                                         }
1000.                                     )
1001.                                 }
1002.                             }
1003.                         }
1004.                     }
1005. 
1006.                     else -> {
1007.                         Text(text = value.toString(), fontSize = 14.sp, color = Color.Black)
1008.                     }
1009.                 }
1010.             }
1011.         }
1012.     }
1013. }


DeviceDetails.kt

1014. package com.example.iot_ha.ui.components.devices
1015. 
1016. import androidx.compose.foundation.background
1017. import androidx.compose.foundation.layout.Arrangement
1018. import androidx.compose.foundation.layout.Box
1019. import androidx.compose.foundation.layout.Column
1020. import androidx.compose.foundation.layout.Row
1021. import androidx.compose.foundation.layout.fillMaxWidth
1022. import androidx.compose.foundation.layout.padding
1023. import androidx.compose.foundation.shape.RoundedCornerShape
1024. import androidx.compose.material3.MaterialTheme
1025. import androidx.compose.material3.Text
1026. import androidx.compose.runtime.Composable
1027. import androidx.compose.ui.Alignment
1028. import androidx.compose.ui.Modifier
1029. import androidx.compose.ui.draw.clip
1030. import androidx.compose.ui.unit.dp
1031. import androidx.compose.ui.unit.sp
1032. 
1033. @Composable
1034. fun DeviceDetails(deviceData: Map<String, Any>) {
1035.     Column(modifier = Modifier.fillMaxWidth()) {
1036.         deviceData.forEach { (key, value) ->
1037.             Box(
1038.                 modifier = Modifier
1039.                     .fillMaxWidth()
1040.                     .padding(vertical = 4.dp)
1041.                     .clip(RoundedCornerShape(12.dp))
1042.                     .background(MaterialTheme.colorScheme.surfaceVariant)
1043.                     .padding(12.dp)
1044.             ) {
1045.                 Row(
1046.                     modifier = Modifier.fillMaxWidth(),
1047.                     horizontalArrangement = Arrangement.SpaceBetween,
1048.                     verticalAlignment = Alignment.CenterVertically
1049.                 ) {
1050.                     Text(
1051.                         text = key.replaceFirstChar { if (it.isLowerCase()) it.titlecase() else it.toString() },
1052.                         style = MaterialTheme.typography.bodyLarge.copy(fontSize = 16.sp),
1053.                         color = MaterialTheme.colorScheme.onSurfaceVariant
1054.                     )
1055.                     Text(
1056.                         text = value.toString(),
1057.                         style = MaterialTheme.typography.bodyLarge.copy(fontSize = 16.sp),
1058.                         color = MaterialTheme.colorScheme.onSurfaceVariant
1059.                     )
1060.                 }
1061.             }
1062.         }
1063.     }
1064. }


DeviceNotFound.kt

1065. package com.example.iot_ha.ui.components.devices
1066. 
1067. import androidx.compose.foundation.layout.Box
1068. import androidx.compose.foundation.layout.fillMaxSize
1069. import androidx.compose.material3.MaterialTheme
1070. import androidx.compose.material3.Text
1071. import androidx.compose.runtime.Composable
1072. import androidx.compose.ui.Alignment
1073. import androidx.compose.ui.Modifier
1074. 
1075. @Composable
1076. fun DeviceNotFoundMessage() {
1077.     Box(
1078.         modifier = Modifier.fillMaxSize(),
1079.         contentAlignment = Alignment.Center
1080.     ) {
1081.         Text(
1082.             text = "Device not found",
1083.             style = MaterialTheme.typography.bodyLarge,
1084.             color = MaterialTheme.colorScheme.error
1085.         )
1086.     }
1087. }

DeviceTitle.kt

1088. package com.example.iot_ha.ui.components.devices
1089. 
1090. import androidx.compose.foundation.layout.padding
1091. import androidx.compose.foundation.layout.statusBarsPadding
1092. import androidx.compose.material3.MaterialTheme
1093. import androidx.compose.material3.Text
1094. import androidx.compose.runtime.Composable
1095. import androidx.compose.ui.Modifier
1096. import androidx.compose.ui.unit.dp
1097. 
1098. @Composable
1099. fun DeviceTitle(friendlyName: String) {
1100.     Text(
1101.         text = friendlyName,
1102.         style = MaterialTheme.typography.titleLarge,
1103.         color = MaterialTheme.colorScheme.primary,
1104.         modifier = Modifier
1105.             .statusBarsPadding()
1106.             .padding(vertical = 16.dp)
1107.     )
1108. }

AddRoomDialog.kt

1109. package com.example.iot_ha.ui.components.rooms
1110. 
1111. import androidx.compose.foundation.layout.Column
1112. import androidx.compose.material3.AlertDialog
1113. import androidx.compose.material3.Button
1114. import androidx.compose.material3.Text
1115. import androidx.compose.runtime.Composable
1116. import androidx.compose.runtime.getValue
1117. import androidx.compose.runtime.mutableStateOf
1118. import androidx.compose.runtime.remember
1119. import androidx.compose.runtime.setValue
1120. import com.example.iot_ha.ui.components.common.CustomOutlinedTextField
1121. 
1122. @Composable
1123. fun AddRoomDialog(
1124.     onDismiss: () -> Unit,
1125.     onConfirm: (String) -> Unit
1126. ) {
1127.     var roomName by remember { mutableStateOf("") }
1128. 
1129.     AlertDialog(
1130.         onDismissRequest = onDismiss,
1131.         confirmButton = {
1132.             Button(onClick = {
1133.                 if (roomName.isNotBlank()) {
1134.                     onConfirm(roomName)
1135.                     onDismiss()
1136.                 }
1137.             }) {
1138.                 Text("Добавить")
1139.             }
1140.         },
1141.         dismissButton = {
1142.             Button(onClick = onDismiss) {
1143.                 Text("Отмена")
1144.             }
1145.         },
1146.         title = { Text("Добавить комнату") },
1147.         text = {
1148.             Column {
1149.                 Text("Введите название комнаты:")
1150.                 CustomOutlinedTextField(
1151.                     value = roomName,
1152.                     label = "Название комнаты",
1153.                     onValueChange = { roomName = it }
1154.                 )
1155.             }
1156.         }
1157.     )
1158. }


RoomCard.kt

1159. package com.example.iot_ha.ui.components.rooms
1160. 
1161. import androidx.compose.foundation.Image
1162. import androidx.compose.foundation.background
1163. import androidx.compose.foundation.clickable
1164. import androidx.compose.foundation.layout.Box
1165. import androidx.compose.foundation.layout.Column
1166. import androidx.compose.foundation.layout.Row
1167. import androidx.compose.foundation.layout.Spacer
1168. import androidx.compose.foundation.layout.fillMaxWidth
1169. import androidx.compose.foundation.layout.padding
1170. import androidx.compose.foundation.layout.size
1171. import androidx.compose.foundation.layout.width
1172. import androidx.compose.foundation.shape.RoundedCornerShape
1173. import androidx.compose.material3.Card
1174. import androidx.compose.material3.CardDefaults
1175. import androidx.compose.material3.MaterialTheme
1176. import androidx.compose.material3.Text
1177. import androidx.compose.runtime.Composable
1178. import androidx.compose.ui.Alignment
1179. import androidx.compose.ui.Modifier
1180. import androidx.compose.ui.draw.clip
1181. import androidx.compose.ui.graphics.Color
1182. import androidx.compose.ui.res.painterResource
1183. import androidx.compose.ui.text.font.FontWeight
1184. import androidx.compose.ui.unit.dp
1185. import androidx.compose.ui.unit.sp
1186. import androidx.navigation.NavHostController
1187. import com.example.iot_ha.R
1188. 
1189. @Composable
1190. fun RoomCard(
1191.     roomId: Int,
1192.     roomName: String,
1193.     deviceCount: Int,
1194.     navHostController: NavHostController
1195. ) {
1196.     Card(
1197.         shape = RoundedCornerShape(16.dp),
1198.         modifier = Modifier
1199.             .fillMaxWidth()
1200.             .padding(8.dp)
1201.             .clickable { navHostController.navigate("room_details/$roomId") },
1202.         elevation = CardDefaults.cardElevation(6.dp),
1203.         colors = CardDefaults.cardColors(containerColor = Color(0xFFE3F2FD))
1204.     ) {
1205.         Row(
1206.             verticalAlignment = Alignment.CenterVertically,
1207.             modifier = Modifier.padding(16.dp)
1208.         ) {
1209.             Image(
1210.                 painter = painterResource(id = R.drawable.mqtt_logo),
1211.                 contentDescription = roomName,
1212.                 modifier = Modifier
1213.                     .size(64.dp)
1214.                     .clip(RoundedCornerShape(12.dp))
1215.             )
1216.             Spacer(modifier = Modifier.width(16.dp))
1217.             Column(modifier = Modifier.weight(1f)) {
1218.                 Text(
1219.                     text = roomName,
1220.                     fontSize = 20.sp,
1221.                     fontWeight = FontWeight.Bold,
1222.                     color = Color.Black
1223.                 )
1224.                 Text(
1225.                     text = "Комната №$roomId",
1226.                     fontSize = 14.sp,
1227.                     color = Color.Gray
1228.                 )
1229.             }
1230.             Spacer(modifier = Modifier.width(16.dp))
1231.             Box(
1232.                 contentAlignment = Alignment.Center,
1233.                 modifier = Modifier
1234.                     .size(32.dp)
1235.                     .clip(RoundedCornerShape(16.dp))
1236.                     .background(MaterialTheme.colorScheme.primary)
1237.             ) {
1238.                 Text(
1239.                     text = deviceCount.toString(),
1240.                     color = Color.White,
1241.                     fontSize = 14.sp,
1242.                     fontWeight = FontWeight.Bold
1243.                 )
1244.             }
1245.         }
1246.     }
1247. }
1248. 


AppNavHost.kt

1249. package com.example.iot_ha.ui.navigation
1250. 
1251. import androidx.compose.runtime.Composable
1252. import androidx.compose.ui.platform.LocalContext
1253. import androidx.lifecycle.viewmodel.compose.viewModel
1254. import androidx.navigation.NavHostController
1255. import androidx.navigation.compose.NavHost
1256. import androidx.navigation.compose.composable
1257. import com.example.iot_ha.data.local.RoomLocalDatabase
1258. import com.example.iot_ha.ui.screens.AuthorizationScreen
1259. import com.example.iot_ha.ui.screens.HomeScreen
1260. import com.example.iot_ha.ui.screens.home.DeviceDetailScreen
1261. import com.example.iot_ha.ui.screens.home.RoomDetailScreen
1262. import com.example.iot_ha.ui.viewmodels.factory.DevicesViewModelFactory
1263. import com.example.iot_ha.ui.viewmodels.factory.RoomsViewModelFactory
1264. import com.example.iot_ha.ui.viewmodels.factory.SensorsViewModelFactory
1265. import com.example.iot_ha.ui.viewmodels.shared.DevicesViewModel
1266. import com.example.iot_ha.ui.viewmodels.shared.RoomsViewModel
1267. import com.example.iot_ha.ui.viewmodels.shared.SensorsViewModel
1268. 
1269. @Composable
1270. fun AppNavHost(
1271.     navController: NavHostController,
1272.     startDestination: String
1273. ) {
1274.     val db = RoomLocalDatabase.getInstance(LocalContext.current)
1275. 
1276.     val sensorsViewModel: SensorsViewModel = viewModel(factory = SensorsViewModelFactory())
1277.     val devicesViewModel: DevicesViewModel = viewModel(factory = DevicesViewModelFactory(db))
1278.     val roomsViewModel: RoomsViewModel = viewModel(factory = RoomsViewModelFactory(db))
1279. 
1280.     NavHost(navController = navController, startDestination = startDestination) {
1281.         composable(Routes.AUTH_SCREEN) {
1282.             AuthorizationScreen(
1283.                 navHostController = navController,
1284.                 sensorsViewModel = sensorsViewModel,
1285.                 devicesViewModel = devicesViewModel
1286.             )
1287.         }
1288. 
1289.         composable(Routes.HOME_SCREEN) {
1290.             HomeScreen(
1291.                 navHostController = navController,
1292.                 devicesViewModel = devicesViewModel,
1293.                 roomsViewModel = roomsViewModel
1294.             )
1295.         }
1296. 
1297.         composable(Routes.DEVICE_DETAILS_SCREEN) { backStackEntry ->
1298.             DeviceDetailScreen(
1299.                 backStackEntry = backStackEntry,
1300.                 devicesViewModel = devicesViewModel,
1301.                 roomsViewModel = roomsViewModel
1302.             )
1303.         }
1304. 
1305.         composable(Routes.ROOM_DETAILS_SCREEN) { backStackEntry ->
1306.             RoomDetailScreen(
1307.                 backStackEntry = backStackEntry,
1308.                 navHostController = navController,
1309.                 devicesViewModel = devicesViewModel,
1310.                 roomsViewModel = roomsViewModel
1311.             )
1312.         }
1313.     }
1314. }
1315. 


Routes.kt

1316. package com.example.iot_ha.ui.navigation
1317. 
1318. object Routes {
1319.     const val AUTH_SCREEN = "auth"
1320.     const val HOME_SCREEN = "home"
1321. 
1322.     const val DEVICE_DETAILS_SCREEN = "device_details/{deviceId}"
1323.     const val ROOM_DETAILS_SCREEN = "room_details/{roomId}"
1324. }

AuthorizationScreen.kt

1325. package com.example.iot_ha.ui.screens
1326. 
1327. import androidx.compose.foundation.Image
1328. import androidx.compose.foundation.layout.Column
1329. import androidx.compose.foundation.layout.Spacer
1330. import androidx.compose.foundation.layout.aspectRatio
1331. import androidx.compose.foundation.layout.fillMaxSize
1332. import androidx.compose.foundation.layout.fillMaxWidth
1333. import androidx.compose.foundation.layout.height
1334. import androidx.compose.foundation.layout.padding
1335. import androidx.compose.foundation.shape.RoundedCornerShape
1336. import androidx.compose.runtime.Composable
1337. import androidx.compose.runtime.getValue
1338. import androidx.compose.runtime.mutableStateOf
1339. import androidx.compose.runtime.remember
1340. import androidx.compose.runtime.setValue
1341. import androidx.compose.ui.Alignment
1342. import androidx.compose.ui.Modifier
1343. import androidx.compose.ui.draw.clip
1344. import androidx.compose.ui.platform.LocalContext
1345. import androidx.compose.ui.res.painterResource
1346. import androidx.compose.ui.unit.dp
1347. import androidx.lifecycle.viewmodel.compose.viewModel
1348. import androidx.navigation.NavHostController
1349. import com.example.iot_ha.R
1350. import com.example.iot_ha.data.local.RoomLocalDatabase
1351. import com.example.iot_ha.data.local.broker.Broker
1352. import com.example.iot_ha.data.local.broker.BrokerState
1353. import com.example.iot_ha.data.mqtt.MQTTClient
1354. import com.example.iot_ha.data.mqtt.MQTTMessageHandler
1355. import com.example.iot_ha.ui.components.broker.BrokerInputForm
1356. import com.example.iot_ha.ui.components.broker.BrokerList
1357. import com.example.iot_ha.ui.viewmodels.AuthorizationViewModel
1358. import com.example.iot_ha.ui.viewmodels.factory.AuthorizationViewModelFactory
1359. import com.example.iot_ha.ui.viewmodels.shared.DevicesViewModel
1360. import com.example.iot_ha.ui.viewmodels.shared.SensorsViewModel
1361. import kotlinx.coroutines.CoroutineScope
1362. import kotlinx.coroutines.Dispatchers
1363. import kotlinx.coroutines.delay
1364. import kotlinx.coroutines.launch
1365. 
1366. @Composable
1367. fun AuthorizationScreen(
1368.     navHostController: NavHostController,
1369.     sensorsViewModel: SensorsViewModel,
1370.     devicesViewModel: DevicesViewModel
1371. ) {
1372.     var serverUri by remember { mutableStateOf("") }
1373.     var serverPort by remember { mutableStateOf("") }
1374.     var user by remember { mutableStateOf("") }
1375.     var password by remember { mutableStateOf("") }
1376. 
1377.     val db = RoomLocalDatabase.getInstance(LocalContext.current)
1378.     val authorizationViewModel: AuthorizationViewModel =
1379.         viewModel(factory = (AuthorizationViewModelFactory(db)))
1380. 
1381.     val brokers = authorizationViewModel.brokers.value
1382. 
1383.     val messageHandler = remember { MQTTMessageHandler(sensorsViewModel, devicesViewModel) }
1384. 
1385.     fun handleLogin(
1386.         broker: Broker,
1387.         messageHandler: MQTTMessageHandler,
1388.         navHostController: NavHostController
1389.     ) {
1390.         BrokerState.setBrokerId(broker.id)
1391. 
1392.         val mqttClient = MQTTClient.reinitialize(broker, messageHandler)
1393.         val isSuccess = mqttClient.connect()
1394.         if (isSuccess) {
1395.             navHostController.navigate("home")
1396. 
1397.             CoroutineScope(Dispatchers.IO).launch {
1398.                 mqttClient.subscribe("devicelist")
1399.                 delay(500) // todo: fix (если получится), хз не фикситься, не успевает обработать
1400.                 mqttClient.subscribe("homeassistant/#")
1401.                 mqttClient.subscribe("zigbee/#")
1402.             }
1403.         }
1404.     }
1405. 
1406.     fun handleDelete(broker: Broker, authorizationViewModel: AuthorizationViewModel) {
1407.         val mqttClient = MQTTClient.getInstance()
1408.         mqttClient.disconnect()
1409.         authorizationViewModel.deleteBroker(broker)
1410.     }
1411. 
1412.     fun handleAddBroker(
1413.         serverUri: String,
1414.         serverPort: String,
1415.         user: String,
1416.         password: String,
1417.         onClearFields: () -> Unit,
1418.         authorizationViewModel: AuthorizationViewModel
1419.     ) {
1420.         if (serverUri.isNotBlank() && serverPort.isNotBlank()) {
1421.             authorizationViewModel.addBroker(
1422.                 serverUri,
1423.                 serverPort.toIntOrNull() ?: 1883,
1424.                 user.takeIf { it.isNotBlank() },
1425.                 password.takeIf { it.isNotBlank() }
1426.             )
1427.             onClearFields()
1428.         }
1429.     }
1430. 
1431.     Column(
1432.         modifier = Modifier
1433.             .fillMaxSize()
1434.             .padding(horizontal = 16.dp),
1435.         horizontalAlignment = Alignment.CenterHorizontally
1436.     ) {
1437.         Spacer(modifier = Modifier.height(40.dp))
1438. 
1439.         Image(
1440.             painter = painterResource(id = R.drawable.mqtt_logo),
1441.             contentDescription = "Broker Logo",
1442.             modifier = Modifier
1443.                 .fillMaxWidth()
1444.                 .padding(horizontal = 16.dp)
1445.                 .aspectRatio(4f)
1446.                 .clip(RoundedCornerShape(12.dp)),
1447.         )
1448. 
1449.         Spacer(modifier = Modifier.height(50.dp))
1450. 
1451.         BrokerInputForm(
1452.             serverUri = serverUri,
1453.             serverPort = serverPort,
1454.             user = user,
1455.             password = password,
1456.             onServerUriChange = { serverUri = it },
1457.             onServerPortChange = { serverPort = it },
1458.             onUserChange = { user = it },
1459.             onPasswordChange = { password = it },
1460.             onAddBroker = {
1461.                 handleAddBroker(
1462.                     serverUri,
1463.                     serverPort,
1464.                     user,
1465.                     password,
1466.                     onClearFields = {
1467.                         serverUri = ""
1468.                         serverPort = ""
1469.                         user = ""
1470.                         password = ""
1471.                     },
1472.                     authorizationViewModel
1473.                 )
1474.             }
1475.         )
1476. 
1477.         Spacer(modifier = Modifier.height(16.dp))
1478. 
1479.         BrokerList(
1480.             brokers = brokers,
1481.             onDelete = { handleDelete(it, authorizationViewModel) },
1482.             onLogin = { handleLogin(it, messageHandler, navHostController) }
1483.         )
1484.     }
1485. }

HomeScreen.kt

1486. package com.example.iot_ha.ui.screens
1487. 
1488. import androidx.compose.animation.AnimatedContent
1489. import androidx.compose.animation.ExperimentalAnimationApi
1490. import androidx.compose.animation.fadeIn
1491. import androidx.compose.animation.fadeOut
1492. import androidx.compose.animation.slideInHorizontally
1493. import androidx.compose.animation.slideOutHorizontally
1494. import androidx.compose.animation.togetherWith
1495. import androidx.compose.foundation.background
1496. import androidx.compose.foundation.layout.Arrangement
1497. import androidx.compose.foundation.layout.Column
1498. import androidx.compose.foundation.layout.PaddingValues
1499. import androidx.compose.foundation.layout.Spacer
1500. import androidx.compose.foundation.layout.fillMaxSize
1501. import androidx.compose.foundation.layout.fillMaxWidth
1502. import androidx.compose.foundation.layout.height
1503. import androidx.compose.foundation.layout.padding
1504. import androidx.compose.foundation.layout.statusBarsPadding
1505. import androidx.compose.foundation.lazy.LazyRow
1506. import androidx.compose.foundation.lazy.itemsIndexed
1507. import androidx.compose.runtime.Composable
1508. import androidx.compose.runtime.getValue
1509. import androidx.compose.runtime.mutableIntStateOf
1510. import androidx.compose.runtime.remember
1511. import androidx.compose.runtime.setValue
1512. import androidx.compose.ui.Modifier
1513. import androidx.compose.ui.graphics.Color
1514. import androidx.compose.ui.unit.dp
1515. import androidx.navigation.NavHostController
1516. import com.example.iot_ha.ui.components.common.TabButton
1517. import com.example.iot_ha.ui.screens.home.DevicesScreen
1518. import com.example.iot_ha.ui.screens.home.RoomsScreen
1519. import com.example.iot_ha.ui.screens.home.SettingsScreen
1520. import com.example.iot_ha.ui.viewmodels.shared.DevicesViewModel
1521. import com.example.iot_ha.ui.viewmodels.shared.RoomsViewModel
1522. import com.example.iot_ha.utils.Constants
1523. 
1524. @OptIn(ExperimentalAnimationApi::class)
1525. @Composable
1526. fun HomeScreen(
1527.     navHostController: NavHostController,
1528.     devicesViewModel: DevicesViewModel,
1529.     roomsViewModel: RoomsViewModel
1530. ) {
1531.     var selectedTab by remember { mutableIntStateOf(0) }
1532.     var previousTab by remember { mutableIntStateOf(0) }
1533. 
1534.     Column(
1535.         modifier = Modifier
1536.             .fillMaxSize()
1537.             .statusBarsPadding()
1538.             .background(Color.White)
1539.     ) {
1540.         LazyRow(
1541.             modifier = Modifier
1542.                 .fillMaxWidth()
1543.                 .padding(vertical = 12.dp, horizontal = 8.dp),
1544.             contentPadding = PaddingValues(horizontal = 8.dp),
1545.             horizontalArrangement = Arrangement.spacedBy(8.dp)
1546.         ) {
1547.             itemsIndexed(Constants.TABS_LIST) { index, title ->
1548.                 TabButton(
1549.                     title = title,
1550.                     isSelected = selectedTab == index,
1551.                     onClick = {
1552.                         previousTab = selectedTab
1553.                         selectedTab = index
1554.                     }
1555.                 )
1556.             }
1557.         }
1558. 
1559.         Spacer(modifier = Modifier.height(8.dp))
1560. 
1561.         AnimatedContent(
1562.             targetState = selectedTab,
1563.             transitionSpec = {
1564.                 if (targetState > previousTab) {
1565.                     slideInHorizontally { width -> width } + fadeIn() togetherWith
1566.                             slideOutHorizontally { width -> -width } + fadeOut()
1567.                 } else {
1568.                     slideInHorizontally { width -> -width } + fadeIn() togetherWith
1569.                             slideOutHorizontally { width -> width } + fadeOut()
1570.                 }
1571.             },
1572.             label = "Tab Animation"
1573.         ) { tab ->
1574.             when (tab) {
1575.                 0 -> DevicesScreen(
1576.                     navHostController = navHostController,
1577.                     devicesViewModel = devicesViewModel
1578.                 )
1579. 
1580.                 1 -> RoomsScreen(
1581.                     navHostController = navHostController,
1582.                     roomsViewModel = roomsViewModel
1583.                 )
1584. 
1585.                 2 -> SettingsScreen()
1586.             }
1587.         }
1588.     }
1589. }
1590. 
1591. 


DeviceDetailScreen.kt

1592. package com.example.iot_ha.ui.screens.home
1593. 
1594. import androidx.compose.foundation.layout.Column
1595. import androidx.compose.foundation.layout.Spacer
1596. import androidx.compose.foundation.layout.fillMaxSize
1597. import androidx.compose.foundation.layout.fillMaxWidth
1598. import androidx.compose.foundation.layout.height
1599. import androidx.compose.foundation.layout.padding
1600. import androidx.compose.material3.DropdownMenuItem
1601. import androidx.compose.material3.ExperimentalMaterial3Api
1602. import androidx.compose.material3.ExposedDropdownMenuBox
1603. import androidx.compose.material3.ExposedDropdownMenuDefaults
1604. import androidx.compose.material3.MaterialTheme
1605. import androidx.compose.material3.OutlinedTextField
1606. import androidx.compose.material3.Surface
1607. import androidx.compose.material3.Text
1608. import androidx.compose.runtime.Composable
1609. import androidx.compose.runtime.collectAsState
1610. import androidx.compose.runtime.getValue
1611. import androidx.compose.runtime.mutableStateOf
1612. import androidx.compose.runtime.remember
1613. import androidx.compose.runtime.setValue
1614. import androidx.compose.ui.Alignment
1615. import androidx.compose.ui.Modifier
1616. import androidx.compose.ui.unit.dp
1617. import androidx.navigation.NavBackStackEntry
1618. import com.example.iot_ha.data.local.device.DeviceState
1619. import com.example.iot_ha.ui.components.devices.DeviceDetails
1620. import com.example.iot_ha.ui.components.devices.DeviceNotFoundMessage
1621. import com.example.iot_ha.ui.components.devices.DeviceTitle
1622. import com.example.iot_ha.ui.viewmodels.shared.DevicesViewModel
1623. import com.example.iot_ha.ui.viewmodels.shared.RoomsViewModel
1624. 
1625. @OptIn(ExperimentalMaterial3Api::class)
1626. @Composable
1627. fun DeviceDetailScreen(
1628.     backStackEntry: NavBackStackEntry,
1629.     devicesViewModel: DevicesViewModel,
1630.     roomsViewModel: RoomsViewModel
1631. ) {
1632.     val deviceId = backStackEntry.arguments?.getString("deviceId")?.toIntOrNull() ?: -1
1633. 
1634.     val devices by devicesViewModel.devices.collectAsState()
1635.     val deviceState by DeviceState.devicesData.collectAsState()
1636.     val deviceData = deviceState[deviceId]
1637. 
1638.     val rooms by roomsViewModel.rooms.collectAsState()
1639.     val device = devices.find { it.id == deviceId }
1640.     val currentRoom = rooms.find { it.id == device?.roomId }
1641.     var selectedRoom by remember { mutableStateOf(currentRoom?.name ?: "Select room") }
1642.     var expanded by remember { mutableStateOf(false) }
1643. 
1644.     Surface(
1645.         modifier = Modifier
1646.             .fillMaxSize()
1647.             .padding(16.dp),
1648.         color = MaterialTheme.colorScheme.background
1649.     ) {
1650.         Column(
1651.             modifier = Modifier.fillMaxSize(),
1652.             horizontalAlignment = Alignment.CenterHorizontally
1653.         ) {
1654.             DeviceTitle(
1655.                 friendlyName = device?.friendlyName?.uppercase() ?: "Unknown Device"
1656.             )
1657. 
1658.             Spacer(modifier = Modifier.height(8.dp))
1659. 
1660.             ExposedDropdownMenuBox(
1661.                 expanded = expanded,
1662.                 onExpandedChange = { expanded = !expanded }
1663.             ) {
1664.                 OutlinedTextField(
1665.                     value = selectedRoom,
1666.                     onValueChange = {},
1667.                     readOnly = true,
1668.                     modifier = Modifier
1669.                         .fillMaxWidth()
1670.                         .menuAnchor(),
1671.                     trailingIcon = {
1672.                         ExposedDropdownMenuDefaults.TrailingIcon(expanded = expanded)
1673.                     }
1674.                 )
1675.                 ExposedDropdownMenu(
1676.                     expanded = expanded,
1677.                     onDismissRequest = { expanded = false }
1678.                 ) {
1679.                     DropdownMenuItem(
1680.                         text = { Text("Select room") },
1681.                         onClick = {
1682.                             selectedRoom = "Select room"
1683.                             expanded = false
1684.                             devicesViewModel.assignRoomToDevice(deviceId, null)
1685.                         }
1686.                     )
1687.                     rooms.forEach { room ->
1688.                         DropdownMenuItem(
1689.                             text = { Text(room.name) },
1690.                             onClick = {
1691.                                 selectedRoom = room.name
1692.                                 expanded = false
1693.                                 devicesViewModel.assignRoomToDevice(deviceId, room.id)
1694.                             }
1695.                         )
1696.                     }
1697.                 }
1698.             }
1699. 
1700.             Spacer(modifier = Modifier.height(8.dp))
1701. 
1702.             if (deviceData != null) {
1703.                 DeviceDetails(deviceData)
1704.             } else {
1705.                 DeviceNotFoundMessage()
1706.             }
1707.         }
1708.     }
1709. }


DevicesScreen.kt

1710. package com.example.iot_ha.ui.screens.home
1711. 
1712. import androidx.compose.foundation.layout.Column
1713. import androidx.compose.foundation.layout.Spacer
1714. import androidx.compose.foundation.layout.fillMaxSize
1715. import androidx.compose.foundation.layout.height
1716. import androidx.compose.foundation.layout.padding
1717. import androidx.compose.foundation.rememberScrollState
1718. import androidx.compose.foundation.verticalScroll
1719. import androidx.compose.material3.Scaffold
1720. import androidx.compose.runtime.Composable
1721. import androidx.compose.runtime.collectAsState
1722. import androidx.compose.runtime.getValue
1723. import androidx.compose.ui.Modifier
1724. import androidx.compose.ui.unit.dp
1725. import androidx.navigation.NavHostController
1726. import com.example.iot_ha.R
1727. import com.example.iot_ha.data.local.device.DeviceState
1728. import com.example.iot_ha.ui.components.devices.DeviceCard
1729. import com.example.iot_ha.ui.viewmodels.shared.DevicesViewModel
1730. import com.example.iot_ha.utils.Constants
1731. import com.example.iot_ha.utils.toBooleanState
1732. 
1733. @Composable
1734. fun DevicesScreen(navHostController: NavHostController, devicesViewModel: DevicesViewModel) {
1735. 
1736.     val devices by devicesViewModel.devices.collectAsState()
1737.     val switchDevices by devicesViewModel.getDevicesByTypeFlow("switch").collectAsState()
1738.     val deviceState by DeviceState.devicesData.collectAsState()
1739. 
1740. 
1741. //    val predefinedSelectDevice = remember {
1742. //        object {
1743. //            val id = -1
1744. //            val friendlyName = "Выбор режима"
1745. //            val type = "select"
1746. //            val value = "Авто"
1747. //            val options = listOf("Авто", "Ручной", "Выключен")
1748. //        }
1749. //    }
1750. 
1751.     Scaffold { paddingValues ->
1752.         Column(
1753.             modifier = Modifier
1754.                 .fillMaxSize()
1755.                 .padding(paddingValues)
1756.                 .verticalScroll(rememberScrollState())
1757.                 .padding(16.dp)
1758.         ) {
1759. //            DeviceCard(
1760. //                deviceId = predefinedSelectDevice.id,
1761. //                imageRes = R.drawable.mqtt_logo,
1762. //                name = predefinedSelectDevice.friendlyName,
1763. //                type = predefinedSelectDevice.type,
1764. //                value = predefinedSelectDevice.value,
1765. //                options = predefinedSelectDevice.options,
1766. //                navController = navHostController,
1767. //                onSelectChange = { option ->
1768. //                    devicesViewModel.onSelectChange(predefinedSelectDevice.id, option)
1769. //                }
1770. //            )
1771. //
1772. //            Spacer(modifier = Modifier.height(8.dp))
1773. 
1774.             switchDevices.forEach { device ->
1775. 
1776.                 val deviceData = deviceState[device.id]
1777. 
1778.                 DeviceCard(
1779.                     deviceId = device.id,
1780.                     imageRes = R.drawable.mqtt_logo,
1781.                     name = device.friendlyName,
1782.                     type = Constants.SWITCH_TYPE,
1783.                     value = (deviceData?.get("state") as? String)?.toBooleanState() ?: false,
1784.                     navController = navHostController,
1785.                     onToggle = { state ->
1786.                         devicesViewModel.onToggle(device.id, state)
1787.                     }
1788.                 )
1789.                 Spacer(modifier = Modifier.height(8.dp))
1790.             }
1791. 
1792. 
1793.         }
1794.     }
1795. }
1796. 


RoomDetailScreen.kt

1797. package com.example.iot_ha.ui.screens.home
1798. 
1799. import androidx.compose.foundation.layout.Column
1800. import androidx.compose.foundation.layout.Spacer
1801. import androidx.compose.foundation.layout.fillMaxSize
1802. import androidx.compose.foundation.layout.height
1803. import androidx.compose.foundation.layout.padding
1804. import androidx.compose.foundation.rememberScrollState
1805. import androidx.compose.foundation.verticalScroll
1806. import androidx.compose.material3.Scaffold
1807. import androidx.compose.material3.Text
1808. import androidx.compose.runtime.Composable
1809. import androidx.compose.runtime.collectAsState
1810. import androidx.compose.runtime.getValue
1811. import androidx.compose.ui.Modifier
1812. import androidx.compose.ui.unit.dp
1813. import androidx.navigation.NavBackStackEntry
1814. import androidx.navigation.NavHostController
1815. import com.example.iot_ha.R
1816. import com.example.iot_ha.data.local.device.DeviceState
1817. import com.example.iot_ha.ui.components.devices.DeviceCard
1818. import com.example.iot_ha.ui.viewmodels.shared.DevicesViewModel
1819. import com.example.iot_ha.ui.viewmodels.shared.RoomsViewModel
1820. import com.example.iot_ha.utils.Constants
1821. import com.example.iot_ha.utils.toBooleanState
1822. 
1823. @Composable
1824. fun RoomDetailScreen(
1825.     backStackEntry: NavBackStackEntry,
1826.     roomsViewModel: RoomsViewModel,
1827.     devicesViewModel: DevicesViewModel,
1828.     navHostController: NavHostController
1829. ) {
1830.     val roomId = backStackEntry.arguments?.getString("roomId")?.toIntOrNull() ?: -1
1831. 
1832.     val roomDevices by devicesViewModel.getDevicesByRoomIdFlow(roomId).collectAsState()
1833.     val switchDevices by devicesViewModel.getDevicesByTypeFlow("switch").collectAsState()
1834. 
1835.     val roomSwitchDevices = switchDevices.filter { it -> it.id in roomDevices.map { it.id } }
1836. 
1837.     val deviceState by DeviceState.devicesData.collectAsState()
1838. 
1839.     Scaffold { paddingValues ->
1840.         Column(
1841.             modifier = Modifier
1842.                 .fillMaxSize()
1843.                 .padding(paddingValues)
1844.                 .verticalScroll(rememberScrollState())
1845.                 .padding(16.dp)
1846.         ) {
1847.             roomSwitchDevices.forEach { device ->
1848.                 val deviceData = deviceState[device.id]
1849. 
1850.                 DeviceCard(
1851.                     deviceId = device.id,
1852.                     imageRes = R.drawable.mqtt_logo,
1853.                     name = device.friendlyName,
1854.                     type = Constants.SWITCH_TYPE,
1855.                     value = (deviceData?.get("state") as? String)?.toBooleanState() ?: false,
1856.                     navController = navHostController,
1857.                     onToggle = { state ->
1858.                         devicesViewModel.onToggle(device.id, state)
1859.                     }
1860.                 )
1861.                 Spacer(modifier = Modifier.height(8.dp))
1862.             }
1863.         }
1864.     }
1865. 
1866.     Text("Room $roomId")
1867. }
1868. 
1869. 


RoomsScreen.kt

1870. package com.example.iot_ha.ui.screens.home
1871. 
1872. import android.util.Log
1873. import androidx.compose.foundation.layout.Box
1874. import androidx.compose.foundation.layout.Column
1875. import androidx.compose.foundation.layout.PaddingValues
1876. import androidx.compose.foundation.layout.fillMaxSize
1877. import androidx.compose.foundation.layout.padding
1878. import androidx.compose.foundation.lazy.LazyColumn
1879. import androidx.compose.foundation.lazy.items
1880. import androidx.compose.material.icons.Icons
1881. import androidx.compose.material.icons.filled.Add
1882. import androidx.compose.material3.FloatingActionButton
1883. import androidx.compose.material3.Icon
1884. import androidx.compose.material3.MaterialTheme
1885. import androidx.compose.runtime.Composable
1886. import androidx.compose.runtime.LaunchedEffect
1887. import androidx.compose.runtime.collectAsState
1888. import androidx.compose.runtime.getValue
1889. import androidx.compose.runtime.mutableIntStateOf
1890. import androidx.compose.runtime.mutableStateOf
1891. import androidx.compose.runtime.remember
1892. import androidx.compose.runtime.setValue
1893. import androidx.compose.ui.Alignment
1894. import androidx.compose.ui.Modifier
1895. import androidx.compose.ui.unit.dp
1896. import androidx.navigation.NavHostController
1897. import com.example.iot_ha.ui.components.rooms.AddRoomDialog
1898. import com.example.iot_ha.ui.components.rooms.RoomCard
1899. import com.example.iot_ha.ui.viewmodels.shared.RoomsViewModel
1900. 
1901. @Composable
1902. fun RoomsScreen(
1903.     navHostController: NavHostController,
1904.     roomsViewModel: RoomsViewModel
1905. ) {
1906.     var showDialog by remember { mutableStateOf(false) }
1907.     val rooms by roomsViewModel.rooms.collectAsState()
1908. 
1909.     Box(modifier = Modifier.fillMaxSize()) {
1910.         Column(modifier = Modifier.fillMaxSize()) {
1911.             LazyColumn(
1912.                 modifier = Modifier.weight(1f),
1913.                 contentPadding = PaddingValues(16.dp)
1914.             ) {
1915.                 items(rooms) { room ->
1916.                     var deviceCount by remember { mutableIntStateOf(0) }
1917. 
1918.                     LaunchedEffect(room.id) {
1919.                         roomsViewModel.getDeviceCount(room.id) { count ->
1920.                             deviceCount = count
1921.                         }
1922.                     }
1923. 
1924.                     RoomCard(
1925.                         roomId = room.id.toInt(),
1926.                         roomName = room.name,
1927.                         deviceCount = deviceCount,
1928.                         navHostController = navHostController
1929.                     )
1930.                 }
1931.             }
1932.         }
1933. 
1934.         FloatingActionButton(
1935.             onClick = { showDialog = true },
1936.             containerColor = MaterialTheme.colorScheme.primary,
1937.             modifier = Modifier
1938.                 .align(Alignment.BottomEnd)
1939.                 .padding(16.dp)
1940.         ) {
1941.             Icon(imageVector = Icons.Default.Add, contentDescription = "Добавить комнату")
1942.         }
1943.     }
1944. 
1945.     if (showDialog) {
1946.         AddRoomDialog(
1947.             onDismiss = { showDialog = false },
1948.             onConfirm = { roomName ->
1949.                 roomsViewModel.addRoom(roomName)
1950.                 showDialog = false
1951.                 Log.i("Rooms", "Комната добавлена: $roomName")
1952.             }
1953.         )
1954.     }
1955. }
1956. 


SettingsScreen.kt

1957. package com.example.iot_ha.ui.screens.home
1958. 
1959. import androidx.compose.foundation.layout.Box
1960. import androidx.compose.foundation.layout.fillMaxSize
1961. import androidx.compose.material3.Text
1962. import androidx.compose.runtime.Composable
1963. import androidx.compose.ui.Alignment
1964. import androidx.compose.ui.Modifier
1965. 
1966. @Composable
1967. fun SettingsScreen() {
1968.     Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {
1969.         Text("Настройки")
1970.     }
1971. }

Color.kt

1972. package com.example.iot_ha.ui.theme
1973. 
1974. import androidx.compose.ui.graphics.Color
1975. 
1976. val Purple80 = Color(0xFFD0BCFF)
1977. val PurpleGrey80 = Color(0xFFCCC2DC)
1978. val Pink80 = Color(0xFFEFB8C8)
1979. 
1980. val Purple40 = Color(0xFF6650a4)
1981. val PurpleGrey40 = Color(0xFF625b71)
1982. val Pink40 = Color(0xFF7D5260)

Theme.kt

1983. package com.example.iot_ha.ui.theme
1984. 
1985. import android.os.Build
1986. import androidx.compose.foundation.isSystemInDarkTheme
1987. import androidx.compose.material3.MaterialTheme
1988. import androidx.compose.material3.darkColorScheme
1989. import androidx.compose.material3.dynamicDarkColorScheme
1990. import androidx.compose.material3.dynamicLightColorScheme
1991. import androidx.compose.material3.lightColorScheme
1992. import androidx.compose.runtime.Composable
1993. import androidx.compose.ui.platform.LocalContext
1994. 
1995. private val DarkColorScheme = darkColorScheme(
1996.     primary = Purple80,
1997.     secondary = PurpleGrey80,
1998.     tertiary = Pink80
1999. )
2000. 
2001. private val LightColorScheme = lightColorScheme(
2002.     primary = Purple40,
2003.     secondary = PurpleGrey40,
2004.     tertiary = Pink40
2005. 
2006.     /* Other default colors to override
2007.     background = Color(0xFFFFFBFE),
2008.     surface = Color(0xFFFFFBFE),
2009.     onPrimary = Color.White,
2010.     onSecondary = Color.White,
2011.     onTertiary = Color.White,
2012.     onBackground = Color(0xFF1C1B1F),
2013.     onSurface = Color(0xFF1C1B1F),
2014.     */
2015. )
2016. 
2017. @Composable
2018. fun IothaTheme(
2019.     darkTheme: Boolean = isSystemInDarkTheme(),
2020.     // Dynamic color is available on Android 12+
2021.     dynamicColor: Boolean = true,
2022.     content: @Composable () -> Unit
2023. ) {
2024.     val colorScheme = when {
2025.         dynamicColor && Build.VERSION.SDK_INT >= Build.VERSION_CODES.S -> {
2026.             val context = LocalContext.current
2027.             if (darkTheme) dynamicDarkColorScheme(context) else dynamicLightColorScheme(context)
2028.         }
2029. 
2030.         darkTheme -> DarkColorScheme
2031.         else -> LightColorScheme
2032.     }
2033. 
2034.     MaterialTheme(
2035.         colorScheme = colorScheme,
2036.         typography = Typography,
2037.         content = content
2038.     )
2039. }

Type.kt

2040. package com.example.iot_ha.ui.theme
2041. 
2042. import androidx.compose.material3.Typography
2043. import androidx.compose.ui.text.TextStyle
2044. import androidx.compose.ui.text.font.FontFamily
2045. import androidx.compose.ui.text.font.FontWeight
2046. import androidx.compose.ui.unit.sp
2047. 
2048. // Set of Material typography styles to start with
2049. val Typography = Typography(
2050.     bodyLarge = TextStyle(
2051.         fontFamily = FontFamily.Default,
2052.         fontWeight = FontWeight.Normal,
2053.         fontSize = 16.sp,
2054.         lineHeight = 24.sp,
2055.         letterSpacing = 0.5.sp
2056.     )
2057.     /* Other default text styles to override
2058.     titleLarge = TextStyle(
2059.         fontFamily = FontFamily.Default,
2060.         fontWeight = FontWeight.Normal,
2061.         fontSize = 22.sp,
2062.         lineHeight = 28.sp,
2063.         letterSpacing = 0.sp
2064.     ),
2065.     labelSmall = TextStyle(
2066.         fontFamily = FontFamily.Default,
2067.         fontWeight = FontWeight.Medium,
2068.         fontSize = 11.sp,
2069.         lineHeight = 16.sp,
2070.         letterSpacing = 0.5.sp
2071.     )
2072.     */
2073. )

AuthorizationViewModel.kt

2074. package com.example.iot_ha.ui.viewmodels
2075. 
2076. import androidx.compose.runtime.State
2077. import androidx.compose.runtime.mutableStateOf
2078. import androidx.lifecycle.ViewModel
2079. import androidx.lifecycle.viewModelScope
2080. import com.example.iot_ha.data.local.RoomLocalDatabase
2081. import com.example.iot_ha.data.local.broker.Broker
2082. import kotlinx.coroutines.launch
2083. 
2084. class AuthorizationViewModel(
2085.     private val db: RoomLocalDatabase,
2086. ) : ViewModel() {
2087. 
2088.     private val brokerDao = db.brokerDAO()
2089. 
2090.     private var _brokers = mutableStateOf<List<Broker>>(emptyList())
2091.     val brokers: State<List<Broker>> = _brokers
2092. 
2093.     init {
2094.         loadBrokers()
2095.     }
2096. 
2097.     private fun loadBrokers() {
2098.         viewModelScope.launch {
2099.             _brokers.value = brokerDao.getAllBrokers()
2100.         }
2101.     }
2102. 
2103. 
2104.     fun addBroker(serverUri: String, serverPort: Int, user: String?, password: String?) {
2105.         viewModelScope.launch {
2106.             val broker = Broker(
2107.                 serverUri = serverUri,
2108.                 serverPort = serverPort,
2109.                 user = user,
2110.                 password = password
2111.             )
2112.             brokerDao.insert(broker)
2113.             loadBrokers()
2114.         }
2115.     }
2116. 
2117.     fun deleteBroker(broker: Broker) {
2118.         viewModelScope.launch {
2119.             brokerDao.deleteBroker(broker)
2120.             loadBrokers()
2121.         }
2122.     }
2123. }

HomeViewModel.kt

2124. package com.example.iot_ha.ui.viewmodels
2125. 
2126. import androidx.lifecycle.ViewModel
2127. import com.example.iot_ha.data.local.RoomLocalDatabase
2128. 
2129. 
2130. class HomeViewModel(db: RoomLocalDatabase) : ViewModel()

AuthorizationViewModelFactory.kt

2131. package com.example.iot_ha.ui.viewmodels.factory
2132. 
2133. import androidx.lifecycle.ViewModel
2134. import androidx.lifecycle.ViewModelProvider
2135. import com.example.iot_ha.data.local.RoomLocalDatabase
2136. import com.example.iot_ha.ui.viewmodels.AuthorizationViewModel
2137. 
2138. class AuthorizationViewModelFactory(
2139.     private val db: RoomLocalDatabase,
2140. ) : ViewModelProvider.Factory {
2141. 
2142.     @Suppress("UNCHECKED_CAST")
2143.     override fun <T : ViewModel> create(modelClass: Class<T>): T {
2144.         if (modelClass.isAssignableFrom(AuthorizationViewModel::class.java)) {
2145.             return AuthorizationViewModel(db) as T
2146.         }
2147.         throw IllegalArgumentException("Unknown ViewModel class")
2148.     }
2149. }

DevicesViewModelFactory.kt

2150. package com.example.iot_ha.ui.viewmodels.factory
2151. 
2152. import androidx.lifecycle.ViewModel
2153. import androidx.lifecycle.ViewModelProvider
2154. import com.example.iot_ha.data.local.RoomLocalDatabase
2155. import com.example.iot_ha.ui.viewmodels.shared.DevicesViewModel
2156. 
2157. class DevicesViewModelFactory(private val db: RoomLocalDatabase) : ViewModelProvider.Factory {
2158.     override fun <T : ViewModel> create(modelClass: Class<T>): T {
2159.         if (modelClass.isAssignableFrom(DevicesViewModel::class.java)) {
2160.             @Suppress("UNCHECKED_CAST")
2161.             return DevicesViewModel(db) as T
2162.         }
2163.         throw IllegalArgumentException("Unknown ViewModel class")
2164.     }
2165. }

HomeViewModelFactory.kt

2166. package com.example.iot_ha.ui.viewmodels.factory
2167. 
2168. import androidx.lifecycle.ViewModel
2169. import androidx.lifecycle.ViewModelProvider
2170. import com.example.iot_ha.data.local.RoomLocalDatabase
2171. import com.example.iot_ha.ui.viewmodels.HomeViewModel
2172. 
2173. class HomeViewModelFactory(private val db: RoomLocalDatabase) : ViewModelProvider.Factory {
2174.     override fun <T : ViewModel> create(modelClass: Class<T>): T {
2175.         if (modelClass.isAssignableFrom(HomeViewModel::class.java)) {
2176.             @Suppress("UNCHECKED_CAST")
2177.             return HomeViewModel(db) as T
2178.         }
2179.         throw IllegalArgumentException("Unknown ViewModel class")
2180.     }
2181. }


RoomsViewModelFactory.kt

2182. package com.example.iot_ha.ui.viewmodels.factory
2183. 
2184. import androidx.lifecycle.ViewModel
2185. import androidx.lifecycle.ViewModelProvider
2186. import com.example.iot_ha.data.local.RoomLocalDatabase
2187. import com.example.iot_ha.ui.viewmodels.shared.RoomsViewModel
2188. 
2189. class RoomsViewModelFactory(private val db: RoomLocalDatabase) : ViewModelProvider.Factory {
2190.     override fun <T : ViewModel> create(modelClass: Class<T>): T {
2191.         if (modelClass.isAssignableFrom(RoomsViewModel::class.java)) {
2192.             @Suppress("UNCHECKED_CAST")
2193.             return RoomsViewModel(db) as T
2194.         }
2195.         throw IllegalArgumentException("Unknown ViewModel class")
2196.     }
2197. }

SensorsViewModelFactory.kt

2198. package com.example.iot_ha.ui.viewmodels.factory
2199. 
2200. import androidx.lifecycle.ViewModel
2201. import androidx.lifecycle.ViewModelProvider
2202. import com.example.iot_ha.ui.viewmodels.shared.SensorsViewModel
2203. 
2204. class SensorsViewModelFactory : ViewModelProvider.Factory {
2205.     @Suppress("UNCHECKED_CAST")
2206.     override fun <T : ViewModel> create(modelClass: Class<T>): T {
2207.         if (modelClass.isAssignableFrom(SensorsViewModel::class.java)) {
2208.             return SensorsViewModel() as T
2209.         }
2210.         throw IllegalArgumentException("Unknown ViewModel class")
2211.     }
2212. }


DevicesViewModel.kt

2213. package com.example.iot_ha.ui.viewmodels.shared
2214. 
2215. import android.util.Log
2216. import androidx.lifecycle.ViewModel
2217. import androidx.lifecycle.viewModelScope
2218. import com.example.iot_ha.data.local.RoomLocalDatabase
2219. import com.example.iot_ha.data.local.broker.BrokerState
2220. import com.example.iot_ha.data.local.command.Command
2221. import com.example.iot_ha.data.local.device.Device
2222. import com.example.iot_ha.data.mqtt.MQTTClient
2223. import kotlinx.coroutines.flow.MutableStateFlow
2224. import kotlinx.coroutines.flow.StateFlow
2225. import kotlinx.coroutines.flow.collectLatest
2226. import kotlinx.coroutines.launch
2227. 
2228. class DevicesViewModel(private val db: RoomLocalDatabase) : ViewModel() {
2229.     private val _devices = MutableStateFlow<List<Device>>(emptyList())
2230.     val devices: StateFlow<List<Device>> = _devices
2231. 
2232.     init {
2233.         viewModelScope.launch {
2234.             BrokerState.brokerId.collectLatest { brokerId ->
2235.                 if (brokerId != null) {
2236.                     loadDevices(brokerId)
2237.                 }
2238.             }
2239.         }
2240.     }
2241. 
2242. 
2243.     private suspend fun loadDevices(brokerId: Int) {
2244.         db.deviceDAO().getDevicesByBrokerFlow(brokerId)
2245.             .collect { deviceList ->
2246.                 _devices.value = deviceList
2247.             }
2248.     }
2249. 
2250.     fun getDeviceIdByIeeeAddr(ieeeAddr: String, callback: (Int?) -> Unit) {
2251.         viewModelScope.launch {
2252.             val device = db.deviceDAO().getDeviceByIeeeAddr(ieeeAddr)
2253.             callback(device?.id)
2254.         }
2255.     }
2256. 
2257.     fun getDevicesByTypeFlow(type: String): StateFlow<List<Device>> {
2258.         val resultFlow = MutableStateFlow<List<Device>>(emptyList())
2259. 
2260.         viewModelScope.launch {
2261.             db.commandDAO().getCommandsByTypeFlow(type).collect { commands ->
2262.                 val deviceIds = commands.map { it.deviceId }.toSet()
2263.                 val filteredDevices = _devices.value.filter { it.id in deviceIds }
2264.                 resultFlow.value = filteredDevices
2265.             }
2266.         }
2267. 
2268.         return resultFlow
2269.     }
2270. 
2271.     fun getDevicesByRoomIdFlow(roomId: Int): StateFlow<List<Device>> {
2272.         val resultFlow = MutableStateFlow<List<Device>>(emptyList())
2273. 
2274.         viewModelScope.launch {
2275.             db.deviceDAO().getDevicesByRoomIdFlow(roomId).collect { devices ->
2276.                 val deviceIds = devices.map { it.id }.toSet()
2277.                 val filteredDevices = _devices.value.filter { it.id in deviceIds }
2278.                 resultFlow.value = filteredDevices
2279.             }
2280.         }
2281. 
2282.         return resultFlow
2283.     }
2284. 
2285.     fun addDeviceIfNotExists(device: Device) {
2286.         viewModelScope.launch {
2287.             val existingDevice = db.deviceDAO().getDeviceByIeeeAddr(device.ieeeAddr)
2288. 
2289.             Log.i("DEVLIST", devices.value.toString())
2290. 
2291.             if (existingDevice == null) {
2292.                 db.deviceDAO().insertDevice(device)
2293.                 Log.i("DevicesViewModel", "Device added: $device")
2294.             } else {
2295.                 Log.i("DevicesViewModel", "Device already exists: $device")
2296.             }
2297.         }
2298.     }
2299. 
2300.     fun addCommandIfNotExists(command: Command) {
2301.         Log.i("addCommandIfNotExists", command.toString())
2302. 
2303.         viewModelScope.launch {
2304.             val existingCommand = db.commandDAO().getCommandByCommandTopic(command.commandTopic)
2305. 
2306.             if (existingCommand == null) {
2307.                 db.commandDAO().insertCommand(command)
2308.             } else {
2309.                 Log.i("DevicesViewModel", "Command already exists: $existingCommand")
2310.             }
2311.         }
2312.     }
2313. 
2314.     fun onToggle(deviceId: Int, state: Boolean) {
2315.         viewModelScope.launch {
2316.             val cmd = db.commandDAO().getSwitchCommandByDeviceId(deviceId)
2317. 
2318.             val newState = if (!state) cmd?.payloadOff else cmd?.payloadOn
2319.             cmd?.let {
2320.                 if (newState != null) {
2321.                     sendCommandToMqtt(it.commandTopic, newState)
2322.                 }
2323.             }
2324.         }
2325.     }
2326. 
2327.     fun onSelectChange(deviceId: Int, option: String) {
2328.         viewModelScope.launch {
2329.             sendCommandToMqtt("command", "")
2330.         }
2331.     }
2332. 
2333.     private fun sendCommandToMqtt(topic: String, command: String) {
2334.         val mqttClient = MQTTClient.getInstance()
2335.         mqttClient.publish(topic, command)
2336.         println("Отправка в MQTT: $command")
2337.     }
2338. 
2339.     fun assignRoomToDevice(deviceId: Int, roomId: Long?) {
2340.         viewModelScope.launch {
2341.             val device = db.deviceDAO().getDeviceById(deviceId)
2342.             val updatedDevice = device.copy(roomId = roomId)
2343.             db.deviceDAO().updateDevice(updatedDevice)
2344.         }
2345.     }
2346. 
2347. }
2348. 


RoomsViewModel.kt

2349. package com.example.iot_ha.ui.viewmodels.shared
2350. 
2351. import androidx.lifecycle.ViewModel
2352. import androidx.lifecycle.viewModelScope
2353. import com.example.iot_ha.data.local.RoomLocalDatabase
2354. import com.example.iot_ha.data.local.room.RoomEntity
2355. import kotlinx.coroutines.flow.MutableStateFlow
2356. import kotlinx.coroutines.flow.StateFlow
2357. import kotlinx.coroutines.launch
2358. 
2359. class RoomsViewModel(private val db: RoomLocalDatabase) : ViewModel() {
2360.     private val _rooms = MutableStateFlow<List<RoomEntity>>(emptyList())
2361.     val rooms: StateFlow<List<RoomEntity>> = _rooms
2362. 
2363.     init {
2364.         viewModelScope.launch {
2365.             db.roomEntityDAO().getAllRooms().collect { _rooms.value = it }
2366.         }
2367.     }
2368. 
2369.     fun addRoom(name: String) {
2370.         viewModelScope.launch {
2371.             db.roomEntityDAO().insertRoom(RoomEntity(name = name))
2372.         }
2373.     }
2374. 
2375.     fun getDeviceCount(roomId: Long, onResult: (Int) -> Unit) {
2376.         viewModelScope.launch {
2377.             val count = db.deviceDAO().getDeviceCountForRoom(roomId)
2378.             onResult(count)
2379.         }
2380.     }
2381. }


SensorsViewModel.kt

2382. package com.example.iot_ha.ui.viewmodels.shared
2383. 
2384. import android.util.Log
2385. import androidx.lifecycle.ViewModel
2386. import com.example.iot_ha.ui.viewmodels.shared.data.SensorsData
2387. import kotlinx.coroutines.flow.MutableStateFlow
2388. import kotlinx.coroutines.flow.StateFlow
2389. 
2390. class SensorsViewModel : ViewModel() {
2391.     private val _sensorData = MutableStateFlow<Map<String, SensorsData>>(emptyMap())
2392.     val sensorData: StateFlow<Map<String, SensorsData>> = _sensorData
2393. 
2394.     fun updateSensorData(topic: String, payload: String) {
2395.         _sensorData.value += (topic to SensorsData(topic, payload))
2396.     }
2397. 
2398.     fun test() {
2399.         Log.i("ViewModel", "TESTING MESSAGE")
2400.     }
2401. }

SensorsData.kt

2402. package com.example.iot_ha.ui.viewmodels.shared.data
2403. 
2404. data class SensorsData(
2405.     val topic: String,
2406.     val payload: String,
2407.     val timestamp: Long = System.currentTimeMillis()
2408. )


Constants.kt

2409. package com.example.iot_ha.utils
2410. 
2411. object Constants {
2412.     const val SWITCH_TYPE = "switch"
2413. 
2414.     val TABS_LIST = listOf("Devices", "Rooms", "Settings")
2415. }

DeviceActionBuilder.kt

2416. class DeviceActionBuilder(private val deviceId: Int) {
2417.     fun buildOnToggle(): (Int, Boolean) -> Unit = { id, state ->
2418.         if (id == deviceId) {
2419.             println("[$deviceId] Toggle changed: $state")
2420.         }
2421.     }
2422. 
2423.     fun buildOnSliderChange(): (Int, Float) -> Unit = { id, value ->
2424.         if (id == deviceId) {
2425.             println("[$deviceId] Slider value: $value")
2426.         }
2427.     }
2428. 
2429.     fun buildOnSelectChange(): (Int, String) -> Unit = { id, option ->
2430.         if (id == deviceId) {
2431.             println("[$deviceId] Selected: $option")
2432.         }
2433.     }
2434. }


Extensions.kt

2435. package com.example.iot_ha.utils
2436. 
2437. fun String.toBooleanState(): Boolean = when (this) {
2438.     "ON", "true", "1" -> true
2439.     else -> false
2440. }

ExampleUnitTest.kt

2441. package com.example.iot_ha
2442. 
2443. import org.junit.Assert.assertEquals
2444. import org.junit.Test
2445. 
2446. /**
2447.  * Example local unit test, which will execute on the development machine (host).
2448.  *
2449.  * See [testing documentation](http://d.android.com/tools/testing).
2450.  */
2451. class ExampleUnitTest {
2452.     @Test
2453.     fun addition_isCorrect() {
2454.         assertEquals(4, 2 + 2)
2455.     }
2456. }

