ExampleInstrumentedTest.kt

0001. package com.example.iot_ha
0002. 
0003. import androidx.test.ext.junit.runners.AndroidJUnit4
0004. import androidx.test.platform.app.InstrumentationRegistry
0005. import org.junit.Assert.assertEquals
0006. import org.junit.Test
0007. import org.junit.runner.RunWith
0008. 
0009. /**
0010.  * Instrumented test, which will execute on an Android device.
0011.  *
0012.  * See [testing documentation](http://d.android.com/tools/testing).
0013.  */
0014. @RunWith(AndroidJUnit4::class)
0015. class ExampleInstrumentedTest {
0016.     @Test
0017.     fun useAppContext() {
0018.         // Context of the app under test.
0019.         val appContext = InstrumentationRegistry.getInstrumentation().targetContext
0020.         assertEquals("com.example.iot_ha", appContext.packageName)
0021.     }
0022. }

MainActivity.kt

0023. package com.example.iot_ha
0024. 
0025. import android.os.Bundle
0026. import androidx.activity.ComponentActivity
0027. import androidx.activity.compose.setContent
0028. import androidx.navigation.compose.rememberNavController
0029. import com.example.iot_ha.ui.navigation.AppNavHost
0030. 
0031. class MainActivity : ComponentActivity() {
0032.     override fun onCreate(savedInstanceState: Bundle?) {
0033.         super.onCreate(savedInstanceState)
0034. 
0035.         setContent {
0036.             val navController = rememberNavController()
0037.             AppNavHost(navController, "auth")
0038.         }
0039.     }
0040. }
0041. 


MapTypeConvertor.kt

0042. package com.example.iot_ha.data.local
0043. 
0044. import androidx.room.TypeConverter
0045. import com.google.gson.Gson
0046. import com.google.gson.reflect.TypeToken
0047. 
0048. class MapTypeConvertor {
0049.     private val gson = Gson()
0050. 
0051.     @TypeConverter
0052.     fun fromMap(map: Map<String, String>?): String? {
0053.         return gson.toJson(map)
0054.     }
0055. 
0056.     @TypeConverter
0057.     fun toMap(json: String?): Map<String, String>? {
0058.         return json?.let {
0059.             val type = object : TypeToken<Map<String, String>>() {}.type
0060.             gson.fromJson(it, type)
0061.         }
0062.     }
0063. }
0064. 


RoomLocalDatabase.kt

0065. package com.example.iot_ha.data.local
0066. 
0067. import android.content.Context
0068. import androidx.room.Database
0069. import androidx.room.Room
0070. import androidx.room.RoomDatabase
0071. import androidx.room.TypeConverters
0072. import com.example.iot_ha.data.local.broker.Broker
0073. import com.example.iot_ha.data.local.broker.BrokerDAO
0074. import com.example.iot_ha.data.local.command.Command
0075. import com.example.iot_ha.data.local.command.CommandDAO
0076. import com.example.iot_ha.data.local.device.Device
0077. import com.example.iot_ha.data.local.device.DeviceDAO
0078. import com.example.iot_ha.data.local.room.RoomEntity
0079. import com.example.iot_ha.data.local.room.RoomEntityDAO
0080. 
0081. @Database(
0082.     entities = [Broker::class, Device::class, Command::class, RoomEntity::class],
0083.     version = 1,
0084.     exportSchema = false
0085. )
0086. @TypeConverters(MapTypeConvertor::class)
0087. abstract class RoomLocalDatabase : RoomDatabase() {
0088.     abstract fun brokerDAO(): BrokerDAO
0089.     abstract fun deviceDAO(): DeviceDAO
0090.     abstract fun commandDAO(): CommandDAO
0091.     abstract fun roomEntityDAO(): RoomEntityDAO
0092. 
0093.     companion object {
0094.         @Volatile
0095.         private var INSTANCE: RoomLocalDatabase? = null
0096. 
0097.         fun getInstance(context: Context): RoomLocalDatabase {
0098.             return INSTANCE ?: synchronized(this) {
0099.                 val instance = Room.databaseBuilder(
0100.                     context.applicationContext,
0101.                     RoomLocalDatabase::class.java,
0102.                     "room_local_database"
0103.                 ).build()
0104.                 INSTANCE = instance
0105.                 instance
0106.             }
0107.         }
0108.     }
0109. }

Broker.kt

0110. package com.example.iot_ha.data.local.broker
0111. 
0112. import androidx.room.Entity
0113. import androidx.room.PrimaryKey
0114. 
0115. @Entity(tableName = "brokers")
0116. data class Broker(
0117.     @PrimaryKey(autoGenerate = true) val id: Int = 0,
0118.     val serverUri: String,
0119.     val serverPort: Int,
0120.     val user: String?,
0121.     val password: String?
0122. )
0123. 


BrokerDAO.kt

0124. package com.example.iot_ha.data.local.broker
0125. 
0126. import androidx.room.Dao
0127. import androidx.room.Delete
0128. import androidx.room.Insert
0129. import androidx.room.OnConflictStrategy
0130. import androidx.room.Query
0131. 
0132. @Dao
0133. interface BrokerDAO {
0134.     @Insert(onConflict = OnConflictStrategy.REPLACE)
0135.     suspend fun insert(broker: Broker)
0136. 
0137.     @Query("SELECT * FROM brokers")
0138.     suspend fun getAllBrokers(): List<Broker>
0139. 
0140.     @Query("SELECT * FROM brokers ORDER BY id DESC LIMIT 1")
0141.     suspend fun getLastBroker(): Broker?
0142. 
0143.     @Delete
0144.     suspend fun deleteBroker(broker: Broker)
0145. }

BrokerState.kt

0146. package com.example.iot_ha.data.local.broker
0147. 
0148. import kotlinx.coroutines.flow.MutableStateFlow
0149. import kotlinx.coroutines.flow.StateFlow
0150. 
0151. object BrokerState {
0152.     private val _brokerId = MutableStateFlow<Int?>(null)
0153.     val brokerId: StateFlow<Int?> = _brokerId
0154. 
0155.     fun setBrokerId(id: Int) {
0156.         _brokerId.value = id
0157.     }
0158. }


DiscoveryState.kt

0159. package com.example.iot_ha.data.local.broker.discovery
0160. 
0161. import com.example.iot_ha.data.mqtt.MQTTClient
0162. import com.example.iot_ha.data.mqtt.util.Topics
0163. import com.example.iot_ha.utils.Constants
0164. import kotlinx.coroutines.CoroutineScope
0165. import kotlinx.coroutines.Dispatchers
0166. import kotlinx.coroutines.Job
0167. import kotlinx.coroutines.delay
0168. import kotlinx.coroutines.flow.MutableStateFlow
0169. import kotlinx.coroutines.flow.StateFlow
0170. import kotlinx.coroutines.launch
0171. 
0172. object DiscoveryState {
0173.     private val _isDiscoveryActive = MutableStateFlow(false)
0174.     val isDiscoveryActive: StateFlow<Boolean> = _isDiscoveryActive
0175. 
0176.     private var resetJob: Job? = null
0177. 
0178.     fun startDiscovery() {
0179.         _isDiscoveryActive.value = true
0180.         MQTTClient.publish(Topics.DISCOVERY_TOPIC, Constants.DISCOVERY_ENABLE)
0181. 
0182.         resetJob?.cancel()
0183. 
0184.         resetJob = CoroutineScope(Dispatchers.Default).launch {
0185.             delay(Constants.DISCOVERY_TIME)
0186.             _isDiscoveryActive.value = false
0187.         }
0188.     }
0189. 
0190.     fun stopDiscovery() {
0191.         _isDiscoveryActive.value = false
0192.         MQTTClient.publish(Topics.DISCOVERY_TOPIC, Constants.DISCOVERY_DISABLE)
0193.         resetJob?.cancel()
0194.     }
0195. }


Command.kt

0196. package com.example.iot_ha.data.local.command
0197. 
0198. import androidx.room.Entity
0199. import androidx.room.ForeignKey
0200. import androidx.room.PrimaryKey
0201. import androidx.room.TypeConverters
0202. import com.example.iot_ha.data.local.MapTypeConvertor
0203. import com.example.iot_ha.data.local.device.Device
0204. 
0205. @Entity(
0206.     tableName = "commands",
0207.     foreignKeys = [ForeignKey(
0208.         entity = Device::class,
0209.         parentColumns = ["id"],
0210.         childColumns = ["deviceId"],
0211.         onDelete = ForeignKey.CASCADE
0212.     )]
0213. )
0214. data class Command(
0215.     @PrimaryKey(autoGenerate = true) val id: Int = 0,
0216.     val deviceId: Int,
0217. 
0218.     val commandTopic: String,
0219. 
0220.     // for switch commands
0221.     val payloadOn: String?,
0222.     val payloadOff: String?,
0223. 
0224.     // for select commands
0225.     @TypeConverters(MapTypeConvertor::class) val options: Map<String, String>?,
0226.     val commandTemplate: String?,
0227. 
0228. 
0229.     val commandType: String,
0230. )


CommandDAO.kt

0231. package com.example.iot_ha.data.local.command
0232. 
0233. import androidx.room.Dao
0234. import androidx.room.Insert
0235. import androidx.room.OnConflictStrategy
0236. import androidx.room.Query
0237. import kotlinx.coroutines.flow.Flow
0238. 
0239. @Dao
0240. interface CommandDAO {
0241. 
0242.     @Query("SELECT * FROM commands WHERE commandTopic = :commandTopic LIMIT 1")
0243.     suspend fun getCommandByCommandTopic(commandTopic: String): Command?
0244. 
0245.     @Query("SELECT * FROM commands WHERE deviceId = :deviceId AND commandType = 'switch' LIMIT 1")
0246.     suspend fun getSwitchCommandByDeviceId(deviceId: Int): Command?
0247. 
0248.     @Insert(onConflict = OnConflictStrategy.REPLACE)
0249.     suspend fun insertCommand(command: Command)
0250. 
0251.     @Query("SELECT * FROM commands WHERE commandType = :type")
0252.     fun getCommandsByTypeFlow(type: String): Flow<List<Command>>
0253. 
0254.     @Query("SELECT * FROM commands")
0255.     fun getAllCommandsFlow(): Flow<List<Command>>
0256. }

Device.kt

0257. package com.example.iot_ha.data.local.device
0258. 
0259. import androidx.room.Entity
0260. import androidx.room.ForeignKey
0261. import androidx.room.Index
0262. import androidx.room.PrimaryKey
0263. import com.example.iot_ha.data.local.broker.Broker
0264. import com.example.iot_ha.data.local.room.RoomEntity
0265. 
0266. @Entity(
0267.     tableName = "devices",
0268.     foreignKeys = [
0269.         ForeignKey(
0270.             entity = Broker::class,
0271.             parentColumns = ["id"],
0272.             childColumns = ["brokerId"],
0273.             onDelete = ForeignKey.CASCADE
0274.         ),
0275.         ForeignKey(
0276.             entity = RoomEntity::class,
0277.             parentColumns = ["id"],
0278.             childColumns = ["roomId"],
0279.             onDelete = ForeignKey.SET_NULL
0280.         )
0281.     ],
0282.     indices = [Index(value = ["roomId"])]
0283. )
0284. data class Device(
0285.     @PrimaryKey(autoGenerate = true) val id: Int = 0,
0286.     val ieeeAddr: String,
0287.     val friendlyName: String,
0288.     val modelId: String,
0289.     val topic: String,
0290.     val roomId: Long?,
0291.     val brokerId: Int
0292. ) {
0293.     companion object {
0294.         fun create(
0295.             ieeeAddr: String,
0296.             friendlyName: String,
0297.             modelId: String,
0298.             roomId: Long?,
0299.             brokerId: Int
0300.         ): Device {
0301.             val topic = "zigbee/0x$ieeeAddr"
0302.             val name = friendlyName.ifEmpty { "0x$ieeeAddr" }
0303.             return Device(
0304.                 ieeeAddr = "0x$ieeeAddr",
0305.                 friendlyName = name,
0306.                 modelId = modelId,
0307.                 topic = topic,
0308.                 roomId = roomId,
0309.                 brokerId = brokerId
0310.             )
0311.         }
0312.     }
0313. }


DeviceDAO.kt

0314. package com.example.iot_ha.data.local.device
0315. 
0316. import androidx.room.Dao
0317. import androidx.room.Insert
0318. import androidx.room.OnConflictStrategy
0319. import androidx.room.Query
0320. import androidx.room.Update
0321. import kotlinx.coroutines.flow.Flow
0322. 
0323. @Dao
0324. interface DeviceDAO {
0325.     @Query("SELECT * FROM devices WHERE brokerId = :brokerId")
0326.     suspend fun getDevicesByBroker(brokerId: Int): List<Device>
0327. 
0328.     @Query("SELECT * FROM devices WHERE brokerId = :brokerId")
0329.     fun getDevicesByBrokerFlow(brokerId: Int): Flow<List<Device>>
0330. 
0331.     @Query("SELECT * FROM devices")
0332.     suspend fun getAllDevices(): List<Device>
0333. 
0334.     @Query("SELECT * FROM devices WHERE ieeeAddr = :ieeeAddr LIMIT 1")
0335.     suspend fun getDeviceByIeeeAddr(ieeeAddr: String): Device?
0336. 
0337.     @Query("SELECT * FROM devices WHERE id = :deviceId LIMIT 1")
0338.     suspend fun getDeviceById(deviceId: Int): Device // ? был тут
0339. 
0340.     @Insert(onConflict = OnConflictStrategy.IGNORE)
0341.     suspend fun insertDevice(device: Device): Long
0342. 
0343.     @Query("SELECT * FROM devices WHERE roomId = :roomId")
0344.     fun getDevicesByRoomIdFlow(roomId: Int): Flow<List<Device>>
0345. 
0346.     @Update
0347.     suspend fun updateDevice(device: Device)
0348. 
0349.     @Query("SELECT COUNT(*) FROM devices WHERE roomId = :roomId")
0350.     suspend fun getDeviceCountForRoom(roomId: Long): Int
0351. 
0352.     @Query("SELECT * FROM devices")
0353.     fun getAllDevicesFlow(): Flow<List<Device>>
0354. }


DeviceState.kt

0355. package com.example.iot_ha.data.local.device
0356. 
0357. import kotlinx.coroutines.flow.MutableStateFlow
0358. import kotlinx.coroutines.flow.StateFlow
0359. import kotlinx.coroutines.flow.update
0360. 
0361. object DeviceState {
0362.     private val _devicesData = MutableStateFlow<Map<Int, Map<String, Any>>>(emptyMap())
0363.     val devicesData: StateFlow<Map<Int, Map<String, Any>>> = _devicesData
0364. 
0365.     fun updateDeviceData(deviceId: Int, payload: String) {
0366.         val parsedData: Map<String, Any> = parseJson(payload)
0367. 
0368.         _devicesData.update { currentData ->
0369.             currentData.toMutableMap().apply { this[deviceId] = parsedData }
0370.         }
0371.     }
0372. 
0373. 
0374.     private fun parseJson(json: String): Map<String, Any> {
0375.         return try {
0376.             val jsonObject = org.json.JSONObject(json)
0377.             jsonObject.keys().asSequence().associateWith { jsonObject.get(it) }
0378.         } catch (e: Exception) {
0379.             emptyMap()
0380.         }
0381.     }
0382. 
0383.     fun getDeviceValue(deviceId: Int, key: String): Any? {
0384.         return _devicesData.value[deviceId]?.get(key)
0385.     }
0386. }


LEDState.kt

0387. package com.example.iot_ha.data.local.led
0388. 
0389. import kotlinx.coroutines.flow.MutableStateFlow
0390. import kotlinx.coroutines.flow.asStateFlow
0391. 
0392. object LEDState {
0393.     private val _brightness = MutableStateFlow(127f)
0394.     private val _red = MutableStateFlow(127f)
0395.     private val _green = MutableStateFlow(127f)
0396.     private val _blue = MutableStateFlow(127f)
0397. 
0398.     val brightness = _brightness.asStateFlow()
0399.     val red = _red.asStateFlow()
0400.     val green = _green.asStateFlow()
0401.     val blue = _blue.asStateFlow()
0402. 
0403.     fun setBrightness(value: Float) { _brightness.value = value }
0404.     fun setRed(value: Float) { _red.value = value }
0405.     fun setGreen(value: Float) { _green.value = value }
0406.     fun setBlue(value: Float) { _blue.value = value }
0407. }


LEDStatus.kt

0408. package com.example.iot_ha.data.local.led
0409. 
0410. import org.json.JSONObject
0411. 
0412. data class LEDStatus(
0413.     val state: String = "ON",
0414.     val brightness: Int,
0415.     val red: Int,
0416.     val green: Int,
0417.     val blue: Int,
0418.     val colorMode: String = "rgb",
0419.     val mode: String = "manual"
0420. ) {
0421.     fun toJson(): String {
0422.         return JSONObject().apply {
0423.             put("state", state)
0424.             put("brightness", brightness)
0425.             put("color", JSONObject().apply {
0426.                 put("r", red)
0427.                 put("g", green)
0428.                 put("b", blue)
0429.             })
0430.             put("color_mode", colorMode)
0431.             put("mode", mode)
0432.         }.toString()
0433.     }
0434. }


RoomEntity.kt

0435. package com.example.iot_ha.data.local.room
0436. 
0437. import androidx.room.Entity
0438. import androidx.room.PrimaryKey
0439. 
0440. @Entity(tableName = "rooms")
0441. data class RoomEntity(
0442.     @PrimaryKey(autoGenerate = true) val id: Long = 0,
0443.     val name: String
0444. )


RoomEntityDAO.kt

0445. package com.example.iot_ha.data.local.room
0446. 
0447. import androidx.room.Dao
0448. import androidx.room.Insert
0449. import androidx.room.OnConflictStrategy
0450. import androidx.room.Query
0451. import kotlinx.coroutines.flow.Flow
0452. 
0453. @Dao
0454. interface RoomEntityDAO {
0455.     @Query("SELECT * FROM rooms")
0456.     fun getAllRooms(): Flow<List<RoomEntity>>
0457. 
0458.     @Insert(onConflict = OnConflictStrategy.REPLACE)
0459.     suspend fun insertRoom(room: RoomEntity)
0460. 
0461.     @Query("DELETE FROM rooms WHERE id = :roomId")
0462.     suspend fun deleteRoom(roomId: Int)
0463. }


MQTTClient.kt

0464. package com.example.iot_ha.data.mqtt
0465. 
0466. import android.util.Log
0467. import com.example.iot_ha.data.local.broker.Broker
0468. import com.example.iot_ha.data.mqtt.domain.MQTTMessageHandler
0469. import com.example.iot_ha.data.mqtt.interfaces.MQTTConnection
0470. import com.example.iot_ha.data.mqtt.interfaces.MQTTMessaging
0471. import com.example.iot_ha.utils.logging.Logger
0472. import org.eclipse.paho.client.mqttv3.IMqttDeliveryToken
0473. import org.eclipse.paho.client.mqttv3.MqttCallback
0474. import org.eclipse.paho.client.mqttv3.MqttClient
0475. import org.eclipse.paho.client.mqttv3.MqttConnectOptions
0476. import org.eclipse.paho.client.mqttv3.MqttException
0477. import org.eclipse.paho.client.mqttv3.MqttMessage
0478. 
0479. object MQTTClient: MQTTMessaging, MQTTConnection {
0480.     private var mqttClient: MqttClient? = null
0481.     private var broker: Broker? = null
0482.     private var messageHandler: MQTTMessageHandler? = null
0483. 
0484.     fun initialize(broker: Broker, handler: MQTTMessageHandler?): MQTTClient {
0485.         this.broker = broker
0486.         this.messageHandler = handler
0487.         return this
0488.     }
0489. 
0490.     fun reinitialize(newBroker: Broker, handler: MQTTMessageHandler): MQTTClient {
0491.         disconnect()
0492.         broker = newBroker
0493.         messageHandler = handler
0494.         return this
0495.     }
0496. 
0497.     fun getInstance(): MQTTClient {
0498.         return this
0499.     }
0500. 
0501.     override fun connect(): Boolean {
0502.         return try {
0503.             val clientId = MqttClient.generateClientId()
0504.             mqttClient =
0505.                 MqttClient("tcp://${broker?.serverUri}:${broker?.serverPort}", clientId, null)
0506. 
0507.             val options = MqttConnectOptions().apply {
0508.                 userName = broker?.user
0509.                 password = broker?.password?.toCharArray()
0510.                 isAutomaticReconnect = true
0511.                 isCleanSession = true
0512.             }
0513. 
0514.             mqttClient?.connect(options)
0515.             Logger.log(MQTTClient::class, "Подключение успешно!")
0516.             true
0517.         } catch (e: MqttException) {
0518.             Logger.log(MQTTClient::class, "Ошибка подключения: ${e.reasonCode} - ${e.message}")
0519.             false
0520.         }
0521.     }
0522. 
0523.     override fun subscribe(topic: String) {
0524.         try {
0525.             mqttClient?.setCallback(object : MqttCallback {
0526.                 override fun connectionLost(cause: Throwable?) {
0527.                     Log.e("MQTT", "Соединение потеряно: ${cause?.message}")
0528.                 }
0529. 
0530.                 override fun messageArrived(topic: String, message: MqttMessage) {
0531.                     val payload = message.toString()
0532.                     Log.i("MQTT", "📩 Получено сообщение: $message на топик: $topic")
0533. 
0534.                     messageHandler?.handleMessage(topic, payload)
0535.                 }
0536. 
0537.                 override fun deliveryComplete(token: IMqttDeliveryToken) {
0538.                     Log.i("MQTT", "Сообщение отправлено")
0539.                 }
0540.             })
0541. 
0542.             mqttClient?.subscribe(topic)
0543.             Log.i("MQTT", "📡 Подписался на $topic")
0544.         } catch (e: MqttException) {
0545.             Log.e("MQTT", "Ошибка подписки: ${e.reasonCode} - ${e.message}")
0546.         }
0547.     }
0548. 
0549.     override fun unsubscribe(topic: String) {
0550.         try {
0551.             mqttClient?.unsubscribe(topic)
0552.         } catch (e: MqttException) {
0553.             Log.e("MQTT", "Ошибка отписки: ${e.reasonCode} - ${e.message}")
0554.         }
0555.     }
0556. 
0557.     override fun publish(topic: String, payload: String, qos: Int, retained: Boolean) {
0558.         try {
0559.             val message = MqttMessage(payload.toByteArray()).apply {
0560.                 this.qos = qos
0561.                 this.isRetained = retained
0562.             }
0563.             mqttClient?.publish(topic, message)
0564.             Log.i("MQTT", "📤 Отправлено сообщение: $payload в топик: $topic")
0565.         } catch (e: MqttException) {
0566.             Log.e("MQTT", "Ошибка отправки сообщения: ${e.reasonCode} - ${e.message}")
0567.         }
0568.     }
0569. 
0570.     override fun disconnect() {
0571.         try {
0572.             mqttClient?.disconnect()
0573.             Log.i("MQTT", "🔌 Отключен от брокера")
0574.         } catch (e: MqttException) {
0575.             Log.e("MQTT", "Ошибка отключения: ${e.message}")
0576.         }
0577.     }
0578. }


MQTTMessageHandler.kt

0579. package com.example.iot_ha.data.mqtt.domain
0580. 
0581. import android.util.Log
0582. import com.example.iot_ha.data.local.broker.BrokerState
0583. import com.example.iot_ha.data.local.command.Command
0584. import com.example.iot_ha.data.local.device.Device
0585. import com.example.iot_ha.data.local.device.DeviceState
0586. import com.example.iot_ha.data.local.led.LEDState
0587. import com.example.iot_ha.data.mqtt.util.Topics
0588. import com.example.iot_ha.ui.viewmodels.shared.DevicesViewModel
0589. import com.example.iot_ha.ui.viewmodels.shared.SensorsViewModel
0590. import com.example.iot_ha.utils.Constants
0591. import org.json.JSONObject
0592. 
0593. class MQTTMessageHandler(
0594.     private val sensorsViewModel: SensorsViewModel,
0595.     private val devicesViewModel: DevicesViewModel,
0596. ) {
0597.     fun handleMessage(topic: String, payload: String) {
0598.         Log.i("MQTTHandler", "📩 Обрабатываем сообщение: $payload с топика: $topic")
0599. 
0600.         when {
0601.             topic.startsWith(Topics.DEVICE_STATE_TOPIC) -> handleDeviceStateMessage(topic, payload)
0602.             topic.startsWith(Topics.DEVICE_COMMANDS_TOPIC) -> handleDeviceCommandMessage(topic, payload)
0603.             topic.startsWith(Topics.DEVICE_LIST_TOPIC) -> handleDeviceListMessage(payload)
0604.             topic.startsWith(Topics.LED_STATE_TOPIC) -> handleLEDState(payload)
0605.             else -> Log.i("MQTTHandler", "⚠ Необрабатываемый топик: $topic")
0606.         }
0607.     }
0608. 
0609.     private fun handleDeviceStateMessage(topic: String, payload: String) {
0610.         val ieeeAddr = extractIeeeAddrFromTopic(topic)
0611.         val deviceId = devicesViewModel.devices.value.find { it.ieeeAddr == ieeeAddr }?.id
0612. 
0613.         if (deviceId != null) {
0614.             DeviceState.updateDeviceData(deviceId, payload)
0615.         } else {
0616.             println("Устройство с IEEE Addr $ieeeAddr не найдено")
0617.         }
0618.     }
0619. 
0620.     private fun handleLEDState(payload: String) {
0621.         try {
0622.             val json = JSONObject(payload)
0623.             if (json.getString("state") == "ON") {
0624.                 LEDState.setBrightness(json.optInt("brightness", 127).toFloat())
0625.                 json.optJSONObject("color")?.let { color ->
0626.                     LEDState.setRed(color.optInt("r", 127).toFloat())
0627.                     LEDState.setGreen(color.optInt("g", 127).toFloat())
0628.                     LEDState.setBlue(color.optInt("b", 127).toFloat())
0629.                 }
0630.             }
0631.         } catch (e: Exception) {
0632.             e.printStackTrace()
0633.         }
0634.     }
0635. 
0636. 
0637.     private fun handleDeviceCommandMessage(topic: String, payload: String) {
0638.         try {
0639.             val jsonObject = JSONObject(payload)
0640. 
0641.             val commandTopic =
0642.                 jsonObject.optString("command_topic").takeIf { it.isNotBlank() } ?: return
0643.             val payloadOn = jsonObject.optString("payload_on", null)
0644.             val payloadOff = jsonObject.optString("payload_off", null)
0645.             val commandTemplate = jsonObject.optString("command_template", null)
0646. 
0647.             val options = jsonObject.optJSONArray("options")?.let { array ->
0648.                 (0 until array.length()).associate { index ->
0649.                     array.getString(index) to array.getString(
0650.                         index
0651.                     )
0652.                 }
0653.             } ?: emptyMap()
0654. 
0655.             val commandType = extractCommandTypeFromTopic(topic)
0656.             val deviceIeeeAddr = extractIeeeAddrFromTopic(topic)
0657. 
0658.             if (deviceIeeeAddr != null && commandType != "unknown") {
0659.                 devicesViewModel.getDeviceIdByIeeeAddr(deviceIeeeAddr) { deviceId ->
0660.                     if (deviceId != null) {
0661.                         val command = Command(
0662.                             deviceId = deviceId,
0663.                             commandTopic = commandTopic,
0664.                             payloadOn = payloadOn,
0665.                             payloadOff = payloadOff,
0666.                             options = options,
0667.                             commandTemplate = commandTemplate,
0668.                             commandType = commandType
0669.                         )
0670. 
0671.                         devicesViewModel.addCommandIfNotExists(command)
0672.                         Log.i("MQTTHandler", "📥 Команда сохранена: $command")
0673.                     } else {
0674.                         Log.e("DeviceId", "Device not found for IEEE Address: $deviceIeeeAddr")
0675.                     }
0676.                 }
0677.             }
0678.         } catch (e: Exception) {
0679.             Log.e("MQTTHandler", "Ошибка обработки команды: ${e.message}")
0680.         }
0681.     }
0682. 
0683.     private fun extractCommandTypeFromTopic(topic: String): String {
0684.         return when {
0685.             topic.contains("/switch/", ignoreCase = true) -> Constants.SWITCH_TYPE
0686. //            topic.contains("/select/", ignoreCase = true) -> "select"
0687. //            topic.contains("/light/", ignoreCase = true) -> "dimmer"
0688.             else -> "unknown"
0689.         }
0690.     }
0691. 
0692.     private fun extractIeeeAddrFromTopic(topic: String): String? {
0693.         val regex = Regex("0x[0-9A-Fa-f]+")
0694.         return regex.find(topic)?.value
0695.     }
0696. 
0697.     private fun handleDeviceListMessage(payload: String) {
0698.         try {
0699.             val jsonObject = JSONObject(payload)
0700. 
0701.             for (key in jsonObject.keys()) {
0702.                 val deviceJson = jsonObject.optJSONObject(key) ?: continue
0703. 
0704.                 val ieeeAddr = deviceJson.optString("ieeeAddr")
0705.                 val friendlyName = deviceJson.optString("friendly_name")
0706.                 val modelId = deviceJson.optString("ModelId")
0707. 
0708.                 val device = Device.create(
0709.                     ieeeAddr = ieeeAddr,
0710.                     friendlyName = friendlyName,
0711.                     modelId = modelId,
0712.                     roomId = null,
0713.                     brokerId = BrokerState.brokerId.value ?: -1
0714.                 )
0715. 
0716.                 Log.i("DEVICE", "📥 Получено устройство: $device")
0717. 
0718.                 devicesViewModel.addDeviceIfNotExists(device)
0719.             }
0720. 
0721.         } catch (e: Exception) {
0722.             Log.e("DEVICE", "Ошибка обработки списка устройств: ${e.message}")
0723.         }
0724.     }
0725. 
0726. }
0727. 


MQTTConnection.kt

0728. package com.example.iot_ha.data.mqtt.interfaces
0729. 
0730. interface MQTTConnection {
0731.     fun connect(): Boolean
0732.     fun disconnect()
0733. }


MQTTMessaging.kt

0734. package com.example.iot_ha.data.mqtt.interfaces
0735. 
0736. interface MQTTMessaging {
0737.     fun subscribe(topic: String)
0738.     fun unsubscribe(topic: String)
0739.     fun publish(topic: String, payload: String, qos: Int = 1, retained: Boolean = false)
0740. }


Topics.kt

0741. package com.example.iot_ha.data.mqtt.util
0742. 
0743. object Topics {
0744.     const val DISCOVERY_TOPIC = "zigbee/bridge/config/permit_join"
0745. 
0746.     const val DEVICE_STATE_TOPIC = "zigbee/0x"
0747.     const val SUBSCRIBE_DEVICE_STATE_TOPIC = "zigbee/#"
0748. 
0749.     const val DEVICE_COMMANDS_TOPIC = "homeassistant/"
0750.     const val SUBSCRIBE_DEVICE_COMMANDS_TOPIC = "homeassistant/#"
0751. 
0752.     const val DEVICE_LIST_TOPIC = "devicelist"
0753.     const val SUBSCRIBE_DEVICE_LIST_TOPIC = "devicelist"
0754. 
0755.     const val LED_STATE_TOPIC = "zigbee/led"
0756.     const val SUBSCRIBE_LED_STATE_TOPIC = "zigbee/led"
0757.     const val LED_SET_STATE_TOPIC = "zigbee/led/set"
0758. }

BrokerInputForm.kt

0759. package com.example.iot_ha.ui.components.broker
0760. 
0761. import androidx.compose.foundation.layout.Column
0762. import androidx.compose.foundation.layout.Spacer
0763. import androidx.compose.foundation.layout.fillMaxWidth
0764. import androidx.compose.foundation.layout.height
0765. import androidx.compose.foundation.shape.RoundedCornerShape
0766. import androidx.compose.material3.Button
0767. import androidx.compose.material3.ButtonDefaults
0768. import androidx.compose.material3.MaterialTheme
0769. import androidx.compose.material3.Text
0770. import androidx.compose.runtime.Composable
0771. import androidx.compose.ui.Modifier
0772. import androidx.compose.ui.graphics.Color
0773. import androidx.compose.ui.unit.dp
0774. import com.example.iot_ha.ui.components.common.CustomOutlinedTextField
0775. 
0776. @Composable
0777. fun BrokerInputForm(
0778.     serverUri: String,
0779.     serverPort: String,
0780.     user: String,
0781.     password: String,
0782.     onServerUriChange: (String) -> Unit,
0783.     onServerPortChange: (String) -> Unit,
0784.     onUserChange: (String) -> Unit,
0785.     onPasswordChange: (String) -> Unit,
0786.     onAddBroker: () -> Unit
0787. ) {
0788.     Column(modifier = Modifier.fillMaxWidth()) {
0789.         CustomOutlinedTextField(
0790.             value = serverUri,
0791.             label = "Server URI",
0792.             onValueChange = onServerUriChange
0793.         )
0794.         CustomOutlinedTextField(
0795.             value = serverPort,
0796.             label = "Server Port",
0797.             onValueChange = onServerPortChange
0798.         )
0799.         CustomOutlinedTextField(
0800.             value = user,
0801.             label = "User (optional)",
0802.             onValueChange = onUserChange
0803.         )
0804.         CustomOutlinedTextField(
0805.             value = password,
0806.             label = "Password (optional)",
0807.             onValueChange = onPasswordChange
0808.         )
0809. 
0810.         Spacer(modifier = Modifier.height(12.dp))
0811. 
0812.         Button(
0813.             onClick = onAddBroker,
0814.             modifier = Modifier.fillMaxWidth(),
0815.             shape = RoundedCornerShape(12.dp),
0816.             colors = ButtonDefaults.buttonColors(containerColor = MaterialTheme.colorScheme.primary)
0817.         ) {
0818.             Text("Add broker", color = Color.White)
0819.         }
0820.     }
0821. }


BrokerItem.kt

0822. package com.example.iot_ha.ui.components.broker
0823. 
0824. import androidx.compose.foundation.layout.Arrangement
0825. import androidx.compose.foundation.layout.Column
0826. import androidx.compose.foundation.layout.Row
0827. import androidx.compose.foundation.layout.Spacer
0828. import androidx.compose.foundation.layout.fillMaxWidth
0829. import androidx.compose.foundation.layout.height
0830. import androidx.compose.foundation.layout.padding
0831. import androidx.compose.foundation.layout.width
0832. import androidx.compose.foundation.shape.RoundedCornerShape
0833. import androidx.compose.material3.Button
0834. import androidx.compose.material3.ButtonDefaults
0835. import androidx.compose.material3.Card
0836. import androidx.compose.material3.CardDefaults
0837. import androidx.compose.material3.MaterialTheme
0838. import androidx.compose.material3.OutlinedButton
0839. import androidx.compose.material3.Text
0840. import androidx.compose.runtime.Composable
0841. import androidx.compose.ui.Modifier
0842. import androidx.compose.ui.draw.shadow
0843. import androidx.compose.ui.graphics.Color
0844. import androidx.compose.ui.unit.dp
0845. import com.example.iot_ha.data.local.broker.Broker
0846. 
0847. @Composable
0848. fun BrokerItem(broker: Broker, onDelete: () -> Unit, onLogin: () -> Unit) {
0849.     Card(
0850.         modifier = Modifier
0851.             .fillMaxWidth()
0852.             .padding(6.dp)
0853.             .shadow(4.dp, shape = RoundedCornerShape(12.dp)),
0854.         elevation = CardDefaults.elevatedCardElevation(8.dp)
0855.     ) {
0856.         Column(modifier = Modifier.padding(12.dp)) {
0857.             Text(text = "URI: ${broker.serverUri}", style = MaterialTheme.typography.bodyLarge)
0858.             Text(text = "Port: ${broker.serverPort}", style = MaterialTheme.typography.bodyMedium)
0859.             broker.user?.let {
0860.                 Text(
0861.                     text = "User: $it",
0862.                     style = MaterialTheme.typography.bodyMedium
0863.                 )
0864.             }
0865.             broker.password?.let {
0866.                 Text(
0867.                     text = "Password: ${"*".repeat(it.length)}",
0868.                     style = MaterialTheme.typography.bodyMedium
0869.                 )
0870.             }
0871. 
0872.             Spacer(modifier = Modifier.height(8.dp))
0873. 
0874.             Row(
0875.                 modifier = Modifier.fillMaxWidth(),
0876.                 horizontalArrangement = Arrangement.SpaceBetween
0877.             ) {
0878.                 Button(
0879.                     onClick = onLogin,
0880.                     modifier = Modifier.weight(1f),
0881.                     shape = RoundedCornerShape(12.dp),
0882.                     colors = ButtonDefaults.buttonColors(containerColor = MaterialTheme.colorScheme.primary)
0883.                 ) {
0884.                     Text("Login", color = Color.White)
0885.                 }
0886.                 Spacer(modifier = Modifier.width(6.dp))
0887.                 OutlinedButton(
0888.                     onClick = onDelete,
0889.                     modifier = Modifier.weight(1f),
0890.                     shape = RoundedCornerShape(12.dp),
0891.                     colors = ButtonDefaults.outlinedButtonColors(contentColor = MaterialTheme.colorScheme.error)
0892.                 ) {
0893.                     Text("Delete")
0894.                 }
0895.             }
0896.         }
0897.     }
0898. }


BrokerList.kt

0899. package com.example.iot_ha.ui.components.broker
0900. 
0901. 
0902. import androidx.compose.foundation.layout.Spacer
0903. import androidx.compose.foundation.layout.height
0904. import androidx.compose.material3.MaterialTheme
0905. import androidx.compose.material3.Text
0906. import androidx.compose.runtime.Composable
0907. import androidx.compose.ui.Modifier
0908. import androidx.compose.ui.unit.dp
0909. import com.example.iot_ha.data.local.broker.Broker
0910. 
0911. @Composable
0912. fun BrokerList(
0913.     brokers: List<Broker>,
0914.     onDelete: (Broker) -> Unit,
0915.     onLogin: (Broker) -> Unit
0916. ) {
0917.     brokers.lastOrNull()?.let { broker ->
0918.         Text("Recently used broker:", style = MaterialTheme.typography.labelMedium)
0919.         Spacer(modifier = Modifier.height(1.dp))
0920.         BrokerItem(
0921.             broker = broker,
0922.             onDelete = { onDelete(broker) },
0923.             onLogin = { onLogin(broker) }
0924.         )
0925.     }
0926. }

CustomOutlinedTextField.kt

0927. package com.example.iot_ha.ui.components.common
0928. 
0929. import androidx.compose.foundation.layout.Spacer
0930. import androidx.compose.foundation.layout.fillMaxWidth
0931. import androidx.compose.foundation.layout.height
0932. import androidx.compose.foundation.shape.RoundedCornerShape
0933. import androidx.compose.material3.OutlinedTextField
0934. import androidx.compose.material3.Text
0935. import androidx.compose.runtime.Composable
0936. import androidx.compose.ui.Modifier
0937. import androidx.compose.ui.unit.dp
0938. 
0939. @Composable
0940. fun CustomOutlinedTextField(
0941.     value: String,
0942.     label: String,
0943.     onValueChange: (String) -> Unit,
0944. ) {
0945.     OutlinedTextField(
0946.         value = value,
0947.         onValueChange = onValueChange,
0948.         label = { Text(label) },
0949.         shape = RoundedCornerShape(12.dp),
0950.         modifier = Modifier.fillMaxWidth()
0951.     )
0952.     Spacer(modifier = Modifier.height(8.dp))
0953. }


TabButton.kt

0954. package com.example.iot_ha.ui.components.common
0955. 
0956. import androidx.compose.foundation.BorderStroke
0957. import androidx.compose.foundation.clickable
0958. import androidx.compose.foundation.layout.Arrangement
0959. import androidx.compose.foundation.layout.Row
0960. import androidx.compose.foundation.layout.height
0961. import androidx.compose.foundation.layout.padding
0962. import androidx.compose.foundation.shape.RoundedCornerShape
0963. import androidx.compose.material3.MaterialTheme
0964. import androidx.compose.material3.Surface
0965. import androidx.compose.material3.Text
0966. import androidx.compose.runtime.Composable
0967. import androidx.compose.ui.Alignment
0968. import androidx.compose.ui.Modifier
0969. import androidx.compose.ui.draw.clip
0970. import androidx.compose.ui.graphics.Color
0971. import androidx.compose.ui.text.font.FontWeight
0972. import androidx.compose.ui.unit.dp
0973. 
0974. @Composable
0975. fun TabButton(title: String, isSelected: Boolean, onClick: () -> Unit) {
0976.     val borderColor = if (isSelected) MaterialTheme.colorScheme.primary else Color.Transparent
0977.     val textColor = Color.Black
0978.     Surface(
0979.         modifier = Modifier
0980.             .padding(horizontal = 4.dp, vertical = 4.dp)
0981.             .height(40.dp)
0982.             .clip(RoundedCornerShape(8.dp))
0983.             .clickable { onClick() },
0984.         color = if (isSelected) MaterialTheme.colorScheme.primary.copy(alpha = 0.1f) else Color.Transparent,
0985.         shape = RoundedCornerShape(8.dp),
0986.         border = BorderStroke(if (isSelected) 2.dp else 0.dp, borderColor)
0987.     ) {
0988.         Row(
0989.             modifier = Modifier.padding(horizontal = 20.dp, vertical = 8.dp),
0990.             verticalAlignment = Alignment.CenterVertically,
0991.             horizontalArrangement = Arrangement.Center
0992.         ) {
0993.             Text(
0994.                 text = title,
0995.                 color = textColor,
0996.                 style = MaterialTheme.typography.labelLarge,
0997.                 fontWeight = if (isSelected) FontWeight.Bold else FontWeight.Normal
0998.             )
0999.         }
1000.     }
1001. }

DeviceCard.kt

1002. package com.example.iot_ha.ui.components.devices
1003. 
1004. import android.util.Log
1005. import androidx.compose.foundation.Image
1006. import androidx.compose.foundation.clickable
1007. import androidx.compose.foundation.layout.Column
1008. import androidx.compose.foundation.layout.Row
1009. import androidx.compose.foundation.layout.Spacer
1010. import androidx.compose.foundation.layout.fillMaxWidth
1011. import androidx.compose.foundation.layout.padding
1012. import androidx.compose.foundation.layout.size
1013. import androidx.compose.foundation.layout.width
1014. import androidx.compose.foundation.shape.RoundedCornerShape
1015. import androidx.compose.material3.Card
1016. import androidx.compose.material3.CardDefaults
1017. import androidx.compose.material3.DropdownMenuItem
1018. import androidx.compose.material3.ExperimentalMaterial3Api
1019. import androidx.compose.material3.ExposedDropdownMenuBox
1020. import androidx.compose.material3.ExposedDropdownMenuDefaults
1021. import androidx.compose.material3.Slider
1022. import androidx.compose.material3.SliderDefaults
1023. import androidx.compose.material3.Switch
1024. import androidx.compose.material3.SwitchDefaults
1025. import androidx.compose.material3.Text
1026. import androidx.compose.material3.TextField
1027. import androidx.compose.runtime.Composable
1028. import androidx.compose.runtime.getValue
1029. import androidx.compose.runtime.mutableFloatStateOf
1030. import androidx.compose.runtime.mutableStateOf
1031. import androidx.compose.runtime.remember
1032. import androidx.compose.runtime.setValue
1033. import androidx.compose.ui.Alignment
1034. import androidx.compose.ui.Modifier
1035. import androidx.compose.ui.draw.clip
1036. import androidx.compose.ui.graphics.Color
1037. import androidx.compose.ui.res.painterResource
1038. import androidx.compose.ui.text.font.FontWeight
1039. import androidx.compose.ui.unit.dp
1040. import androidx.compose.ui.unit.sp
1041. import androidx.navigation.NavHostController
1042. 
1043. @OptIn(ExperimentalMaterial3Api::class)
1044. @Composable
1045. fun DeviceCard(
1046.     deviceId: Int,
1047.     imageRes: Int,
1048.     name: String,
1049.     type: String? = null,
1050.     value: Any? = null,
1051.     navController: NavHostController,
1052.     onToggle: ((Boolean) -> Unit)? = null,
1053.     onSliderChange: ((Float) -> Unit)? = null,
1054.     onSelectChange: ((String) -> Unit)? = null,
1055.     options: List<String> = emptyList()
1056. ) {
1057.     var checked by remember { mutableStateOf(value as? Boolean ?: false) }
1058.     var sliderValue by remember { mutableFloatStateOf(value as? Float ?: 0f) }
1059.     var selectedOption by remember {
1060.         mutableStateOf(value as? String ?: options.firstOrNull().orEmpty())
1061.     }
1062.     var expanded by remember { mutableStateOf(false) }
1063. 
1064.     Card(
1065.         shape = RoundedCornerShape(16.dp),
1066.         modifier = Modifier
1067.             .fillMaxWidth()
1068.             .padding(8.dp)
1069.             .clickable { navController.navigate("device_details/$deviceId") },
1070.         elevation = CardDefaults.cardElevation(6.dp)
1071.     ) {
1072.         Row(
1073.             verticalAlignment = Alignment.CenterVertically,
1074.             modifier = Modifier.padding(16.dp)
1075.         ) {
1076.             Image(
1077.                 painter = painterResource(id = imageRes),
1078.                 contentDescription = name,
1079.                 modifier = Modifier
1080.                     .size(64.dp)
1081.                     .clip(RoundedCornerShape(12.dp))
1082.             )
1083.             Spacer(modifier = Modifier.width(16.dp))
1084.             Column(modifier = Modifier.weight(1f)) {
1085.                 Text(
1086.                     text = name,
1087.                     fontSize = 20.sp,
1088.                     fontWeight = FontWeight.Bold,
1089.                     color = Color.Black
1090.                 )
1091. 
1092.                 when (type) {
1093.                     "switch" -> Switch(
1094.                         checked = checked,
1095.                         onCheckedChange = {
1096.                             checked = it
1097.                             onToggle?.invoke(it)
1098.                         },
1099.                         colors = SwitchDefaults.colors(
1100.                             checkedThumbColor = Color.White,
1101.                             checkedTrackColor = Color(0xFF4CAF50),
1102.                             uncheckedThumbColor = Color.White,
1103.                             uncheckedTrackColor = Color(0xFFF44336)
1104.                         )
1105.                     )
1106. 
1107.                     "slider" -> Slider(
1108.                         value = sliderValue,
1109.                         onValueChange = {
1110.                             sliderValue = it
1111.                             onSliderChange?.invoke(it)
1112.                         },
1113.                         valueRange = 0f..100f,
1114.                         colors = SliderDefaults.colors(
1115.                             thumbColor = Color(0xFF8A9F9B),
1116.                             activeTrackColor = Color(0xFFA6B6A9)
1117.                         )
1118.                     )
1119. 
1120.                     "select" -> ExposedDropdownMenuBox(
1121.                         expanded = expanded,
1122.                         onExpandedChange = { expanded = it }
1123.                     ) {
1124.                         TextField(
1125.                             value = selectedOption,
1126.                             onValueChange = {},
1127.                             readOnly = true,
1128.                             modifier = Modifier.menuAnchor(),
1129.                             label = { Text("Выберите") },
1130.                             trailingIcon = { ExposedDropdownMenuDefaults.TrailingIcon(expanded = expanded) }
1131.                         )
1132.                         ExposedDropdownMenu(
1133.                             expanded = expanded,
1134.                             onDismissRequest = { expanded = false }
1135.                         ) {
1136.                             options.forEach { option ->
1137.                                 DropdownMenuItem(
1138.                                     text = { Text(option) },
1139.                                     onClick = {
1140.                                         selectedOption = option
1141.                                         expanded = false
1142.                                         onSelectChange?.invoke(option)
1143.                                     }
1144.                                 )
1145.                             }
1146.                         }
1147.                     }
1148. 
1149.                     else -> {
1150.                         value?.let {
1151.                             Text(text = it.toString(), fontSize = 14.sp, color = Color.Black)
1152.                         }
1153.                     }
1154.                 }
1155.             }
1156.         }
1157.     }
1158. }
1159. 


DeviceDetails.kt

1160. package com.example.iot_ha.ui.components.devices
1161. 
1162. import androidx.compose.foundation.background
1163. import androidx.compose.foundation.layout.Arrangement
1164. import androidx.compose.foundation.layout.Box
1165. import androidx.compose.foundation.layout.Column
1166. import androidx.compose.foundation.layout.Row
1167. import androidx.compose.foundation.layout.fillMaxWidth
1168. import androidx.compose.foundation.layout.padding
1169. import androidx.compose.foundation.shape.RoundedCornerShape
1170. import androidx.compose.material3.MaterialTheme
1171. import androidx.compose.material3.Text
1172. import androidx.compose.runtime.Composable
1173. import androidx.compose.ui.Alignment
1174. import androidx.compose.ui.Modifier
1175. import androidx.compose.ui.draw.clip
1176. import androidx.compose.ui.unit.dp
1177. import androidx.compose.ui.unit.sp
1178. 
1179. @Composable
1180. fun DeviceDetails(deviceData: Map<String, Any>) {
1181.     Column(modifier = Modifier.fillMaxWidth()) {
1182.         deviceData.forEach { (key, value) ->
1183.             Box(
1184.                 modifier = Modifier
1185.                     .fillMaxWidth()
1186.                     .padding(vertical = 4.dp)
1187.                     .clip(RoundedCornerShape(12.dp))
1188.                     .background(MaterialTheme.colorScheme.surfaceVariant)
1189.                     .padding(12.dp)
1190.             ) {
1191.                 Row(
1192.                     modifier = Modifier.fillMaxWidth(),
1193.                     horizontalArrangement = Arrangement.SpaceBetween,
1194.                     verticalAlignment = Alignment.CenterVertically
1195.                 ) {
1196.                     Text(
1197.                         text = key.replaceFirstChar { if (it.isLowerCase()) it.titlecase() else it.toString() },
1198.                         style = MaterialTheme.typography.bodyLarge.copy(fontSize = 16.sp),
1199.                         color = MaterialTheme.colorScheme.onSurfaceVariant
1200.                     )
1201.                     Text(
1202.                         text = value.toString(),
1203.                         style = MaterialTheme.typography.bodyLarge.copy(fontSize = 16.sp),
1204.                         color = MaterialTheme.colorScheme.onSurfaceVariant
1205.                     )
1206.                 }
1207.             }
1208.         }
1209.     }
1210. }


DeviceNotFound.kt

1211. package com.example.iot_ha.ui.components.devices
1212. 
1213. import androidx.compose.foundation.layout.Box
1214. import androidx.compose.foundation.layout.fillMaxSize
1215. import androidx.compose.material3.MaterialTheme
1216. import androidx.compose.material3.Text
1217. import androidx.compose.runtime.Composable
1218. import androidx.compose.ui.Alignment
1219. import androidx.compose.ui.Modifier
1220. 
1221. @Composable
1222. fun DeviceNotFoundMessage() {
1223.     Box(
1224.         modifier = Modifier.fillMaxSize(),
1225.         contentAlignment = Alignment.Center
1226.     ) {
1227.         Text(
1228.             text = "Device not found",
1229.             style = MaterialTheme.typography.bodyLarge,
1230.             color = MaterialTheme.colorScheme.error
1231.         )
1232.     }
1233. }

DeviceTitle.kt

1234. package com.example.iot_ha.ui.components.devices
1235. 
1236. import androidx.compose.foundation.layout.Row
1237. import androidx.compose.foundation.layout.fillMaxWidth
1238. import androidx.compose.foundation.layout.padding
1239. import androidx.compose.foundation.layout.statusBarsPadding
1240. import androidx.compose.material.icons.Icons
1241. import androidx.compose.material.icons.filled.Edit
1242. import androidx.compose.material3.Icon
1243. import androidx.compose.material3.IconButton
1244. import androidx.compose.material3.MaterialTheme
1245. import androidx.compose.material3.Text
1246. import androidx.compose.runtime.Composable
1247. import androidx.compose.ui.Alignment
1248. import androidx.compose.ui.Modifier
1249. import androidx.compose.ui.unit.dp
1250. 
1251. @Composable
1252. fun DeviceTitle(
1253.     friendlyName: String,
1254.     onEditClick: () -> Unit
1255. ) {
1256.     Row(
1257.         verticalAlignment = Alignment.CenterVertically,
1258.         modifier = Modifier.fillMaxWidth()
1259.     ) {
1260.         Text(
1261.             text = friendlyName,
1262.             style = MaterialTheme.typography.headlineMedium,
1263.             modifier = Modifier.weight(1f)
1264.         )
1265.         IconButton(
1266.             onClick = onEditClick,
1267.             modifier = Modifier.padding(start = 8.dp)
1268.         ) {
1269.             Icon(
1270.                 imageVector = Icons.Default.Edit,
1271.                 contentDescription = "Edit device name"
1272.             )
1273.         }
1274.     }
1275. }

AddRoomDialog.kt

1276. package com.example.iot_ha.ui.components.rooms
1277. 
1278. import androidx.compose.foundation.layout.Column
1279. import androidx.compose.material3.AlertDialog
1280. import androidx.compose.material3.Button
1281. import androidx.compose.material3.Text
1282. import androidx.compose.runtime.Composable
1283. import androidx.compose.runtime.getValue
1284. import androidx.compose.runtime.mutableStateOf
1285. import androidx.compose.runtime.remember
1286. import androidx.compose.runtime.setValue
1287. import com.example.iot_ha.ui.components.common.CustomOutlinedTextField
1288. 
1289. @Composable
1290. fun AddRoomDialog(
1291.     onDismiss: () -> Unit,
1292.     onConfirm: (String) -> Unit
1293. ) {
1294.     var roomName by remember { mutableStateOf("") }
1295. 
1296.     AlertDialog(
1297.         onDismissRequest = onDismiss,
1298.         confirmButton = {
1299.             Button(onClick = {
1300.                 if (roomName.isNotBlank()) {
1301.                     onConfirm(roomName)
1302.                     onDismiss()
1303.                 }
1304.             }) {
1305.                 Text("Добавить")
1306.             }
1307.         },
1308.         dismissButton = {
1309.             Button(onClick = onDismiss) {
1310.                 Text("Отмена")
1311.             }
1312.         },
1313.         title = { Text("Добавить комнату") },
1314.         text = {
1315.             Column {
1316.                 Text("Введите название комнаты:")
1317.                 CustomOutlinedTextField(
1318.                     value = roomName,
1319.                     label = "Название комнаты",
1320.                     onValueChange = { roomName = it }
1321.                 )
1322.             }
1323.         }
1324.     )
1325. }


RoomCard.kt

1326. package com.example.iot_ha.ui.components.rooms
1327. 
1328. import androidx.compose.foundation.Image
1329. import androidx.compose.foundation.background
1330. import androidx.compose.foundation.clickable
1331. import androidx.compose.foundation.layout.Box
1332. import androidx.compose.foundation.layout.Column
1333. import androidx.compose.foundation.layout.Row
1334. import androidx.compose.foundation.layout.Spacer
1335. import androidx.compose.foundation.layout.fillMaxWidth
1336. import androidx.compose.foundation.layout.padding
1337. import androidx.compose.foundation.layout.size
1338. import androidx.compose.foundation.layout.width
1339. import androidx.compose.foundation.shape.RoundedCornerShape
1340. import androidx.compose.material.icons.Icons
1341. import androidx.compose.material.icons.filled.Delete
1342. import androidx.compose.material3.Card
1343. import androidx.compose.material3.CardDefaults
1344. import androidx.compose.material3.Icon
1345. import androidx.compose.material3.IconButton
1346. import androidx.compose.material3.MaterialTheme
1347. import androidx.compose.material3.Text
1348. import androidx.compose.runtime.Composable
1349. import androidx.compose.ui.Alignment
1350. import androidx.compose.ui.Modifier
1351. import androidx.compose.ui.draw.clip
1352. import androidx.compose.ui.graphics.Color
1353. import androidx.compose.ui.res.painterResource
1354. import androidx.compose.ui.text.font.FontWeight
1355. import androidx.compose.ui.unit.dp
1356. import androidx.compose.ui.unit.sp
1357. import androidx.navigation.NavHostController
1358. import com.example.iot_ha.R
1359. 
1360. @Composable
1361. fun RoomCard(
1362.     roomId: Int,
1363.     roomName: String,
1364.     deviceCount: Int,
1365.     navHostController: NavHostController,
1366.     onDelete: (Int) -> Unit
1367. ) {
1368.     Card(
1369.         shape = RoundedCornerShape(16.dp),
1370.         modifier = Modifier
1371.             .fillMaxWidth()
1372.             .padding(8.dp)
1373.             .clickable { navHostController.navigate("room_details/$roomId") },
1374.         elevation = CardDefaults.cardElevation(6.dp),
1375.         colors = CardDefaults.cardColors(containerColor = Color(0xFFE3F2FD))
1376.     ) {
1377.         Row(
1378.             verticalAlignment = Alignment.CenterVertically,
1379.             modifier = Modifier.padding(16.dp)
1380.         ) {
1381.             Image(
1382.                 painter = painterResource(id = R.drawable.mqtt_logo),
1383.                 contentDescription = roomName,
1384.                 modifier = Modifier
1385.                     .size(64.dp)
1386.                     .clip(RoundedCornerShape(12.dp))
1387.             )
1388.             Spacer(modifier = Modifier.width(16.dp))
1389.             Column(modifier = Modifier.weight(1f)) {
1390.                 Text(
1391.                     text = roomName,
1392.                     fontSize = 20.sp,
1393.                     fontWeight = FontWeight.Bold,
1394.                     color = Color.Black
1395.                 )
1396.             }
1397.             Spacer(modifier = Modifier.width(16.dp))
1398.             Box(
1399.                 contentAlignment = Alignment.Center,
1400.                 modifier = Modifier
1401.                     .size(32.dp)
1402.                     .clip(RoundedCornerShape(16.dp))
1403.                     .background(MaterialTheme.colorScheme.primary)
1404.             ) {
1405.                 Text(
1406.                     text = deviceCount.toString(),
1407.                     color = Color.White,
1408.                     fontSize = 14.sp,
1409.                     fontWeight = FontWeight.Bold
1410.                 )
1411.             }
1412.             Spacer(modifier = Modifier.width(8.dp))
1413.             IconButton(onClick = { onDelete(roomId) }) {
1414.                 Icon(imageVector = Icons.Default.Delete, contentDescription = "Удалить комнату", tint = Color.Red)
1415.             }
1416.         }
1417.     }
1418. }


BrightnessCard.kt

1419. package com.example.iot_ha.ui.components.settings.led
1420. 
1421. import androidx.compose.foundation.background
1422. import androidx.compose.foundation.border
1423. import androidx.compose.foundation.layout.Box
1424. import androidx.compose.foundation.layout.Column
1425. import androidx.compose.foundation.layout.Row
1426. import androidx.compose.foundation.layout.Spacer
1427. import androidx.compose.foundation.layout.fillMaxWidth
1428. import androidx.compose.foundation.layout.height
1429. import androidx.compose.foundation.layout.padding
1430. import androidx.compose.foundation.layout.size
1431. import androidx.compose.foundation.layout.width
1432. import androidx.compose.material3.Card
1433. import androidx.compose.material3.MaterialTheme
1434. import androidx.compose.material3.Slider
1435. import androidx.compose.material3.Text
1436. import androidx.compose.runtime.Composable
1437. import androidx.compose.ui.Alignment
1438. import androidx.compose.ui.Modifier
1439. import androidx.compose.ui.graphics.Color
1440. import androidx.compose.ui.unit.dp
1441. 
1442. @Composable
1443. fun BrigtnessCard(
1444.     title: String,
1445.     color: Color,
1446.     value: Float,
1447.     onValueChange: (Float) -> Unit,
1448.     onValueChangeFinished: () -> Unit
1449. ) {
1450.     Card(
1451.         modifier = Modifier
1452.             .fillMaxWidth()
1453.             .padding(8.dp),
1454.         shape = MaterialTheme.shapes.medium
1455.     ) {
1456.         Column(
1457.             modifier = Modifier
1458.                 .padding(16.dp)
1459.         ) {
1460.             Text(text = title, style = MaterialTheme.typography.bodyLarge)
1461. 
1462.             Spacer(modifier = Modifier.height(8.dp))
1463. 
1464.             Row(
1465.                 verticalAlignment = Alignment.CenterVertically,
1466.                 modifier = Modifier.fillMaxWidth()
1467.             ) {
1468.                 Box(
1469.                     modifier = Modifier
1470.                         .size(40.dp)
1471.                         .background(color)
1472.                         .border(2.dp, Color.Black)
1473.                 )
1474. 
1475.                 Spacer(modifier = Modifier.width(16.dp))
1476. 
1477.                 Slider(
1478.                     value = value,
1479.                     onValueChange = onValueChange,
1480.                     onValueChangeFinished = onValueChangeFinished,
1481.                     valueRange = 0f..255f,
1482.                     modifier = Modifier.fillMaxWidth()
1483.                 )
1484.             }
1485.         }
1486.     }
1487. }

ColorsCard.kt

1488. package com.example.iot_ha.ui.components.settings.led
1489. 
1490. import androidx.compose.foundation.background
1491. import androidx.compose.foundation.border
1492. import androidx.compose.foundation.layout.Box
1493. import androidx.compose.foundation.layout.Column
1494. import androidx.compose.foundation.layout.Row
1495. import androidx.compose.foundation.layout.Spacer
1496. import androidx.compose.foundation.layout.fillMaxWidth
1497. import androidx.compose.foundation.layout.height
1498. import androidx.compose.foundation.layout.padding
1499. import androidx.compose.foundation.layout.size
1500. import androidx.compose.foundation.layout.width
1501. import androidx.compose.material3.Card
1502. import androidx.compose.material3.MaterialTheme
1503. import androidx.compose.material3.Slider
1504. import androidx.compose.material3.Text
1505. import androidx.compose.runtime.Composable
1506. import androidx.compose.ui.Alignment
1507. import androidx.compose.ui.Modifier
1508. import androidx.compose.ui.graphics.Color
1509. import androidx.compose.ui.unit.dp
1510. 
1511. @Composable
1512. fun ColorsCard(
1513.     red: Float,
1514.     green: Float,
1515.     blue: Float,
1516.     onRedChange: (Float) -> Unit,
1517.     onGreenChange: (Float) -> Unit,
1518.     onBlueChange: (Float) -> Unit,
1519.     onValueChangeFinished: () -> Unit
1520. ) {
1521.     Card(
1522.         modifier = Modifier
1523.             .fillMaxWidth()
1524.             .padding(8.dp),
1525.         shape = MaterialTheme.shapes.medium
1526.     ) {
1527.         Column(
1528.             modifier = Modifier
1529.                 .padding(16.dp)
1530.         ) {
1531.             Text(text = "Colors Status", style = MaterialTheme.typography.bodyLarge)
1532. 
1533.             Spacer(modifier = Modifier.height(8.dp))
1534. 
1535.             listOf(
1536.                 Triple("Red", Color(red / 255f, 0f, 0f), onRedChange to red),
1537.                 Triple("Green", Color(0f, green / 255f, 0f), onGreenChange to green),
1538.                 Triple("Blue", Color(0f, 0f, blue / 255f), onBlueChange to blue)
1539.             ).forEach { (label, color, setterWithValue) ->
1540.                 val (setter, value) = setterWithValue
1541. 
1542.                 Row(
1543.                     verticalAlignment = Alignment.CenterVertically,
1544.                     modifier = Modifier.fillMaxWidth()
1545.                 ) {
1546.                     Box(
1547.                         modifier = Modifier
1548.                             .size(20.dp)
1549.                             .background(color)
1550.                             .border(1.dp, Color.Black)
1551.                     )
1552. 
1553.                     Spacer(modifier = Modifier.width(8.dp))
1554. 
1555.                     Column(modifier = Modifier.weight(1f)) {
1556.                         Text(text = label)
1557.                         Slider(
1558.                             value = value,
1559.                             onValueChange = setter,
1560.                             onValueChangeFinished = onValueChangeFinished,
1561.                             valueRange = 0f..255f,
1562.                             modifier = Modifier.fillMaxWidth()
1563.                         )
1564.                     }
1565.                 }
1566.                 Spacer(modifier = Modifier.height(8.dp))
1567.             }
1568.         }
1569.     }
1570. }


AppNavHost.kt

1571. package com.example.iot_ha.ui.navigation
1572. 
1573. import com.example.iot_ha.ui.screens.home.settings.LEDScreen
1574. import androidx.compose.runtime.Composable
1575. import androidx.compose.ui.platform.LocalContext
1576. import androidx.lifecycle.viewmodel.compose.viewModel
1577. import androidx.navigation.NavHostController
1578. import androidx.navigation.compose.NavHost
1579. import androidx.navigation.compose.composable
1580. import com.example.iot_ha.data.local.RoomLocalDatabase
1581. import com.example.iot_ha.ui.screens.AuthorizationScreen
1582. import com.example.iot_ha.ui.screens.HomeScreen
1583. import com.example.iot_ha.ui.screens.home.DeviceDetailScreen
1584. import com.example.iot_ha.ui.screens.home.RoomDetailScreen
1585. import com.example.iot_ha.ui.viewmodels.factory.DevicesViewModelFactory
1586. import com.example.iot_ha.ui.viewmodels.factory.RoomsViewModelFactory
1587. import com.example.iot_ha.ui.viewmodels.factory.SensorsViewModelFactory
1588. import com.example.iot_ha.ui.viewmodels.shared.DevicesViewModel
1589. import com.example.iot_ha.ui.viewmodels.shared.RoomsViewModel
1590. import com.example.iot_ha.ui.viewmodels.shared.SensorsViewModel
1591. 
1592. @Composable
1593. fun AppNavHost(
1594.     navController: NavHostController,
1595.     startDestination: String
1596. ) {
1597.     val db = RoomLocalDatabase.getInstance(LocalContext.current)
1598. 
1599.     val sensorsViewModel: SensorsViewModel = viewModel(factory = SensorsViewModelFactory())
1600.     val devicesViewModel: DevicesViewModel = viewModel(factory = DevicesViewModelFactory(db))
1601.     val roomsViewModel: RoomsViewModel = viewModel(factory = RoomsViewModelFactory(db))
1602. 
1603.     NavHost(navController = navController, startDestination = startDestination) {
1604.         composable(Routes.AUTH_SCREEN) {
1605.             AuthorizationScreen(
1606.                 navHostController = navController,
1607.                 sensorsViewModel = sensorsViewModel,
1608.                 devicesViewModel = devicesViewModel
1609.             )
1610.         }
1611. 
1612.         composable(Routes.HOME_SCREEN) {
1613.             HomeScreen(
1614.                 navHostController = navController,
1615.                 devicesViewModel = devicesViewModel,
1616.                 roomsViewModel = roomsViewModel
1617.             )
1618.         }
1619. 
1620.         composable(Routes.DEVICE_DETAILS_SCREEN) { backStackEntry ->
1621.             DeviceDetailScreen(
1622.                 backStackEntry = backStackEntry,
1623.                 devicesViewModel = devicesViewModel,
1624.                 roomsViewModel = roomsViewModel
1625.             )
1626.         }
1627. 
1628.         composable(Routes.ROOM_DETAILS_SCREEN) { backStackEntry ->
1629.             RoomDetailScreen(
1630.                 backStackEntry = backStackEntry,
1631.                 navHostController = navController,
1632.                 devicesViewModel = devicesViewModel,
1633.                 roomsViewModel = roomsViewModel
1634.             )
1635.         }
1636. 
1637.         composable(Routes.LED_SETTINGS_SCREEN) {
1638.             com.example.iot_ha.ui.screens.home.settings.LEDScreen()
1639.         }
1640.     }
1641. }
1642. 


Routes.kt

1643. package com.example.iot_ha.ui.navigation
1644. 
1645. object Routes {
1646.     const val AUTH_SCREEN = "auth"
1647.     const val HOME_SCREEN = "home"
1648. 
1649.     const val DEVICE_DETAILS_SCREEN = "device_details/{deviceId}"
1650.     const val ROOM_DETAILS_SCREEN = "room_details/{roomId}"
1651. 
1652.     const val LED_SETTINGS_SCREEN = "home/led"
1653. }

AuthorizationScreen.kt

1654. package com.example.iot_ha.ui.screens
1655. 
1656. import androidx.compose.foundation.Image
1657. import androidx.compose.foundation.layout.Column
1658. import androidx.compose.foundation.layout.Spacer
1659. import androidx.compose.foundation.layout.aspectRatio
1660. import androidx.compose.foundation.layout.fillMaxSize
1661. import androidx.compose.foundation.layout.fillMaxWidth
1662. import androidx.compose.foundation.layout.height
1663. import androidx.compose.foundation.layout.padding
1664. import androidx.compose.foundation.shape.RoundedCornerShape
1665. import androidx.compose.runtime.Composable
1666. import androidx.compose.runtime.getValue
1667. import androidx.compose.runtime.mutableStateOf
1668. import androidx.compose.runtime.remember
1669. import androidx.compose.runtime.setValue
1670. import androidx.compose.ui.Alignment
1671. import androidx.compose.ui.Modifier
1672. import androidx.compose.ui.draw.clip
1673. import androidx.compose.ui.platform.LocalContext
1674. import androidx.compose.ui.res.painterResource
1675. import androidx.compose.ui.unit.dp
1676. import androidx.lifecycle.viewmodel.compose.viewModel
1677. import androidx.navigation.NavHostController
1678. import com.example.iot_ha.R
1679. import com.example.iot_ha.data.local.RoomLocalDatabase
1680. import com.example.iot_ha.data.mqtt.domain.MQTTMessageHandler
1681. import com.example.iot_ha.ui.components.broker.BrokerInputForm
1682. import com.example.iot_ha.ui.components.broker.BrokerList
1683. import com.example.iot_ha.ui.viewmodels.AuthorizationViewModel
1684. import com.example.iot_ha.ui.viewmodels.factory.AuthorizationViewModelFactory
1685. import com.example.iot_ha.ui.viewmodels.shared.DevicesViewModel
1686. import com.example.iot_ha.ui.viewmodels.shared.SensorsViewModel
1687. 
1688. @Composable
1689. fun AuthorizationScreen(
1690.     navHostController: NavHostController,
1691.     sensorsViewModel: SensorsViewModel,
1692.     devicesViewModel: DevicesViewModel
1693. ) {
1694.     var serverUri by remember { mutableStateOf("") }
1695.     var serverPort by remember { mutableStateOf("") }
1696.     var user by remember { mutableStateOf("") }
1697.     var password by remember { mutableStateOf("") }
1698. 
1699.     val db = RoomLocalDatabase.getInstance(LocalContext.current)
1700.     val messageHandler = remember { MQTTMessageHandler(sensorsViewModel, devicesViewModel) }
1701.     val authorizationViewModel: AuthorizationViewModel =
1702.         viewModel(factory = AuthorizationViewModelFactory(db, messageHandler))
1703. 
1704.     val brokers = authorizationViewModel.brokers.value
1705. 
1706.     Column(
1707.         modifier = Modifier
1708.             .fillMaxSize()
1709.             .padding(horizontal = 16.dp),
1710.         horizontalAlignment = Alignment.CenterHorizontally
1711.     ) {
1712.         Spacer(modifier = Modifier.height(40.dp))
1713. 
1714.         Image(
1715.             painter = painterResource(id = R.drawable.mqtt_logo),
1716.             contentDescription = "Broker Logo",
1717.             modifier = Modifier
1718.                 .fillMaxWidth()
1719.                 .padding(horizontal = 16.dp)
1720.                 .aspectRatio(4f)
1721.                 .clip(RoundedCornerShape(12.dp)),
1722.         )
1723. 
1724.         Spacer(modifier = Modifier.height(50.dp))
1725. 
1726.         BrokerInputForm(
1727.             serverUri = serverUri,
1728.             serverPort = serverPort,
1729.             user = user,
1730.             password = password,
1731.             onServerUriChange = { serverUri = it },
1732.             onServerPortChange = { serverPort = it },
1733.             onUserChange = { user = it },
1734.             onPasswordChange = { password = it },
1735.             onAddBroker = {
1736.                 authorizationViewModel.addBroker(
1737.                     serverUri,
1738.                     serverPort.toIntOrNull() ?: 1883,
1739.                     user.takeIf { it.isNotBlank() },
1740.                     password.takeIf { it.isNotBlank() }
1741.                 )
1742.                 serverUri = ""
1743.                 serverPort = ""
1744.                 user = ""
1745.                 password = ""
1746.             }
1747.         )
1748. 
1749.         Spacer(modifier = Modifier.height(16.dp))
1750. 
1751.         BrokerList(
1752.             brokers = brokers,
1753.             onDelete = { authorizationViewModel.deleteBroker(it) },
1754.             onLogin = { broker ->
1755.                 authorizationViewModel.handleLogin(broker) {
1756.                     navHostController.navigate("home")
1757.                 }
1758.             }
1759.         )
1760.     }
1761. }


HomeScreen.kt

1762. package com.example.iot_ha.ui.screens
1763. 
1764. import androidx.compose.animation.AnimatedContent
1765. import androidx.compose.animation.ExperimentalAnimationApi
1766. import androidx.compose.animation.fadeIn
1767. import androidx.compose.animation.fadeOut
1768. import androidx.compose.animation.slideInHorizontally
1769. import androidx.compose.animation.slideOutHorizontally
1770. import androidx.compose.animation.togetherWith
1771. import androidx.compose.foundation.background
1772. import androidx.compose.foundation.layout.Arrangement
1773. import androidx.compose.foundation.layout.Column
1774. import androidx.compose.foundation.layout.PaddingValues
1775. import androidx.compose.foundation.layout.Spacer
1776. import androidx.compose.foundation.layout.fillMaxSize
1777. import androidx.compose.foundation.layout.fillMaxWidth
1778. import androidx.compose.foundation.layout.height
1779. import androidx.compose.foundation.layout.padding
1780. import androidx.compose.foundation.layout.statusBarsPadding
1781. import androidx.compose.foundation.lazy.LazyRow
1782. import androidx.compose.foundation.lazy.itemsIndexed
1783. import androidx.compose.runtime.Composable
1784. import androidx.compose.runtime.getValue
1785. import androidx.compose.runtime.mutableIntStateOf
1786. import androidx.compose.runtime.remember
1787. import androidx.compose.runtime.setValue
1788. import androidx.compose.ui.Modifier
1789. import androidx.compose.ui.graphics.Color
1790. import androidx.compose.ui.unit.dp
1791. import androidx.navigation.NavHostController
1792. import com.example.iot_ha.ui.components.common.TabButton
1793. import com.example.iot_ha.ui.screens.home.DevicesScreen
1794. import com.example.iot_ha.ui.screens.home.RoomsScreen
1795. import com.example.iot_ha.ui.screens.home.SettingsScreen
1796. import com.example.iot_ha.ui.viewmodels.shared.DevicesViewModel
1797. import com.example.iot_ha.ui.viewmodels.shared.RoomsViewModel
1798. import com.example.iot_ha.utils.Constants
1799. 
1800. @OptIn(ExperimentalAnimationApi::class)
1801. @Composable
1802. fun HomeScreen(
1803.     navHostController: NavHostController,
1804.     devicesViewModel: DevicesViewModel,
1805.     roomsViewModel: RoomsViewModel
1806. ) {
1807.     var selectedTab by remember { mutableIntStateOf(0) }
1808.     var previousTab by remember { mutableIntStateOf(0) }
1809. 
1810.     Column(
1811.         modifier = Modifier
1812.             .fillMaxSize()
1813.             .statusBarsPadding()
1814.             .background(Color.White)
1815.     ) {
1816.         LazyRow(
1817.             modifier = Modifier
1818.                 .fillMaxWidth()
1819.                 .padding(vertical = 12.dp, horizontal = 8.dp),
1820.             contentPadding = PaddingValues(horizontal = 8.dp),
1821.             horizontalArrangement = Arrangement.spacedBy(8.dp)
1822.         ) {
1823.             itemsIndexed(Constants.TABS_LIST) { index, title ->
1824.                 TabButton(
1825.                     title = title,
1826.                     isSelected = selectedTab == index,
1827.                     onClick = {
1828.                         previousTab = selectedTab
1829.                         selectedTab = index
1830.                     }
1831.                 )
1832.             }
1833.         }
1834. 
1835.         Spacer(modifier = Modifier.height(8.dp))
1836. 
1837.         AnimatedContent(
1838.             targetState = selectedTab,
1839.             transitionSpec = {
1840.                 if (targetState > previousTab) {
1841.                     slideInHorizontally { width -> width } + fadeIn() togetherWith
1842.                             slideOutHorizontally { width -> -width } + fadeOut()
1843.                 } else {
1844.                     slideInHorizontally { width -> -width } + fadeIn() togetherWith
1845.                             slideOutHorizontally { width -> width } + fadeOut()
1846.                 }
1847.             },
1848.             label = "Tab Animation"
1849.         ) { tab ->
1850.             when (tab) {
1851.                 0 -> DevicesScreen(
1852.                     navHostController = navHostController,
1853.                     devicesViewModel = devicesViewModel
1854.                 )
1855. 
1856.                 1 -> RoomsScreen(
1857.                     navHostController = navHostController,
1858.                     roomsViewModel = roomsViewModel
1859.                 )
1860. 
1861. //                2 -> ScheduleScreen()
1862. 
1863.                 2 -> SettingsScreen(
1864.                     navHostController = navHostController
1865.                 )
1866. 
1867.             }
1868.         }
1869.     }
1870. }

DeviceDetailScreen.kt

1871. package com.example.iot_ha.ui.screens.home
1872. 
1873. import androidx.compose.foundation.layout.Column
1874. import androidx.compose.foundation.layout.Spacer
1875. import androidx.compose.foundation.layout.fillMaxSize
1876. import androidx.compose.foundation.layout.fillMaxWidth
1877. import androidx.compose.foundation.layout.height
1878. import androidx.compose.foundation.layout.padding
1879. import androidx.compose.material3.AlertDialog
1880. import androidx.compose.material3.DropdownMenuItem
1881. import androidx.compose.material3.ExperimentalMaterial3Api
1882. import androidx.compose.material3.ExposedDropdownMenuBox
1883. import androidx.compose.material3.ExposedDropdownMenuDefaults
1884. import androidx.compose.material3.MaterialTheme
1885. import androidx.compose.material3.OutlinedTextField
1886. import androidx.compose.material3.Surface
1887. import androidx.compose.material3.Text
1888. import androidx.compose.material3.TextButton
1889. import androidx.compose.runtime.Composable
1890. import androidx.compose.runtime.collectAsState
1891. import androidx.compose.runtime.getValue
1892. import androidx.compose.runtime.mutableStateOf
1893. import androidx.compose.runtime.remember
1894. import androidx.compose.runtime.setValue
1895. import androidx.compose.ui.Alignment
1896. import androidx.compose.ui.Modifier
1897. import androidx.compose.ui.unit.dp
1898. import androidx.navigation.NavBackStackEntry
1899. import com.example.iot_ha.data.local.device.DeviceState
1900. import com.example.iot_ha.ui.components.devices.DeviceDetails
1901. import com.example.iot_ha.ui.components.devices.DeviceNotFoundMessage
1902. import com.example.iot_ha.ui.components.devices.DeviceTitle
1903. import com.example.iot_ha.ui.viewmodels.shared.DevicesViewModel
1904. import com.example.iot_ha.ui.viewmodels.shared.RoomsViewModel
1905. 
1906. @OptIn(ExperimentalMaterial3Api::class)
1907. @Composable
1908. fun DeviceDetailScreen(
1909.     backStackEntry: NavBackStackEntry,
1910.     devicesViewModel: DevicesViewModel,
1911.     roomsViewModel: RoomsViewModel
1912. ) {
1913.     val deviceId = backStackEntry.arguments?.getString("deviceId")?.toIntOrNull() ?: -1
1914. 
1915.     val devices by devicesViewModel.devices.collectAsState()
1916.     val deviceState by DeviceState.devicesData.collectAsState()
1917.     val deviceData = deviceState[deviceId]
1918. 
1919.     val rooms by roomsViewModel.rooms.collectAsState()
1920.     val device = devices.find { it.id == deviceId }
1921.     val currentRoom = rooms.find { it.id == device?.roomId }
1922.     var selectedRoom by remember { mutableStateOf(currentRoom?.name ?: "Select room") }
1923.     var expanded by remember { mutableStateOf(false) }
1924. 
1925.     var showEditDialog by remember { mutableStateOf(false) }
1926.     var newName by remember { mutableStateOf(device?.friendlyName ?: "") }
1927. 
1928.     if (showEditDialog) {
1929.         AlertDialog(
1930.             onDismissRequest = { showEditDialog = false },
1931.             title = { Text("Edit device name") },
1932.             text = {
1933.                 OutlinedTextField(
1934.                     value = newName,
1935.                     onValueChange = { newName = it },
1936.                     label = { Text("New name") }
1937.                 )
1938.             },
1939.             confirmButton = {
1940.                 TextButton(
1941.                     onClick = {
1942.                         devicesViewModel.updateDeviceName(deviceId, newName)
1943.                         showEditDialog = false
1944.                     }
1945.                 ) {
1946.                     Text("Save")
1947.                 }
1948.             },
1949.             dismissButton = {
1950.                 TextButton(
1951.                     onClick = { showEditDialog = false }
1952.                 ) {
1953.                     Text("Cancel")
1954.                 }
1955.             }
1956.         )
1957.     }
1958. 
1959.     Surface(
1960.         modifier = Modifier
1961.             .fillMaxSize()
1962.             .padding(16.dp),
1963.         color = MaterialTheme.colorScheme.background
1964.     ) {
1965.         Column(
1966.             modifier = Modifier.fillMaxSize(),
1967.             horizontalAlignment = Alignment.CenterHorizontally
1968.         ) {
1969.             DeviceTitle(
1970.                 friendlyName = device?.friendlyName?.uppercase() ?: "Unknown Device",
1971.                 onEditClick = { showEditDialog = true }
1972.             )
1973. 
1974.             Spacer(modifier = Modifier.height(8.dp))
1975. 
1976.             ExposedDropdownMenuBox(
1977.                 expanded = expanded,
1978.                 onExpandedChange = { expanded = !expanded }
1979.             ) {
1980.                 OutlinedTextField(
1981.                     value = selectedRoom,
1982.                     onValueChange = {},
1983.                     readOnly = true,
1984.                     modifier = Modifier
1985.                         .fillMaxWidth()
1986.                         .menuAnchor(),
1987.                     trailingIcon = {
1988.                         ExposedDropdownMenuDefaults.TrailingIcon(expanded = expanded)
1989.                     }
1990.                 )
1991.                 ExposedDropdownMenu(
1992.                     expanded = expanded,
1993.                     onDismissRequest = { expanded = false }
1994.                 ) {
1995.                     DropdownMenuItem(
1996.                         text = { Text("Select room") },
1997.                         onClick = {
1998.                             selectedRoom = "Select room"
1999.                             expanded = false
2000.                             devicesViewModel.assignRoomToDevice(deviceId, null)
2001.                         }
2002.                     )
2003.                     rooms.forEach { room ->
2004.                         DropdownMenuItem(
2005.                             text = { Text(room.name) },
2006.                             onClick = {
2007.                                 selectedRoom = room.name
2008.                                 expanded = false
2009.                                 devicesViewModel.assignRoomToDevice(deviceId, room.id)
2010.                             }
2011.                         )
2012.                     }
2013.                 }
2014.             }
2015. 
2016.             Spacer(modifier = Modifier.height(8.dp))
2017. 
2018.             if (deviceData != null) {
2019.                 DeviceDetails(deviceData)
2020.             } else {
2021.                 DeviceNotFoundMessage()
2022.             }
2023.         }
2024.     }
2025. }


DevicesScreen.kt

2026. package com.example.iot_ha.ui.screens.home
2027. 
2028. import androidx.compose.foundation.layout.Column
2029. import androidx.compose.foundation.layout.Spacer
2030. import androidx.compose.foundation.layout.fillMaxSize
2031. import androidx.compose.foundation.layout.height
2032. import androidx.compose.foundation.layout.padding
2033. import androidx.compose.foundation.rememberScrollState
2034. import androidx.compose.foundation.verticalScroll
2035. import androidx.compose.material3.Scaffold
2036. import androidx.compose.runtime.Composable
2037. import androidx.compose.runtime.collectAsState
2038. import androidx.compose.runtime.getValue
2039. import androidx.compose.ui.Modifier
2040. import androidx.compose.ui.unit.dp
2041. import androidx.navigation.NavHostController
2042. import com.example.iot_ha.R
2043. import com.example.iot_ha.data.local.device.DeviceState
2044. import com.example.iot_ha.ui.components.devices.DeviceCard
2045. import com.example.iot_ha.ui.viewmodels.shared.DevicesViewModel
2046. import com.example.iot_ha.utils.Constants
2047. import com.example.iot_ha.utils.toBooleanState
2048. 
2049. @Composable
2050. fun DevicesScreen(navHostController: NavHostController, devicesViewModel: DevicesViewModel) {
2051. 
2052.     val devices by devicesViewModel.devices.collectAsState()
2053.     val switchDevices by devicesViewModel.getDevicesByTypeFlow("switch").collectAsState()
2054.     val devicesWithoutCommands by devicesViewModel.getDevicesWithoutCommandsFlow().collectAsState()
2055. 
2056.     val deviceState by DeviceState.devicesData.collectAsState()
2057. 
2058.     Scaffold { paddingValues ->
2059.         Column(
2060.             modifier = Modifier
2061.                 .fillMaxSize()
2062.                 .padding(paddingValues)
2063.                 .verticalScroll(rememberScrollState())
2064.                 .padding(16.dp)
2065.         ) {
2066.             devicesWithoutCommands.forEach { device ->
2067. 
2068.                 DeviceCard(
2069.                     deviceId = device.id,
2070.                     imageRes = R.drawable.mqtt_logo,
2071.                     name = device.friendlyName,
2072.                     navController = navHostController,
2073.                     onToggle = { state ->
2074.                         devicesViewModel.onToggle(device.id, state)
2075.                     }
2076.                 )
2077.                 Spacer(modifier = Modifier.height(8.dp))
2078.             }
2079. 
2080. 
2081.             switchDevices.forEach { device ->
2082. 
2083.                 val deviceData = deviceState[device.id]
2084. 
2085.                 DeviceCard(
2086.                     deviceId = device.id,
2087.                     imageRes = R.drawable.mqtt_logo,
2088.                     name = device.friendlyName,
2089.                     type = Constants.SWITCH_TYPE,
2090.                     value = (deviceData?.get("state") as? String)?.toBooleanState() ?: false,
2091.                     navController = navHostController,
2092.                     onToggle = { state ->
2093.                         devicesViewModel.onToggle(device.id, state)
2094.                     }
2095.                 )
2096.                 Spacer(modifier = Modifier.height(8.dp))
2097.             }
2098. 
2099. 
2100.         }
2101.     }
2102. }
2103. 


RoomDetailScreen.kt

2104. package com.example.iot_ha.ui.screens.home
2105. 
2106. import androidx.compose.foundation.layout.Column
2107. import androidx.compose.foundation.layout.Spacer
2108. import androidx.compose.foundation.layout.fillMaxSize
2109. import androidx.compose.foundation.layout.height
2110. import androidx.compose.foundation.layout.padding
2111. import androidx.compose.foundation.rememberScrollState
2112. import androidx.compose.foundation.verticalScroll
2113. import androidx.compose.material3.Scaffold
2114. import androidx.compose.material3.Text
2115. import androidx.compose.runtime.Composable
2116. import androidx.compose.runtime.collectAsState
2117. import androidx.compose.runtime.getValue
2118. import androidx.compose.ui.Modifier
2119. import androidx.compose.ui.unit.dp
2120. import androidx.navigation.NavBackStackEntry
2121. import androidx.navigation.NavHostController
2122. import com.example.iot_ha.R
2123. import com.example.iot_ha.data.local.device.DeviceState
2124. import com.example.iot_ha.ui.components.devices.DeviceCard
2125. import com.example.iot_ha.ui.viewmodels.shared.DevicesViewModel
2126. import com.example.iot_ha.ui.viewmodels.shared.RoomsViewModel
2127. import com.example.iot_ha.utils.Constants
2128. import com.example.iot_ha.utils.toBooleanState
2129. 
2130. @Composable
2131. fun RoomDetailScreen(
2132.     backStackEntry: NavBackStackEntry,
2133.     roomsViewModel: RoomsViewModel,
2134.     devicesViewModel: DevicesViewModel,
2135.     navHostController: NavHostController
2136. ) {
2137.     val roomId = backStackEntry.arguments?.getString("roomId")?.toIntOrNull() ?: -1
2138. 
2139.     val roomDevices by devicesViewModel.getDevicesByRoomIdFlow(roomId).collectAsState()
2140.     val switchDevices by devicesViewModel.getDevicesByTypeFlow("switch").collectAsState()
2141. 
2142.     val roomSwitchDevices = switchDevices.filter { it -> it.id in roomDevices.map { it.id } }
2143. 
2144.     val deviceState by DeviceState.devicesData.collectAsState()
2145. 
2146.     Scaffold { paddingValues ->
2147.         Column(
2148.             modifier = Modifier
2149.                 .fillMaxSize()
2150.                 .padding(paddingValues)
2151.                 .verticalScroll(rememberScrollState())
2152.                 .padding(16.dp)
2153.         ) {
2154.             roomSwitchDevices.forEach { device ->
2155.                 val deviceData = deviceState[device.id]
2156. 
2157.                 DeviceCard(
2158.                     deviceId = device.id,
2159.                     imageRes = R.drawable.mqtt_logo,
2160.                     name = device.friendlyName,
2161.                     type = Constants.SWITCH_TYPE,
2162.                     value = (deviceData?.get("state") as? String)?.toBooleanState() ?: false,
2163.                     navController = navHostController,
2164.                     onToggle = { state ->
2165.                         devicesViewModel.onToggle(device.id, state)
2166.                     }
2167.                 )
2168.                 Spacer(modifier = Modifier.height(8.dp))
2169.             }
2170.         }
2171.     }
2172. }
2173. 
2174. 


RoomsScreen.kt

2175. package com.example.iot_ha.ui.screens.home
2176. 
2177. import android.util.Log
2178. import androidx.compose.foundation.layout.Box
2179. import androidx.compose.foundation.layout.Column
2180. import androidx.compose.foundation.layout.PaddingValues
2181. import androidx.compose.foundation.layout.fillMaxSize
2182. import androidx.compose.foundation.layout.padding
2183. import androidx.compose.foundation.lazy.LazyColumn
2184. import androidx.compose.foundation.lazy.items
2185. import androidx.compose.material.icons.Icons
2186. import androidx.compose.material.icons.filled.Add
2187. import androidx.compose.material3.FloatingActionButton
2188. import androidx.compose.material3.Icon
2189. import androidx.compose.material3.MaterialTheme
2190. import androidx.compose.runtime.Composable
2191. import androidx.compose.runtime.LaunchedEffect
2192. import androidx.compose.runtime.collectAsState
2193. import androidx.compose.runtime.getValue
2194. import androidx.compose.runtime.mutableIntStateOf
2195. import androidx.compose.runtime.mutableStateOf
2196. import androidx.compose.runtime.remember
2197. import androidx.compose.runtime.setValue
2198. import androidx.compose.ui.Alignment
2199. import androidx.compose.ui.Modifier
2200. import androidx.compose.ui.unit.dp
2201. import androidx.navigation.NavHostController
2202. import com.example.iot_ha.ui.components.rooms.AddRoomDialog
2203. import com.example.iot_ha.ui.components.rooms.RoomCard
2204. import com.example.iot_ha.ui.viewmodels.shared.RoomsViewModel
2205. 
2206. @Composable
2207. fun RoomsScreen(
2208.     navHostController: NavHostController,
2209.     roomsViewModel: RoomsViewModel
2210. ) {
2211.     var showDialog by remember { mutableStateOf(false) }
2212.     val rooms by roomsViewModel.rooms.collectAsState()
2213. 
2214.     Box(modifier = Modifier.fillMaxSize()) {
2215.         Column(modifier = Modifier.fillMaxSize()) {
2216.             LazyColumn(
2217.                 modifier = Modifier.weight(1f),
2218.                 contentPadding = PaddingValues(16.dp)
2219.             ) {
2220.                 items(rooms) { room ->
2221.                     var deviceCount by remember { mutableIntStateOf(0) }
2222. 
2223.                     LaunchedEffect(room.id) {
2224.                         roomsViewModel.getDeviceCount(room.id) { count ->
2225.                             deviceCount = count
2226.                         }
2227.                     }
2228. 
2229.                     RoomCard(
2230.                         roomId = room.id.toInt(),
2231.                         roomName = room.name,
2232.                         deviceCount = deviceCount,
2233.                         navHostController = navHostController,
2234.                         onDelete = { roomId ->
2235.                             roomsViewModel.deleteRoom(roomId)
2236.                         }
2237.                     )
2238.                 }
2239. 
2240.             }
2241.         }
2242. 
2243.         FloatingActionButton(
2244.             onClick = { showDialog = true },
2245.             containerColor = MaterialTheme.colorScheme.primary,
2246.             modifier = Modifier
2247.                 .align(Alignment.BottomEnd)
2248.                 .padding(16.dp)
2249.         ) {
2250.             Icon(imageVector = Icons.Default.Add, contentDescription = "Добавить комнату")
2251.         }
2252.     }
2253. 
2254.     if (showDialog) {
2255.         AddRoomDialog(
2256.             onDismiss = { showDialog = false },
2257.             onConfirm = { roomName ->
2258.                 roomsViewModel.addRoom(roomName)
2259.                 showDialog = false
2260.                 Log.i("Rooms", "Комната добавлена: $roomName")
2261.             }
2262.         )
2263.     }
2264. }
2265. 


ScheduleScreen.kt

2266. package com.example.iot_ha.ui.screens.home
2267. 
2268. import androidx.compose.material3.Text
2269. import androidx.compose.runtime.Composable
2270. 
2271. @Composable
2272. fun ScheduleScreen() {
2273.     Text("Schedule Screen")
2274. }

SettingsScreen.kt

2275. package com.example.iot_ha.ui.screens.home
2276. 
2277. import androidx.compose.foundation.layout.Arrangement
2278. import androidx.compose.foundation.layout.Column
2279. import androidx.compose.foundation.layout.Row
2280. import androidx.compose.foundation.layout.Spacer
2281. import androidx.compose.foundation.layout.fillMaxSize
2282. import androidx.compose.foundation.layout.fillMaxWidth
2283. import androidx.compose.foundation.layout.height
2284. import androidx.compose.foundation.layout.padding
2285. import androidx.compose.foundation.shape.RoundedCornerShape
2286. import androidx.compose.material3.Card
2287. import androidx.compose.material3.CardDefaults
2288. import androidx.compose.material3.MaterialTheme
2289. import androidx.compose.material3.Switch
2290. import androidx.compose.material3.SwitchDefaults
2291. import androidx.compose.material3.Text
2292. import androidx.compose.runtime.Composable
2293. import androidx.compose.runtime.LaunchedEffect
2294. import androidx.compose.runtime.collectAsState
2295. import androidx.compose.runtime.getValue
2296. import androidx.compose.runtime.mutableIntStateOf
2297. import androidx.compose.runtime.remember
2298. import androidx.compose.runtime.setValue
2299. import androidx.compose.ui.Alignment
2300. import androidx.compose.ui.Modifier
2301. import androidx.compose.ui.graphics.Color
2302. import androidx.compose.ui.unit.dp
2303. import androidx.navigation.NavController
2304. import com.example.iot_ha.data.local.broker.discovery.DiscoveryState
2305. import com.example.iot_ha.ui.navigation.Routes
2306. import kotlinx.coroutines.delay
2307. 
2308. @Composable
2309. fun SettingsScreen(navHostController: NavController) {
2310.     val discoveryState by DiscoveryState.isDiscoveryActive.collectAsState()
2311. 
2312.     var remainingTime by remember { mutableIntStateOf(0) }
2313. 
2314.     fun onSwitchChanged(enabled: Boolean) { // rename to onDiscoverySwitchChanged
2315.         if (enabled) {
2316.             DiscoveryState.startDiscovery()
2317.         } else {
2318.             DiscoveryState.stopDiscovery()
2319.         }
2320.     }
2321. 
2322.     LaunchedEffect(discoveryState) {
2323.         if (discoveryState) {
2324.             remainingTime = 255
2325.             while (remainingTime > 0) {
2326.                 delay(1000)
2327.                 remainingTime -= 1
2328.             }
2329.         } else {
2330.             remainingTime = 0
2331.         }
2332.     }
2333. 
2334.     Column(
2335.         modifier = Modifier
2336.             .fillMaxSize()
2337.             .padding(16.dp),
2338.         verticalArrangement = Arrangement.Top,
2339.         horizontalAlignment = Alignment.CenterHorizontally
2340.     ) {
2341. 
2342.         Spacer(modifier = Modifier.height(16.dp))
2343. 
2344.         Card(
2345.             shape = RoundedCornerShape(16.dp),
2346.             colors = CardDefaults.cardColors(containerColor = Color(0xFFb697c4)),
2347.             elevation = CardDefaults.cardElevation(6.dp),
2348.             modifier = Modifier.fillMaxWidth()
2349.         ) {
2350.             Column(
2351.                 modifier = Modifier
2352.                     .fillMaxWidth()
2353.                     .padding(16.dp)
2354.             ) {
2355.                 Row(
2356.                     verticalAlignment = Alignment.CenterVertically
2357.                 ) {
2358.                     Text(
2359.                         text = "Device discovery mode",
2360.                         modifier = Modifier.weight(1f),
2361.                         style = MaterialTheme.typography.bodyLarge
2362.                     )
2363.                     Switch(
2364.                         checked = discoveryState,
2365.                         onCheckedChange = { onSwitchChanged(it) },
2366.                         colors = SwitchDefaults.colors(
2367.                             checkedThumbColor = Color.White,
2368.                             checkedTrackColor = Color(0xFF4CAF50),
2369.                             uncheckedThumbColor = Color.White,
2370.                             uncheckedTrackColor = Color(0xFFF44336)
2371.                         )
2372.                     )
2373.                 }
2374. 
2375.                 if (discoveryState) {
2376.                     Text(
2377.                         text = "Time left: $remainingTime s",
2378.                         style = MaterialTheme.typography.bodyMedium,
2379.                         color = Color.Black
2380.                     )
2381.                 }
2382.             }
2383.         }
2384. 
2385.         Spacer(modifier = Modifier.height(16.dp))
2386. 
2387.         Card(
2388.             shape = RoundedCornerShape(16.dp),
2389.             colors = CardDefaults.cardColors(containerColor = Color(0xFFb697c4)),
2390.             elevation = CardDefaults.cardElevation(6.dp),
2391.             modifier = Modifier.fillMaxWidth()
2392.         ) {
2393.             Column(
2394.                 modifier = Modifier
2395.                     .fillMaxWidth()
2396.                     .padding(16.dp)
2397.             ) {
2398.                 Row(
2399.                     verticalAlignment = Alignment.CenterVertically
2400.                 ) {
2401.                     Text(
2402.                         text = "LED Settings",
2403.                         modifier = Modifier.weight(1f),
2404.                         style = MaterialTheme.typography.bodyLarge
2405.                     )
2406.                 }
2407. 
2408.                 Text(
2409.                     text = "Adjust LED brightness and color",
2410.                     style = MaterialTheme.typography.bodyMedium,
2411.                     color = Color.Black,
2412.                     modifier = Modifier.padding(top = 8.dp)
2413.                 )
2414. 
2415.                 Spacer(modifier = Modifier.height(8.dp))
2416. 
2417.                 androidx.compose.material3.Button(
2418.                     onClick = { navHostController.navigate(Routes.LED_SETTINGS_SCREEN) },
2419.                     modifier = Modifier.fillMaxWidth()
2420.                 ) {
2421.                     Text(text = "Go to LED Settings")
2422.                 }
2423. 
2424.             }
2425.         }
2426.     }
2427. }


com.example.iot_ha.ui.screens.home.settings.LEDScreen.kt

2428. import androidx.compose.foundation.layout.Column
2429. import androidx.compose.foundation.layout.Spacer
2430. import androidx.compose.foundation.layout.fillMaxSize
2431. import androidx.compose.foundation.layout.height
2432. import androidx.compose.foundation.layout.padding
2433. import androidx.compose.foundation.rememberScrollState
2434. import androidx.compose.foundation.verticalScroll
2435. import androidx.compose.material3.MaterialTheme
2436. import androidx.compose.material3.Text
2437. import androidx.compose.runtime.Composable
2438. import androidx.compose.runtime.collectAsState
2439. import androidx.compose.runtime.getValue
2440. import androidx.compose.ui.Alignment
2441. import androidx.compose.ui.Modifier
2442. import androidx.compose.ui.graphics.Color
2443. import androidx.compose.ui.unit.dp
2444. import androidx.lifecycle.viewmodel.compose.viewModel
2445. import com.example.iot_ha.data.local.led.LEDState
2446. import com.example.iot_ha.ui.components.settings.led.BrigtnessCard
2447. import com.example.iot_ha.ui.components.settings.led.ColorsCard
2448. import com.example.iot_ha.ui.viewmodels.LEDScreenViewModel
2449. import com.example.iot_ha.ui.viewmodels.factory.LEDScreenViewModelFactory
2450. 
2451. @Composable
2452. fun com.example.iot_ha.ui.screens.home.settings.LEDScreen() {
2453.     val brightness by LEDState.brightness.collectAsState()
2454.     val red by LEDState.red.collectAsState()
2455.     val green by LEDState.green.collectAsState()
2456.     val blue by LEDState.blue.collectAsState()
2457. 
2458.     val ledScreenViewModel: LEDScreenViewModel = viewModel(factory = LEDScreenViewModelFactory())
2459. 
2460.     Column(
2461.         modifier = Modifier
2462.             .fillMaxSize()
2463.             .padding(16.dp)
2464.             .verticalScroll(rememberScrollState()),
2465.         horizontalAlignment = Alignment.CenterHorizontally
2466.     ) {
2467.         Text(text = "Edit LED Settings", style = MaterialTheme.typography.headlineSmall)
2468. 
2469.         Spacer(modifier = Modifier.height(16.dp))
2470. 
2471.         BrigtnessCard(
2472.             title = "Brightness",
2473.             color = Color(brightness / 255f, brightness / 255f, brightness / 255f),
2474.             value = brightness,
2475.             onValueChange = { LEDState.setBrightness(it) },
2476.             onValueChangeFinished = { ledScreenViewModel.sendLEDStatus() }
2477.         )
2478. 
2479.         Spacer(modifier = Modifier.height(16.dp))
2480. 
2481.         ColorsCard(
2482.             red = red,
2483.             green = green,
2484.             blue = blue,
2485.             onRedChange = { LEDState.setRed(it) },
2486.             onGreenChange = { LEDState.setGreen(it) },
2487.             onBlueChange = { LEDState.setBlue(it) },
2488.             onValueChangeFinished = { ledScreenViewModel.sendLEDStatus() }
2489.         )
2490.     }
2491. }


Color.kt

2492. package com.example.iot_ha.ui.theme
2493. 
2494. import androidx.compose.ui.graphics.Color
2495. 
2496. val Purple80 = Color(0xFFD0BCFF)
2497. val PurpleGrey80 = Color(0xFFCCC2DC)
2498. val Pink80 = Color(0xFFEFB8C8)
2499. 
2500. val Purple40 = Color(0xFF6650a4)
2501. val PurpleGrey40 = Color(0xFF625b71)
2502. val Pink40 = Color(0xFF7D5260)

Theme.kt

2503. package com.example.iot_ha.ui.theme
2504. 
2505. import android.os.Build
2506. import androidx.compose.foundation.isSystemInDarkTheme
2507. import androidx.compose.material3.MaterialTheme
2508. import androidx.compose.material3.darkColorScheme
2509. import androidx.compose.material3.dynamicDarkColorScheme
2510. import androidx.compose.material3.dynamicLightColorScheme
2511. import androidx.compose.material3.lightColorScheme
2512. import androidx.compose.runtime.Composable
2513. import androidx.compose.ui.platform.LocalContext
2514. 
2515. private val DarkColorScheme = darkColorScheme(
2516.     primary = Purple80,
2517.     secondary = PurpleGrey80,
2518.     tertiary = Pink80
2519. )
2520. 
2521. private val LightColorScheme = lightColorScheme(
2522.     primary = Purple40,
2523.     secondary = PurpleGrey40,
2524.     tertiary = Pink40
2525. 
2526.     /* Other default colors to override
2527.     background = Color(0xFFFFFBFE),
2528.     surface = Color(0xFFFFFBFE),
2529.     onPrimary = Color.White,
2530.     onSecondary = Color.White,
2531.     onTertiary = Color.White,
2532.     onBackground = Color(0xFF1C1B1F),
2533.     onSurface = Color(0xFF1C1B1F),
2534.     */
2535. )
2536. 
2537. @Composable
2538. fun IothaTheme(
2539.     darkTheme: Boolean = isSystemInDarkTheme(),
2540.     // Dynamic color is available on Android 12+
2541.     dynamicColor: Boolean = true,
2542.     content: @Composable () -> Unit
2543. ) {
2544.     val colorScheme = when {
2545.         dynamicColor && Build.VERSION.SDK_INT >= Build.VERSION_CODES.S -> {
2546.             val context = LocalContext.current
2547.             if (darkTheme) dynamicDarkColorScheme(context) else dynamicLightColorScheme(context)
2548.         }
2549. 
2550.         darkTheme -> DarkColorScheme
2551.         else -> LightColorScheme
2552.     }
2553. 
2554.     MaterialTheme(
2555.         colorScheme = colorScheme,
2556.         typography = Typography,
2557.         content = content
2558.     )
2559. }

Type.kt

2560. package com.example.iot_ha.ui.theme
2561. 
2562. import androidx.compose.material3.Typography
2563. import androidx.compose.ui.text.TextStyle
2564. import androidx.compose.ui.text.font.FontFamily
2565. import androidx.compose.ui.text.font.FontWeight
2566. import androidx.compose.ui.unit.sp
2567. 
2568. // Set of Material typography styles to start with
2569. val Typography = Typography(
2570.     bodyLarge = TextStyle(
2571.         fontFamily = FontFamily.Default,
2572.         fontWeight = FontWeight.Normal,
2573.         fontSize = 16.sp,
2574.         lineHeight = 24.sp,
2575.         letterSpacing = 0.5.sp
2576.     )
2577.     /* Other default text styles to override
2578.     titleLarge = TextStyle(
2579.         fontFamily = FontFamily.Default,
2580.         fontWeight = FontWeight.Normal,
2581.         fontSize = 22.sp,
2582.         lineHeight = 28.sp,
2583.         letterSpacing = 0.sp
2584.     ),
2585.     labelSmall = TextStyle(
2586.         fontFamily = FontFamily.Default,
2587.         fontWeight = FontWeight.Medium,
2588.         fontSize = 11.sp,
2589.         lineHeight = 16.sp,
2590.         letterSpacing = 0.5.sp
2591.     )
2592.     */
2593. )

AuthorizationViewModel.kt

2594. package com.example.iot_ha.ui.viewmodels
2595. 
2596. import androidx.compose.runtime.State
2597. import androidx.compose.runtime.mutableStateOf
2598. import androidx.lifecycle.ViewModel
2599. import androidx.lifecycle.viewModelScope
2600. import com.example.iot_ha.data.local.RoomLocalDatabase
2601. import com.example.iot_ha.data.local.broker.Broker
2602. import com.example.iot_ha.data.local.broker.BrokerState
2603. import com.example.iot_ha.data.mqtt.MQTTClient
2604. import com.example.iot_ha.data.mqtt.domain.MQTTMessageHandler
2605. import com.example.iot_ha.data.mqtt.util.Topics
2606. import kotlinx.coroutines.Dispatchers
2607. import kotlinx.coroutines.delay
2608. import kotlinx.coroutines.launch
2609. 
2610. class AuthorizationViewModel(
2611.     private val db: RoomLocalDatabase,
2612.     private val messageHandler: MQTTMessageHandler
2613. ) : ViewModel() {
2614. 
2615.     private val brokerDao = db.brokerDAO()
2616. 
2617.     private var _brokers = mutableStateOf<List<Broker>>(emptyList())
2618.     val brokers: State<List<Broker>> = _brokers
2619. 
2620.     init {
2621.         loadBrokers()
2622.     }
2623. 
2624.     private fun loadBrokers() {
2625.         viewModelScope.launch {
2626.             _brokers.value = brokerDao.getAllBrokers()
2627.         }
2628.     }
2629. 
2630.     fun addBroker(serverUri: String, serverPort: Int, user: String?, password: String?) {
2631.         viewModelScope.launch {
2632.             val broker = Broker(
2633.                 serverUri = serverUri,
2634.                 serverPort = serverPort,
2635.                 user = user,
2636.                 password = password
2637.             )
2638.             brokerDao.insert(broker)
2639.             loadBrokers()
2640.         }
2641.     }
2642. 
2643.     fun deleteBroker(broker: Broker) {
2644.         viewModelScope.launch {
2645.             MQTTClient.getInstance().disconnect()
2646.             brokerDao.deleteBroker(broker)
2647.             loadBrokers()
2648.         }
2649.     }
2650. 
2651.     fun handleLogin(broker: Broker, onSuccess: () -> Unit) {
2652.         BrokerState.setBrokerId(broker.id)
2653. 
2654.         val mqttClient = MQTTClient.reinitialize(broker, messageHandler)
2655.         val isSuccess = mqttClient.connect()
2656.         if (isSuccess) {
2657.             onSuccess()
2658. 
2659.             viewModelScope.launch(Dispatchers.IO) {
2660.                 mqttClient.subscribe(Topics.SUBSCRIBE_DEVICE_LIST_TOPIC)
2661.                 delay(500)
2662.                 mqttClient.subscribe(Topics.SUBSCRIBE_DEVICE_COMMANDS_TOPIC)
2663.                 mqttClient.subscribe(Topics.SUBSCRIBE_DEVICE_STATE_TOPIC)
2664. 
2665.                 mqttClient.subscribe(Topics.SUBSCRIBE_LED_STATE_TOPIC)
2666.             }
2667.         }
2668.     }
2669. }


HomeViewModel.kt

2670. package com.example.iot_ha.ui.viewmodels
2671. 
2672. import androidx.lifecycle.ViewModel
2673. import com.example.iot_ha.data.local.RoomLocalDatabase
2674. 
2675. 
2676. class HomeViewModel(db: RoomLocalDatabase) : ViewModel()

LEDScreenViewModel.kt

2677. package com.example.iot_ha.ui.viewmodels
2678. 
2679. import androidx.lifecycle.ViewModel
2680. import androidx.lifecycle.viewModelScope
2681. import com.example.iot_ha.data.local.led.LEDState
2682. import com.example.iot_ha.data.local.led.LEDStatus
2683. import com.example.iot_ha.data.mqtt.MQTTClient
2684. import com.example.iot_ha.data.mqtt.util.Topics
2685. import kotlinx.coroutines.flow.first
2686. import kotlinx.coroutines.launch
2687. 
2688. class LEDScreenViewModel : ViewModel() {
2689. 
2690.     fun sendLEDStatus() {
2691.         viewModelScope.launch {
2692.             val brightness = LEDState.brightness.first().toInt()
2693.             val red = LEDState.red.first().toInt()
2694.             val green = LEDState.green.first().toInt()
2695.             val blue = LEDState.blue.first().toInt()
2696. 
2697.             val ledStatus = LEDStatus(
2698.                 brightness = brightness,
2699.                 red = red,
2700.                 green = green,
2701.                 blue = blue
2702.             )
2703. 
2704.             MQTTClient.publish(Topics.LED_SET_STATE_TOPIC, ledStatus.toJson())
2705.         }
2706.     }
2707. }

AuthorizationViewModelFactory.kt

2708. package com.example.iot_ha.ui.viewmodels.factory
2709. 
2710. import androidx.lifecycle.ViewModel
2711. import androidx.lifecycle.ViewModelProvider
2712. import com.example.iot_ha.data.local.RoomLocalDatabase
2713. import com.example.iot_ha.data.mqtt.domain.MQTTMessageHandler
2714. import com.example.iot_ha.ui.viewmodels.AuthorizationViewModel
2715. 
2716. class AuthorizationViewModelFactory(
2717.     private val db: RoomLocalDatabase,
2718.     private val messageHandler: MQTTMessageHandler,
2719. ) : ViewModelProvider.Factory {
2720. 
2721.     @Suppress("UNCHECKED_CAST")
2722.     override fun <T : ViewModel> create(modelClass: Class<T>): T {
2723.         if (modelClass.isAssignableFrom(AuthorizationViewModel::class.java)) {
2724.             return AuthorizationViewModel(db, messageHandler) as T
2725.         }
2726.         throw IllegalArgumentException("Unknown ViewModel class")
2727.     }
2728. }

DevicesViewModelFactory.kt

2729. package com.example.iot_ha.ui.viewmodels.factory
2730. 
2731. import androidx.lifecycle.ViewModel
2732. import androidx.lifecycle.ViewModelProvider
2733. import com.example.iot_ha.data.local.RoomLocalDatabase
2734. import com.example.iot_ha.ui.viewmodels.shared.DevicesViewModel
2735. 
2736. class DevicesViewModelFactory(private val db: RoomLocalDatabase) : ViewModelProvider.Factory {
2737.     override fun <T : ViewModel> create(modelClass: Class<T>): T {
2738.         if (modelClass.isAssignableFrom(DevicesViewModel::class.java)) {
2739.             @Suppress("UNCHECKED_CAST")
2740.             return DevicesViewModel(db) as T
2741.         }
2742.         throw IllegalArgumentException("Unknown ViewModel class")
2743.     }
2744. }

HomeViewModelFactory.kt

2745. package com.example.iot_ha.ui.viewmodels.factory
2746. 
2747. import androidx.lifecycle.ViewModel
2748. import androidx.lifecycle.ViewModelProvider
2749. import com.example.iot_ha.data.local.RoomLocalDatabase
2750. import com.example.iot_ha.ui.viewmodels.HomeViewModel
2751. 
2752. class HomeViewModelFactory(private val db: RoomLocalDatabase) : ViewModelProvider.Factory {
2753.     override fun <T : ViewModel> create(modelClass: Class<T>): T {
2754.         if (modelClass.isAssignableFrom(HomeViewModel::class.java)) {
2755.             @Suppress("UNCHECKED_CAST")
2756.             return HomeViewModel(db) as T
2757.         }
2758.         throw IllegalArgumentException("Unknown ViewModel class")
2759.     }
2760. }


LEDScreenViewModelFactory.kt

2761. package com.example.iot_ha.ui.viewmodels.factory
2762. 
2763. import androidx.lifecycle.ViewModel
2764. import androidx.lifecycle.ViewModelProvider
2765. import com.example.iot_ha.ui.viewmodels.LEDScreenViewModel
2766. 
2767. class LEDScreenViewModelFactory : ViewModelProvider.Factory {
2768.     override fun <T : ViewModel> create(modelClass: Class<T>): T {
2769.         if (modelClass.isAssignableFrom(LEDScreenViewModel::class.java)) {
2770.             @Suppress("UNCHECKED_CAST")
2771.             return LEDScreenViewModel() as T
2772.         }
2773.         throw IllegalArgumentException("Unknown ViewModel class")
2774.     }
2775. }

RoomsViewModelFactory.kt

2776. package com.example.iot_ha.ui.viewmodels.factory
2777. 
2778. import androidx.lifecycle.ViewModel
2779. import androidx.lifecycle.ViewModelProvider
2780. import com.example.iot_ha.data.local.RoomLocalDatabase
2781. import com.example.iot_ha.ui.viewmodels.shared.RoomsViewModel
2782. 
2783. class RoomsViewModelFactory(private val db: RoomLocalDatabase) : ViewModelProvider.Factory {
2784.     override fun <T : ViewModel> create(modelClass: Class<T>): T {
2785.         if (modelClass.isAssignableFrom(RoomsViewModel::class.java)) {
2786.             @Suppress("UNCHECKED_CAST")
2787.             return RoomsViewModel(db) as T
2788.         }
2789.         throw IllegalArgumentException("Unknown ViewModel class")
2790.     }
2791. }

SensorsViewModelFactory.kt

2792. package com.example.iot_ha.ui.viewmodels.factory
2793. 
2794. import androidx.lifecycle.ViewModel
2795. import androidx.lifecycle.ViewModelProvider
2796. import com.example.iot_ha.ui.viewmodels.shared.SensorsViewModel
2797. 
2798. class SensorsViewModelFactory : ViewModelProvider.Factory {
2799.     @Suppress("UNCHECKED_CAST")
2800.     override fun <T : ViewModel> create(modelClass: Class<T>): T {
2801.         if (modelClass.isAssignableFrom(SensorsViewModel::class.java)) {
2802.             return SensorsViewModel() as T
2803.         }
2804.         throw IllegalArgumentException("Unknown ViewModel class")
2805.     }
2806. }


DevicesViewModel.kt

2807. package com.example.iot_ha.ui.viewmodels.shared
2808. 
2809. import android.util.Log
2810. import androidx.lifecycle.ViewModel
2811. import androidx.lifecycle.viewModelScope
2812. import com.example.iot_ha.data.local.RoomLocalDatabase
2813. import com.example.iot_ha.data.local.broker.BrokerState
2814. import com.example.iot_ha.data.local.command.Command
2815. import com.example.iot_ha.data.local.device.Device
2816. import com.example.iot_ha.data.mqtt.MQTTClient
2817. import kotlinx.coroutines.flow.MutableStateFlow
2818. import kotlinx.coroutines.flow.StateFlow
2819. import kotlinx.coroutines.flow.collectLatest
2820. import kotlinx.coroutines.flow.update
2821. import kotlinx.coroutines.launch
2822. 
2823. class DevicesViewModel(private val db: RoomLocalDatabase) : ViewModel() {
2824.     private val _devices = MutableStateFlow<List<Device>>(emptyList())
2825.     val devices: StateFlow<List<Device>> = _devices
2826. 
2827.     init {
2828.         viewModelScope.launch {
2829.             BrokerState.brokerId.collectLatest { brokerId ->
2830.                 if (brokerId != null) {
2831.                     loadDevices(brokerId)
2832.                 }
2833.             }
2834.         }
2835.     }
2836. 
2837. 
2838.     private suspend fun loadDevices(brokerId: Int) {
2839.         db.deviceDAO().getDevicesByBrokerFlow(brokerId)
2840.             .collect { deviceList ->
2841.                 _devices.value = deviceList
2842.             }
2843.     }
2844. 
2845.     fun getDeviceIdByIeeeAddr(ieeeAddr: String, callback: (Int?) -> Unit) {
2846.         viewModelScope.launch {
2847.             val device = db.deviceDAO().getDeviceByIeeeAddr(ieeeAddr)
2848.             callback(device?.id)
2849.         }
2850.     }
2851. 
2852.     fun getDevicesByTypeFlow(type: String): StateFlow<List<Device>> {
2853.         val resultFlow = MutableStateFlow<List<Device>>(emptyList())
2854. 
2855.         viewModelScope.launch {
2856.             db.commandDAO().getCommandsByTypeFlow(type).collect { commands ->
2857.                 val deviceIds = commands.map { it.deviceId }.toSet()
2858.                 val filteredDevices = _devices.value.filter { it.id in deviceIds }
2859.                 resultFlow.value = filteredDevices
2860.             }
2861.         }
2862. 
2863.         return resultFlow
2864.     }
2865. 
2866.     fun getDevicesWithoutCommandsFlow(): StateFlow<List<Device>> {
2867.         val resultFlow = MutableStateFlow<List<Device>>(emptyList())
2868. 
2869.         viewModelScope.launch {
2870.             db.deviceDAO().getAllDevicesFlow().collect { devices ->
2871.                 db.commandDAO().getAllCommandsFlow().collect { commands ->
2872.                     val deviceIdsWithCommands = commands.map { it.deviceId }.toSet()
2873.                     val devicesWithoutCommands = devices.filter { it.id !in deviceIdsWithCommands }
2874.                     resultFlow.value = devicesWithoutCommands
2875.                 }
2876.             }
2877.         }
2878. 
2879.         return resultFlow
2880.     }
2881. 
2882. 
2883.     fun getDevicesByRoomIdFlow(roomId: Int): StateFlow<List<Device>> {
2884.         val resultFlow = MutableStateFlow<List<Device>>(emptyList())
2885. 
2886.         viewModelScope.launch {
2887.             db.deviceDAO().getDevicesByRoomIdFlow(roomId).collect { devices ->
2888.                 val deviceIds = devices.map { it.id }.toSet()
2889.                 val filteredDevices = _devices.value.filter { it.id in deviceIds }
2890.                 resultFlow.value = filteredDevices
2891.             }
2892.         }
2893. 
2894.         return resultFlow
2895.     }
2896. 
2897.     fun addDeviceIfNotExists(device: Device) {
2898.         viewModelScope.launch {
2899.             val existingDevice = db.deviceDAO().getDeviceByIeeeAddr(device.ieeeAddr)
2900. 
2901.             Log.i("DEVLIST", devices.value.toString())
2902. 
2903.             if (existingDevice == null) {
2904.                 db.deviceDAO().insertDevice(device)
2905.                 Log.i("DevicesViewModel", "Device added: $device")
2906.             } else {
2907.                 Log.i("DevicesViewModel", "Device already exists: $device")
2908.             }
2909.         }
2910.     }
2911. 
2912.     fun updateDeviceName(deviceId: Int, newName: String) {
2913.         viewModelScope.launch {
2914.             val device = db.deviceDAO().getDeviceById(deviceId)
2915. 
2916.             val updatedDevice = device.copy(friendlyName = newName)
2917. 
2918.             db.deviceDAO().updateDevice(updatedDevice)
2919.             _devices.update { list ->
2920.                 list.map {
2921.                     if (it.id == deviceId) updatedDevice else it
2922.                 }
2923.             }
2924.         }
2925.     }
2926. 
2927. 
2928.     fun addCommandIfNotExists(command: Command) {
2929.         Log.i("addCommandIfNotExists", command.toString())
2930. 
2931.         viewModelScope.launch {
2932.             val existingCommand = db.commandDAO().getCommandByCommandTopic(command.commandTopic)
2933. 
2934.             if (existingCommand == null) {
2935.                 db.commandDAO().insertCommand(command)
2936.             } else {
2937.                 Log.i("DevicesViewModel", "Command already exists: $existingCommand")
2938.             }
2939.         }
2940.     }
2941. 
2942.     fun onToggle(deviceId: Int, state: Boolean) {
2943.         viewModelScope.launch {
2944.             val cmd = db.commandDAO().getSwitchCommandByDeviceId(deviceId)
2945. 
2946.             val newState = if (!state) cmd?.payloadOff else cmd?.payloadOn
2947.             cmd?.let {
2948.                 if (newState != null) {
2949.                     sendCommandToMqtt(it.commandTopic, newState)
2950.                 }
2951.             }
2952.         }
2953.     }
2954. 
2955.     fun onSelectChange(deviceId: Int, option: String) {
2956.         viewModelScope.launch {
2957.             sendCommandToMqtt("command", "")
2958.         }
2959.     }
2960. 
2961.     fun onValueChange(deviceId: Int, value: Int) {
2962.         viewModelScope.launch {
2963.             sendCommandToMqtt("command", "")
2964.         }
2965.     }
2966. 
2967.     private fun sendCommandToMqtt(topic: String, command: String) {
2968.         val mqttClient = MQTTClient.getInstance()
2969.         mqttClient.publish(topic, command)
2970.         println("Отправка в MQTT: $command")
2971.     }
2972. 
2973.     fun assignRoomToDevice(deviceId: Int, roomId: Long?) {
2974.         viewModelScope.launch {
2975.             val device = db.deviceDAO().getDeviceById(deviceId)
2976.             val updatedDevice = device.copy(roomId = roomId)
2977.             db.deviceDAO().updateDevice(updatedDevice)
2978.         }
2979.     }
2980. 
2981. }
2982. 


RoomsViewModel.kt

2983. package com.example.iot_ha.ui.viewmodels.shared
2984. 
2985. import androidx.lifecycle.ViewModel
2986. import androidx.lifecycle.viewModelScope
2987. import com.example.iot_ha.data.local.RoomLocalDatabase
2988. import com.example.iot_ha.data.local.room.RoomEntity
2989. import kotlinx.coroutines.flow.MutableStateFlow
2990. import kotlinx.coroutines.flow.StateFlow
2991. import kotlinx.coroutines.launch
2992. 
2993. class RoomsViewModel(private val db: RoomLocalDatabase) : ViewModel() {
2994.     private val _rooms = MutableStateFlow<List<RoomEntity>>(emptyList())
2995.     val rooms: StateFlow<List<RoomEntity>> = _rooms
2996. 
2997.     init {
2998.         viewModelScope.launch {
2999.             db.roomEntityDAO().getAllRooms().collect { _rooms.value = it }
3000.         }
3001.     }
3002. 
3003.     fun addRoom(name: String) {
3004.         viewModelScope.launch {
3005.             db.roomEntityDAO().insertRoom(RoomEntity(name = name))
3006.         }
3007.     }
3008. 
3009.     fun getDeviceCount(roomId: Long, onResult: (Int) -> Unit) {
3010.         viewModelScope.launch {
3011.             val count = db.deviceDAO().getDeviceCountForRoom(roomId)
3012.             onResult(count)
3013.         }
3014.     }
3015. 
3016.     fun deleteRoom(roomId: Int) {
3017.         viewModelScope.launch {
3018.             db.roomEntityDAO().deleteRoom(roomId)
3019.         }
3020.     }
3021. }


SensorsViewModel.kt

3022. package com.example.iot_ha.ui.viewmodels.shared
3023. 
3024. import android.util.Log
3025. import androidx.lifecycle.ViewModel
3026. import com.example.iot_ha.ui.viewmodels.shared.data.SensorsData
3027. import kotlinx.coroutines.flow.MutableStateFlow
3028. import kotlinx.coroutines.flow.StateFlow
3029. 
3030. class SensorsViewModel : ViewModel() {
3031.     private val _sensorData = MutableStateFlow<Map<String, SensorsData>>(emptyMap())
3032.     val sensorData: StateFlow<Map<String, SensorsData>> = _sensorData
3033. 
3034.     fun updateSensorData(topic: String, payload: String) {
3035.         _sensorData.value += (topic to SensorsData(topic, payload))
3036.     }
3037. 
3038.     fun test() {
3039.         Log.i("ViewModel", "TESTING MESSAGE")
3040.     }
3041. }

SensorsData.kt

3042. package com.example.iot_ha.ui.viewmodels.shared.data
3043. 
3044. data class SensorsData(
3045.     val topic: String,
3046.     val payload: String,
3047.     val timestamp: Long = System.currentTimeMillis()
3048. )


Constants.kt

3049. package com.example.iot_ha.utils
3050. 
3051. object Constants {
3052.     const val SWITCH_TYPE = "switch"
3053.     const val SELECT_TYPE = "select"
3054.     const val DIMMER_TYPE = "dimmer"
3055. 
3056.     val TABS_LIST = listOf("Devices", "Rooms", "Settings")
3057. 
3058.     const val DISCOVERY_ENABLE = "true"
3059.     const val DISCOVERY_DISABLE = "false"
3060.     const val DISCOVERY_TIME = 255_000L
3061. }

DeviceActionBuilder.kt

3062. class DeviceActionBuilder(private val deviceId: Int) {
3063.     fun buildOnToggle(): (Int, Boolean) -> Unit = { id, state ->
3064.         if (id == deviceId) {
3065.             println("[$deviceId] Toggle changed: $state")
3066.         }
3067.     }
3068. 
3069.     fun buildOnSliderChange(): (Int, Float) -> Unit = { id, value ->
3070.         if (id == deviceId) {
3071.             println("[$deviceId] Slider value: $value")
3072.         }
3073.     }
3074. 
3075.     fun buildOnSelectChange(): (Int, String) -> Unit = { id, option ->
3076.         if (id == deviceId) {
3077.             println("[$deviceId] Selected: $option")
3078.         }
3079.     }
3080. }


Extensions.kt

3081. package com.example.iot_ha.utils
3082. 
3083. fun String.toBooleanState(): Boolean = when (this) {
3084.     "ON", "true", "1" -> true
3085.     else -> false
3086. }

Logger.kt

3087. package com.example.iot_ha.utils.logging
3088. 
3089. import android.util.Log
3090. import kotlin.reflect.KClass
3091. 
3092. object Logger {
3093.     fun log(className: KClass<*>, message: String) {
3094.         Log.i(className.simpleName, message)
3095.     }
3096. 
3097.     fun log(tag: String, message: String) {
3098.         Log.i(tag, message)
3099.     }
3100. }


ExampleUnitTest.kt

3101. package com.example.iot_ha
3102. 
3103. import org.junit.Assert.assertEquals
3104. import org.junit.Test
3105. 
3106. /**
3107.  * Example local unit test, which will execute on the development machine (host).
3108.  *
3109.  * See [testing documentation](http://d.android.com/tools/testing).
3110.  */
3111. class ExampleUnitTest {
3112.     @Test
3113.     fun addition_isCorrect() {
3114.         assertEquals(4, 2 + 2)
3115.     }
3116. }

