ExampleInstrumentedTest.kt

0001. package com.example.iot_ha
0002. 
0003. import androidx.test.ext.junit.runners.AndroidJUnit4
0004. import androidx.test.platform.app.InstrumentationRegistry
0005. import org.junit.Assert.assertEquals
0006. import org.junit.Test
0007. import org.junit.runner.RunWith
0008. 
0009. /**
0010.  * Instrumented test, which will execute on an Android device.
0011.  *
0012.  * See [testing documentation](http://d.android.com/tools/testing).
0013.  */
0014. @RunWith(AndroidJUnit4::class)
0015. class ExampleInstrumentedTest {
0016.     @Test
0017.     fun useAppContext() {
0018.         // Context of the app under test.
0019.         val appContext = InstrumentationRegistry.getInstrumentation().targetContext
0020.         assertEquals("com.example.iot_ha", appContext.packageName)
0021.     }
0022. }

MainActivity.kt

0023. package com.example.iot_ha
0024. 
0025. import android.os.Bundle
0026. import androidx.activity.ComponentActivity
0027. import androidx.activity.compose.setContent
0028. import androidx.navigation.compose.rememberNavController
0029. import com.example.iot_ha.ui.navigation.AppNavHost
0030. 
0031. class MainActivity : ComponentActivity() {
0032.     override fun onCreate(savedInstanceState: Bundle?) {
0033.         super.onCreate(savedInstanceState)
0034. 
0035.         setContent {
0036.             val navController = rememberNavController()
0037.             AppNavHost(navController, "auth")
0038.         }
0039.     }
0040. }
0041. 


MapTypeConvertor.kt

0042. package com.example.iot_ha.data.local
0043. 
0044. import androidx.room.TypeConverter
0045. import com.google.gson.Gson
0046. import com.google.gson.reflect.TypeToken
0047. 
0048. class MapTypeConvertor {
0049.     private val gson = Gson()
0050. 
0051.     @TypeConverter
0052.     fun fromMap(map: Map<String, String>?): String? {
0053.         return gson.toJson(map)
0054.     }
0055. 
0056.     @TypeConverter
0057.     fun toMap(json: String?): Map<String, String>? {
0058.         return json?.let {
0059.             val type = object : TypeToken<Map<String, String>>() {}.type
0060.             gson.fromJson(it, type)
0061.         }
0062.     }
0063. }
0064. 


RoomLocalDatabase.kt

0065. package com.example.iot_ha.data.local
0066. 
0067. import android.content.Context
0068. import androidx.room.Database
0069. import androidx.room.Room
0070. import androidx.room.RoomDatabase
0071. import androidx.room.TypeConverters
0072. import com.example.iot_ha.data.local.broker.Broker
0073. import com.example.iot_ha.data.local.broker.BrokerDAO
0074. import com.example.iot_ha.data.local.command.Command
0075. import com.example.iot_ha.data.local.command.CommandDAO
0076. import com.example.iot_ha.data.local.device.Device
0077. import com.example.iot_ha.data.local.device.DeviceDAO
0078. import com.example.iot_ha.data.local.room.RoomEntity
0079. import com.example.iot_ha.data.local.room.RoomEntityDAO
0080. 
0081. @Database(
0082.     entities = [Broker::class, Device::class, Command::class, RoomEntity::class],
0083.     version = 1,
0084.     exportSchema = false
0085. )
0086. @TypeConverters(MapTypeConvertor::class)
0087. abstract class RoomLocalDatabase : RoomDatabase() {
0088.     abstract fun brokerDAO(): BrokerDAO
0089.     abstract fun deviceDAO(): DeviceDAO
0090.     abstract fun commandDAO(): CommandDAO
0091.     abstract fun roomEntityDAO(): RoomEntityDAO
0092. 
0093.     companion object {
0094.         @Volatile
0095.         private var INSTANCE: RoomLocalDatabase? = null
0096. 
0097.         fun getInstance(context: Context): RoomLocalDatabase {
0098.             return INSTANCE ?: synchronized(this) {
0099.                 val instance = Room.databaseBuilder(
0100.                     context.applicationContext,
0101.                     RoomLocalDatabase::class.java,
0102.                     "room_local_database"
0103.                 ).build()
0104.                 INSTANCE = instance
0105.                 instance
0106.             }
0107.         }
0108.     }
0109. }

Broker.kt

0110. package com.example.iot_ha.data.local.broker
0111. 
0112. import androidx.room.Entity
0113. import androidx.room.PrimaryKey
0114. 
0115. @Entity(tableName = "brokers")
0116. data class Broker(
0117.     @PrimaryKey(autoGenerate = true) val id: Int = 0,
0118.     val serverUri: String,
0119.     val serverPort: Int,
0120.     val user: String?,
0121.     val password: String?
0122. )
0123. 


BrokerDAO.kt

0124. package com.example.iot_ha.data.local.broker
0125. 
0126. import androidx.room.Dao
0127. import androidx.room.Delete
0128. import androidx.room.Insert
0129. import androidx.room.OnConflictStrategy
0130. import androidx.room.Query
0131. 
0132. @Dao
0133. interface BrokerDAO {
0134.     @Insert(onConflict = OnConflictStrategy.REPLACE)
0135.     suspend fun insert(broker: Broker)
0136. 
0137.     @Query("SELECT * FROM brokers")
0138.     suspend fun getAllBrokers(): List<Broker>
0139. 
0140.     @Query("SELECT * FROM brokers ORDER BY id DESC LIMIT 1")
0141.     suspend fun getLastBroker(): Broker?
0142. 
0143.     @Delete
0144.     suspend fun deleteBroker(broker: Broker)
0145. }

BrokerState.kt

0146. package com.example.iot_ha.data.local.broker
0147. 
0148. import kotlinx.coroutines.flow.MutableStateFlow
0149. import kotlinx.coroutines.flow.StateFlow
0150. 
0151. object BrokerState {
0152.     private val _brokerId = MutableStateFlow<Int?>(null)
0153.     val brokerId: StateFlow<Int?> = _brokerId
0154. 
0155.     fun setBrokerId(id: Int) {
0156.         _brokerId.value = id
0157.     }
0158. }


DiscoveryState.kt

0159. package com.example.iot_ha.data.local.broker.discovery
0160. 
0161. import kotlinx.coroutines.CoroutineScope
0162. import kotlinx.coroutines.Dispatchers
0163. import kotlinx.coroutines.Job
0164. import kotlinx.coroutines.delay
0165. import kotlinx.coroutines.flow.MutableStateFlow
0166. import kotlinx.coroutines.flow.StateFlow
0167. import kotlinx.coroutines.launch
0168. 
0169. object DiscoveryState {
0170.     private val _isDiscoveryActive = MutableStateFlow(false)
0171.     val isDiscoveryActive: StateFlow<Boolean> = _isDiscoveryActive
0172. 
0173.     private var resetJob: Job? = null
0174. 
0175.     fun startDiscovery() {
0176.         _isDiscoveryActive.value = true
0177. 
0178.         resetJob?.cancel()
0179. 
0180.         resetJob = CoroutineScope(Dispatchers.Default).launch {
0181.             delay(255_000)
0182.             _isDiscoveryActive.value = false
0183.         }
0184.     }
0185. 
0186.     fun stopDiscovery() {
0187.         _isDiscoveryActive.value = false
0188.         resetJob?.cancel()
0189.     }
0190. }


Command.kt

0191. package com.example.iot_ha.data.local.command
0192. 
0193. import androidx.room.Entity
0194. import androidx.room.ForeignKey
0195. import androidx.room.PrimaryKey
0196. import androidx.room.TypeConverters
0197. import com.example.iot_ha.data.local.MapTypeConvertor
0198. import com.example.iot_ha.data.local.device.Device
0199. 
0200. @Entity(
0201.     tableName = "commands",
0202.     foreignKeys = [ForeignKey(
0203.         entity = Device::class,
0204.         parentColumns = ["id"],
0205.         childColumns = ["deviceId"],
0206.         onDelete = ForeignKey.CASCADE
0207.     )]
0208. )
0209. data class Command(
0210.     @PrimaryKey(autoGenerate = true) val id: Int = 0,
0211.     val deviceId: Int,
0212. 
0213.     val commandTopic: String,
0214. 
0215.     // for switch commands
0216.     val payloadOn: String?,
0217.     val payloadOff: String?,
0218. 
0219.     // for select commands
0220.     @TypeConverters(MapTypeConvertor::class) val options: Map<String, String>?,
0221.     val commandTemplate: String?,
0222. 
0223. 
0224.     val commandType: String,
0225. )


CommandDAO.kt

0226. package com.example.iot_ha.data.local.command
0227. 
0228. import androidx.room.Dao
0229. import androidx.room.Insert
0230. import androidx.room.OnConflictStrategy
0231. import androidx.room.Query
0232. import kotlinx.coroutines.flow.Flow
0233. 
0234. @Dao
0235. interface CommandDAO {
0236. 
0237.     @Query("SELECT * FROM commands WHERE commandTopic = :commandTopic LIMIT 1")
0238.     suspend fun getCommandByCommandTopic(commandTopic: String): Command?
0239. 
0240. 
0241.     @Query("SELECT * FROM commands WHERE deviceId = :deviceId AND commandType = 'switch' LIMIT 1")
0242.     suspend fun getSwitchCommandByDeviceId(deviceId: Int): Command?
0243. 
0244.     @Insert(onConflict = OnConflictStrategy.REPLACE)
0245.     suspend fun insertCommand(command: Command)
0246. 
0247.     @Query("SELECT * FROM commands WHERE commandType = :type")
0248.     fun getCommandsByTypeFlow(type: String): Flow<List<Command>>
0249. }

Device.kt

0250. package com.example.iot_ha.data.local.device
0251. 
0252. import androidx.room.Entity
0253. import androidx.room.ForeignKey
0254. import androidx.room.Index
0255. import androidx.room.PrimaryKey
0256. import com.example.iot_ha.data.local.broker.Broker
0257. import com.example.iot_ha.data.local.room.RoomEntity
0258. 
0259. @Entity(
0260.     tableName = "devices",
0261.     foreignKeys = [
0262.         ForeignKey(
0263.             entity = Broker::class,
0264.             parentColumns = ["id"],
0265.             childColumns = ["brokerId"],
0266.             onDelete = ForeignKey.CASCADE
0267.         ),
0268.         ForeignKey(
0269.             entity = RoomEntity::class,
0270.             parentColumns = ["id"],
0271.             childColumns = ["roomId"],
0272.             onDelete = ForeignKey.SET_NULL
0273.         )
0274.     ],
0275.     indices = [Index(value = ["roomId"])]
0276. )
0277. data class Device(
0278.     @PrimaryKey(autoGenerate = true) val id: Int = 0,
0279.     val ieeeAddr: String,
0280.     val friendlyName: String,
0281.     val modelId: String,
0282.     val topic: String,
0283.     val roomId: Long?,
0284.     val brokerId: Int
0285. ) {
0286.     companion object {
0287.         fun create(
0288.             ieeeAddr: String,
0289.             friendlyName: String,
0290.             modelId: String,
0291.             roomId: Long?,
0292.             brokerId: Int
0293.         ): Device {
0294.             val topic = "zigbee/0x$ieeeAddr"
0295.             return Device(
0296.                 ieeeAddr = "0x$ieeeAddr",
0297.                 friendlyName = friendlyName,
0298.                 modelId = modelId,
0299.                 topic = topic,
0300.                 roomId = roomId,
0301.                 brokerId = brokerId
0302.             )
0303.         }
0304.     }
0305. }


DeviceDAO.kt

0306. package com.example.iot_ha.data.local.device
0307. 
0308. import androidx.room.Dao
0309. import androidx.room.Insert
0310. import androidx.room.OnConflictStrategy
0311. import androidx.room.Query
0312. import androidx.room.Update
0313. import kotlinx.coroutines.flow.Flow
0314. 
0315. @Dao
0316. interface DeviceDAO {
0317.     @Query("SELECT * FROM devices WHERE brokerId = :brokerId")
0318.     suspend fun getDevicesByBroker(brokerId: Int): List<Device>
0319. 
0320.     @Query("SELECT * FROM devices WHERE brokerId = :brokerId")
0321.     fun getDevicesByBrokerFlow(brokerId: Int): Flow<List<Device>>
0322. 
0323.     @Query("SELECT * FROM devices")
0324.     suspend fun getAllDevices(): List<Device>
0325. 
0326.     @Query("SELECT * FROM devices WHERE ieeeAddr = :ieeeAddr LIMIT 1")
0327.     suspend fun getDeviceByIeeeAddr(ieeeAddr: String): Device?
0328. 
0329.     @Query("SELECT * FROM devices WHERE id = :deviceId LIMIT 1")
0330.     suspend fun getDeviceById(deviceId: Int): Device // ? был тут
0331. 
0332.     @Insert(onConflict = OnConflictStrategy.IGNORE)
0333.     suspend fun insertDevice(device: Device): Long
0334. 
0335.     @Query("SELECT * FROM devices WHERE roomId = :roomId")
0336.     fun getDevicesByRoomIdFlow(roomId: Int): Flow<List<Device>>
0337. 
0338.     @Update
0339.     suspend fun updateDevice(device: Device)
0340. 
0341.     @Query("SELECT COUNT(*) FROM devices WHERE roomId = :roomId")
0342.     suspend fun getDeviceCountForRoom(roomId: Long): Int
0343. }


DeviceState.kt

0344. package com.example.iot_ha.data.local.device
0345. 
0346. import kotlinx.coroutines.flow.MutableStateFlow
0347. import kotlinx.coroutines.flow.StateFlow
0348. import kotlinx.coroutines.flow.update
0349. 
0350. object DeviceState {
0351.     private val _devicesData = MutableStateFlow<Map<Int, Map<String, Any>>>(emptyMap())
0352.     val devicesData: StateFlow<Map<Int, Map<String, Any>>> = _devicesData
0353. 
0354.     fun updateDeviceData(deviceId: Int, payload: String) {
0355.         val parsedData: Map<String, Any> = parseJson(payload)
0356. 
0357.         _devicesData.update { currentData ->
0358.             currentData.toMutableMap().apply { this[deviceId] = parsedData }
0359.         }
0360.     }
0361. 
0362. 
0363.     private fun parseJson(json: String): Map<String, Any> {
0364.         return try {
0365.             val jsonObject = org.json.JSONObject(json)
0366.             jsonObject.keys().asSequence().associateWith { jsonObject.get(it) }
0367.         } catch (e: Exception) {
0368.             emptyMap()
0369.         }
0370.     }
0371. 
0372.     fun getDeviceValue(deviceId: Int, key: String): Any? {
0373.         return _devicesData.value[deviceId]?.get(key)
0374.     }
0375. }


RoomEntity.kt

0376. package com.example.iot_ha.data.local.room
0377. 
0378. import androidx.room.Entity
0379. import androidx.room.PrimaryKey
0380. 
0381. @Entity(tableName = "rooms")
0382. data class RoomEntity(
0383.     @PrimaryKey(autoGenerate = true) val id: Long = 0,
0384.     val name: String
0385. )


RoomEntityDAO.kt

0386. package com.example.iot_ha.data.local.room
0387. 
0388. import androidx.room.Dao
0389. import androidx.room.Insert
0390. import androidx.room.OnConflictStrategy
0391. import androidx.room.Query
0392. import kotlinx.coroutines.flow.Flow
0393. 
0394. @Dao
0395. interface RoomEntityDAO {
0396.     @Query("SELECT * FROM rooms")
0397.     fun getAllRooms(): Flow<List<RoomEntity>>
0398. 
0399.     @Insert(onConflict = OnConflictStrategy.REPLACE)
0400.     suspend fun insertRoom(room: RoomEntity)
0401. }


MQTTClient.kt

0402. package com.example.iot_ha.data.mqtt
0403. 
0404. import android.util.Log
0405. import com.example.iot_ha.data.local.broker.Broker
0406. import org.eclipse.paho.client.mqttv3.IMqttDeliveryToken
0407. import org.eclipse.paho.client.mqttv3.MqttCallback
0408. import org.eclipse.paho.client.mqttv3.MqttClient
0409. import org.eclipse.paho.client.mqttv3.MqttConnectOptions
0410. import org.eclipse.paho.client.mqttv3.MqttException
0411. import org.eclipse.paho.client.mqttv3.MqttMessage
0412. 
0413. object MQTTClient {
0414.     private var mqttClient: MqttClient? = null
0415.     private var broker: Broker? = null
0416.     private var messageHandler: MQTTMessageHandler? = null
0417. 
0418.     fun initialize(broker: Broker, handler: MQTTMessageHandler): MQTTClient {
0419.         this.broker = broker
0420.         this.messageHandler = handler
0421.         return this
0422.     }
0423. 
0424.     fun reinitialize(newBroker: Broker, handler: MQTTMessageHandler): MQTTClient {
0425.         disconnect()
0426.         broker = newBroker
0427.         messageHandler = handler
0428.         return this
0429.     }
0430. 
0431.     fun getInstance(): MQTTClient {
0432.         return this
0433.     }
0434. 
0435.     fun connect(): Boolean {
0436.         return try {
0437.             val clientId = MqttClient.generateClientId()
0438.             mqttClient =
0439.                 MqttClient("tcp://${broker?.serverUri}:${broker?.serverPort}", clientId, null)
0440. 
0441.             val options = MqttConnectOptions().apply {
0442.                 userName = broker?.user
0443.                 password = broker?.password?.toCharArray()
0444.                 isAutomaticReconnect = true
0445.                 isCleanSession = true
0446.             }
0447. 
0448.             mqttClient?.connect(options)
0449.             Log.i("MQTT", "✅ Подключение успешно!")
0450.             true
0451.         } catch (e: MqttException) {
0452.             Log.e("MQTT", "Ошибка подключения: ${e.reasonCode} - ${e.message}")
0453.             false
0454.         }
0455.     }
0456. 
0457.     fun subscribe(topic: String) {
0458.         try {
0459.             mqttClient?.setCallback(object : MqttCallback {
0460.                 override fun connectionLost(cause: Throwable?) {
0461.                     Log.e("MQTT", "Соединение потеряно: ${cause?.message}")
0462.                 }
0463. 
0464.                 override fun messageArrived(topic: String, message: MqttMessage) {
0465.                     val payload = message.toString()
0466.                     Log.i("MQTT", "📩 Получено сообщение: $message на топик: $topic")
0467. 
0468.                     messageHandler?.handleMessage(topic, payload)
0469.                 }
0470. 
0471.                 override fun deliveryComplete(token: IMqttDeliveryToken) {
0472.                     Log.i("MQTT", "Сообщение отправлено")
0473.                 }
0474.             })
0475. 
0476.             mqttClient?.subscribe(topic)
0477.             Log.i("MQTT", "📡 Подписался на $topic")
0478.         } catch (e: MqttException) {
0479.             Log.e("MQTT", "Ошибка подписки: ${e.reasonCode} - ${e.message}")
0480.         }
0481.     }
0482. 
0483.     fun publish(topic: String, payload: String, qos: Int = 1, retained: Boolean = false) {
0484.         try {
0485.             val message = MqttMessage(payload.toByteArray()).apply {
0486.                 this.qos = qos
0487.                 this.isRetained = retained
0488.             }
0489.             mqttClient?.publish(topic, message)
0490.             Log.i("MQTT", "📤 Отправлено сообщение: $payload в топик: $topic")
0491.         } catch (e: MqttException) {
0492.             Log.e("MQTT", "Ошибка отправки сообщения: ${e.reasonCode} - ${e.message}")
0493.         }
0494.     }
0495. 
0496.     fun disconnect() {
0497.         try {
0498.             mqttClient?.disconnect()
0499.             Log.i("MQTT", "🔌 Отключен от брокера")
0500.         } catch (e: MqttException) {
0501.             Log.e("MQTT", "Ошибка отключения: ${e.message}")
0502.         }
0503.     }
0504. }


MQTTMessageHandler.kt

0505. package com.example.iot_ha.data.mqtt
0506. 
0507. import android.util.Log
0508. import com.example.iot_ha.data.local.broker.BrokerState
0509. import com.example.iot_ha.data.local.command.Command
0510. import com.example.iot_ha.data.local.device.Device
0511. import com.example.iot_ha.data.local.device.DeviceState
0512. import com.example.iot_ha.ui.viewmodels.shared.DevicesViewModel
0513. import com.example.iot_ha.ui.viewmodels.shared.SensorsViewModel
0514. import org.json.JSONObject
0515. 
0516. class MQTTMessageHandler(
0517.     private val sensorsViewModel: SensorsViewModel,
0518.     private val devicesViewModel: DevicesViewModel,
0519. ) {
0520.     fun handleMessage(topic: String, payload: String) {
0521.         Log.i("MQTTHandler", "📩 Обрабатываем сообщение: $payload с топика: $topic")
0522. 
0523.         when {
0524.             topic.startsWith("zigbee/0x") -> handleDeviceStateMessage(topic, payload)
0525.             topic.startsWith("homeassistant/") -> handleDeviceCommandMessage(topic, payload)
0526.             topic.startsWith("devicelist") -> handleDeviceListMessage(payload)
0527.             else -> Log.i("MQTTHandler", "⚠ Необрабатываемый топик: $topic")
0528.         }
0529.     }
0530. 
0531.     private fun handleDeviceStateMessage(topic: String, payload: String) {
0532.         val ieeeAddr = extractIeeeAddrFromTopic(topic)
0533.         val deviceId = devicesViewModel.devices.value.find { it.ieeeAddr == ieeeAddr }?.id
0534. 
0535.         if (deviceId != null) {
0536.             DeviceState.updateDeviceData(deviceId, payload)
0537.             Log.i("KAKASHKI", "PRESS")
0538.             Log.i("STATE", DeviceState.devicesData.value.toString())
0539. //            when (val value = DeviceState.getDeviceValue(deviceId, "power")) {
0540. //                is String -> println("Значение - строка: $value")
0541. //                is Int -> println("Значение - число: $value")
0542. //                is Double -> println("Значение - дробное число: $value")
0543. //                is Boolean -> println("Значение - булево: $value")
0544. //                else -> println("Неизвестный тип: ${value?.javaClass}")
0545. //            }
0546. 
0547.         } else {
0548.             println("Устройство с IEEE Addr $ieeeAddr не найдено")
0549.         }
0550.     }
0551. 
0552. 
0553.     private fun handleDeviceCommandMessage(topic: String, payload: String) {
0554.         try {
0555.             val jsonObject = JSONObject(payload)
0556. 
0557.             val commandTopic =
0558.                 jsonObject.optString("command_topic").takeIf { it.isNotBlank() } ?: return
0559.             val payloadOn = jsonObject.optString("payload_on", null)
0560.             val payloadOff = jsonObject.optString("payload_off", null)
0561.             val commandTemplate = jsonObject.optString("command_template", null)
0562. 
0563.             val options = jsonObject.optJSONArray("options")?.let { array ->
0564.                 (0 until array.length()).associate { index ->
0565.                     array.getString(index) to array.getString(
0566.                         index
0567.                     )
0568.                 }
0569.             } ?: emptyMap()
0570. 
0571.             val commandType = extractCommandTypeFromTopic(topic)
0572.             val deviceIeeeAddr = extractIeeeAddrFromTopic(topic)
0573. 
0574.             if (deviceIeeeAddr != null && commandType != "unknown") {
0575.                 devicesViewModel.getDeviceIdByIeeeAddr(deviceIeeeAddr) { deviceId ->
0576.                     if (deviceId != null) {
0577.                         val command = Command(
0578.                             deviceId = deviceId,
0579.                             commandTopic = commandTopic,
0580.                             payloadOn = payloadOn,
0581.                             payloadOff = payloadOff,
0582.                             options = options,
0583.                             commandTemplate = commandTemplate,
0584.                             commandType = commandType
0585.                         )
0586. 
0587.                         devicesViewModel.addCommandIfNotExists(command)
0588.                         Log.i("MQTTHandler", "📥 Команда сохранена: $command")
0589.                     } else {
0590.                         Log.e("DeviceId", "Device not found for IEEE Address: $deviceIeeeAddr")
0591.                     }
0592.                 }
0593.             }
0594.         } catch (e: Exception) {
0595.             Log.e("MQTTHandler", "Ошибка обработки команды: ${e.message}")
0596.         }
0597.     }
0598. 
0599.     private fun extractCommandTypeFromTopic(topic: String): String {
0600.         return when {
0601.             topic.contains("/switch/", ignoreCase = true) -> "switch"
0602. //            topic.contains("/select/", ignoreCase = true) -> "select"
0603. //            topic.contains("/light/", ignoreCase = true) -> "dimmer"
0604.             else -> "unknown"
0605.         }
0606.     }
0607. 
0608.     private fun extractIeeeAddrFromTopic(topic: String): String? {
0609.         val regex = Regex("0x[0-9A-Fa-f]+")
0610.         return regex.find(topic)?.value
0611.     }
0612. 
0613.     private fun handleDeviceListMessage(payload: String) {
0614.         try {
0615.             val jsonObject = JSONObject(payload)
0616. 
0617.             val key = jsonObject.keys().asSequence().firstOrNull() ?: "Нет данных"
0618.             val deviceJson = jsonObject.optJSONObject(key) ?: JSONObject()
0619. 
0620.             val ieeeAddr = deviceJson.optString("ieeeAddr")
0621.             val friendlyName = deviceJson.getString("friendly_name")
0622.             val modelId = deviceJson.optString("ModelId")
0623. 
0624.             val device = Device.create(
0625.                 ieeeAddr = ieeeAddr,
0626.                 friendlyName = friendlyName,
0627.                 modelId = modelId,
0628.                 roomId = null,
0629.                 brokerId = BrokerState.brokerId.value ?: -1
0630.             )
0631. 
0632.             Log.i("DEVICE", "📥 Получено устройство: $device")
0633. 
0634.             devicesViewModel.addDeviceIfNotExists(device)
0635. 
0636.         } catch (e: Exception) {
0637.             Log.e("DEVICE", "Ошибка обработки списка устройств: ${e.message}")
0638.         }
0639.     }
0640. }
0641. 


BrokerInputForm.kt

0642. package com.example.iot_ha.ui.components.broker
0643. 
0644. import androidx.compose.foundation.layout.Column
0645. import androidx.compose.foundation.layout.Spacer
0646. import androidx.compose.foundation.layout.fillMaxWidth
0647. import androidx.compose.foundation.layout.height
0648. import androidx.compose.foundation.shape.RoundedCornerShape
0649. import androidx.compose.material3.Button
0650. import androidx.compose.material3.ButtonDefaults
0651. import androidx.compose.material3.MaterialTheme
0652. import androidx.compose.material3.Text
0653. import androidx.compose.runtime.Composable
0654. import androidx.compose.ui.Modifier
0655. import androidx.compose.ui.graphics.Color
0656. import androidx.compose.ui.unit.dp
0657. import com.example.iot_ha.ui.components.common.CustomOutlinedTextField
0658. 
0659. @Composable
0660. fun BrokerInputForm(
0661.     serverUri: String,
0662.     serverPort: String,
0663.     user: String,
0664.     password: String,
0665.     onServerUriChange: (String) -> Unit,
0666.     onServerPortChange: (String) -> Unit,
0667.     onUserChange: (String) -> Unit,
0668.     onPasswordChange: (String) -> Unit,
0669.     onAddBroker: () -> Unit
0670. ) {
0671.     Column(modifier = Modifier.fillMaxWidth()) {
0672.         CustomOutlinedTextField(
0673.             value = serverUri,
0674.             label = "Server URI",
0675.             onValueChange = onServerUriChange
0676.         )
0677.         CustomOutlinedTextField(
0678.             value = serverPort,
0679.             label = "Server Port",
0680.             onValueChange = onServerPortChange
0681.         )
0682.         CustomOutlinedTextField(
0683.             value = user,
0684.             label = "User (optional)",
0685.             onValueChange = onUserChange
0686.         )
0687.         CustomOutlinedTextField(
0688.             value = password,
0689.             label = "Password (optional)",
0690.             onValueChange = onPasswordChange
0691.         )
0692. 
0693.         Spacer(modifier = Modifier.height(12.dp))
0694. 
0695.         Button(
0696.             onClick = onAddBroker,
0697.             modifier = Modifier.fillMaxWidth(),
0698.             shape = RoundedCornerShape(12.dp),
0699.             colors = ButtonDefaults.buttonColors(containerColor = MaterialTheme.colorScheme.primary)
0700.         ) {
0701.             Text("Add broker", color = Color.White)
0702.         }
0703.     }
0704. }


BrokerItem.kt

0705. package com.example.iot_ha.ui.components.broker
0706. 
0707. import androidx.compose.foundation.layout.Arrangement
0708. import androidx.compose.foundation.layout.Column
0709. import androidx.compose.foundation.layout.Row
0710. import androidx.compose.foundation.layout.Spacer
0711. import androidx.compose.foundation.layout.fillMaxWidth
0712. import androidx.compose.foundation.layout.height
0713. import androidx.compose.foundation.layout.padding
0714. import androidx.compose.foundation.layout.width
0715. import androidx.compose.foundation.shape.RoundedCornerShape
0716. import androidx.compose.material3.Button
0717. import androidx.compose.material3.ButtonDefaults
0718. import androidx.compose.material3.Card
0719. import androidx.compose.material3.CardDefaults
0720. import androidx.compose.material3.MaterialTheme
0721. import androidx.compose.material3.OutlinedButton
0722. import androidx.compose.material3.Text
0723. import androidx.compose.runtime.Composable
0724. import androidx.compose.ui.Modifier
0725. import androidx.compose.ui.draw.shadow
0726. import androidx.compose.ui.graphics.Color
0727. import androidx.compose.ui.unit.dp
0728. import com.example.iot_ha.data.local.broker.Broker
0729. 
0730. @Composable
0731. fun BrokerItem(broker: Broker, onDelete: () -> Unit, onLogin: () -> Unit) {
0732.     Card(
0733.         modifier = Modifier
0734.             .fillMaxWidth()
0735.             .padding(6.dp)
0736.             .shadow(4.dp, shape = RoundedCornerShape(12.dp)),
0737.         elevation = CardDefaults.elevatedCardElevation(8.dp)
0738.     ) {
0739.         Column(modifier = Modifier.padding(12.dp)) {
0740.             Text(text = "URI: ${broker.serverUri}", style = MaterialTheme.typography.bodyLarge)
0741.             Text(text = "Port: ${broker.serverPort}", style = MaterialTheme.typography.bodyMedium)
0742.             broker.user?.let {
0743.                 Text(
0744.                     text = "User: $it",
0745.                     style = MaterialTheme.typography.bodyMedium
0746.                 )
0747.             }
0748.             broker.password?.let {
0749.                 Text(
0750.                     text = "Password: ${"*".repeat(it.length)}",
0751.                     style = MaterialTheme.typography.bodyMedium
0752.                 )
0753.             }
0754. 
0755.             Spacer(modifier = Modifier.height(8.dp))
0756. 
0757.             Row(
0758.                 modifier = Modifier.fillMaxWidth(),
0759.                 horizontalArrangement = Arrangement.SpaceBetween
0760.             ) {
0761.                 Button(
0762.                     onClick = onLogin,
0763.                     modifier = Modifier.weight(1f),
0764.                     shape = RoundedCornerShape(12.dp),
0765.                     colors = ButtonDefaults.buttonColors(containerColor = MaterialTheme.colorScheme.primary)
0766.                 ) {
0767.                     Text("Login", color = Color.White)
0768.                 }
0769.                 Spacer(modifier = Modifier.width(6.dp))
0770.                 OutlinedButton(
0771.                     onClick = onDelete,
0772.                     modifier = Modifier.weight(1f),
0773.                     shape = RoundedCornerShape(12.dp),
0774.                     colors = ButtonDefaults.outlinedButtonColors(contentColor = MaterialTheme.colorScheme.error)
0775.                 ) {
0776.                     Text("Delete")
0777.                 }
0778.             }
0779.         }
0780.     }
0781. }


BrokerList.kt

0782. package com.example.iot_ha.ui.components.broker
0783. 
0784. 
0785. import androidx.compose.foundation.layout.Spacer
0786. import androidx.compose.foundation.layout.height
0787. import androidx.compose.material3.MaterialTheme
0788. import androidx.compose.material3.Text
0789. import androidx.compose.runtime.Composable
0790. import androidx.compose.ui.Modifier
0791. import androidx.compose.ui.unit.dp
0792. import com.example.iot_ha.data.local.broker.Broker
0793. 
0794. @Composable
0795. fun BrokerList(
0796.     brokers: List<Broker>,
0797.     onDelete: (Broker) -> Unit,
0798.     onLogin: (Broker) -> Unit
0799. ) {
0800.     brokers.lastOrNull()?.let { broker ->
0801.         Text("Recently used broker:", style = MaterialTheme.typography.labelMedium)
0802.         Spacer(modifier = Modifier.height(1.dp))
0803.         BrokerItem(
0804.             broker = broker,
0805.             onDelete = { onDelete(broker) },
0806.             onLogin = { onLogin(broker) }
0807.         )
0808.     }
0809. }

CustomOutlinedTextField.kt

0810. package com.example.iot_ha.ui.components.common
0811. 
0812. import androidx.compose.foundation.layout.Spacer
0813. import androidx.compose.foundation.layout.fillMaxWidth
0814. import androidx.compose.foundation.layout.height
0815. import androidx.compose.foundation.shape.RoundedCornerShape
0816. import androidx.compose.material3.OutlinedTextField
0817. import androidx.compose.material3.Text
0818. import androidx.compose.runtime.Composable
0819. import androidx.compose.ui.Modifier
0820. import androidx.compose.ui.unit.dp
0821. 
0822. @Composable
0823. fun CustomOutlinedTextField(
0824.     value: String,
0825.     label: String,
0826.     onValueChange: (String) -> Unit,
0827. ) {
0828.     OutlinedTextField(
0829.         value = value,
0830.         onValueChange = onValueChange,
0831.         label = { Text(label) },
0832.         shape = RoundedCornerShape(12.dp),
0833.         modifier = Modifier.fillMaxWidth()
0834.     )
0835.     Spacer(modifier = Modifier.height(8.dp))
0836. }


TabButton.kt

0837. package com.example.iot_ha.ui.components.common
0838. 
0839. import androidx.compose.foundation.BorderStroke
0840. import androidx.compose.foundation.clickable
0841. import androidx.compose.foundation.layout.Arrangement
0842. import androidx.compose.foundation.layout.Row
0843. import androidx.compose.foundation.layout.height
0844. import androidx.compose.foundation.layout.padding
0845. import androidx.compose.foundation.shape.RoundedCornerShape
0846. import androidx.compose.material3.MaterialTheme
0847. import androidx.compose.material3.Surface
0848. import androidx.compose.material3.Text
0849. import androidx.compose.runtime.Composable
0850. import androidx.compose.ui.Alignment
0851. import androidx.compose.ui.Modifier
0852. import androidx.compose.ui.draw.clip
0853. import androidx.compose.ui.graphics.Color
0854. import androidx.compose.ui.text.font.FontWeight
0855. import androidx.compose.ui.unit.dp
0856. 
0857. @Composable
0858. fun TabButton(title: String, isSelected: Boolean, onClick: () -> Unit) {
0859.     val borderColor = if (isSelected) MaterialTheme.colorScheme.primary else Color.Transparent
0860.     val textColor = Color.Black
0861.     Surface(
0862.         modifier = Modifier
0863.             .padding(horizontal = 4.dp, vertical = 4.dp)
0864.             .height(40.dp)
0865.             .clip(RoundedCornerShape(8.dp))
0866.             .clickable { onClick() },
0867.         color = if (isSelected) MaterialTheme.colorScheme.primary.copy(alpha = 0.1f) else Color.Transparent,
0868.         shape = RoundedCornerShape(8.dp),
0869.         border = BorderStroke(if (isSelected) 2.dp else 0.dp, borderColor)
0870.     ) {
0871.         Row(
0872.             modifier = Modifier.padding(horizontal = 20.dp, vertical = 8.dp),
0873.             verticalAlignment = Alignment.CenterVertically,
0874.             horizontalArrangement = Arrangement.Center
0875.         ) {
0876.             Text(
0877.                 text = title,
0878.                 color = textColor,
0879.                 style = MaterialTheme.typography.labelLarge,
0880.                 fontWeight = if (isSelected) FontWeight.Bold else FontWeight.Normal
0881.             )
0882.         }
0883.     }
0884. }

DeviceCard.kt

0885. package com.example.iot_ha.ui.components.devices
0886. 
0887. import androidx.compose.foundation.Image
0888. import androidx.compose.foundation.clickable
0889. import androidx.compose.foundation.layout.Column
0890. import androidx.compose.foundation.layout.Row
0891. import androidx.compose.foundation.layout.Spacer
0892. import androidx.compose.foundation.layout.fillMaxWidth
0893. import androidx.compose.foundation.layout.padding
0894. import androidx.compose.foundation.layout.size
0895. import androidx.compose.foundation.layout.width
0896. import androidx.compose.foundation.shape.RoundedCornerShape
0897. import androidx.compose.material3.Card
0898. import androidx.compose.material3.CardDefaults
0899. import androidx.compose.material3.DropdownMenuItem
0900. import androidx.compose.material3.ExperimentalMaterial3Api
0901. import androidx.compose.material3.ExposedDropdownMenuBox
0902. import androidx.compose.material3.ExposedDropdownMenuDefaults
0903. import androidx.compose.material3.Slider
0904. import androidx.compose.material3.SliderDefaults
0905. import androidx.compose.material3.Switch
0906. import androidx.compose.material3.SwitchDefaults
0907. import androidx.compose.material3.Text
0908. import androidx.compose.material3.TextField
0909. import androidx.compose.runtime.Composable
0910. import androidx.compose.runtime.getValue
0911. import androidx.compose.runtime.mutableFloatStateOf
0912. import androidx.compose.runtime.mutableStateOf
0913. import androidx.compose.runtime.remember
0914. import androidx.compose.runtime.setValue
0915. import androidx.compose.ui.Alignment
0916. import androidx.compose.ui.Modifier
0917. import androidx.compose.ui.draw.clip
0918. import androidx.compose.ui.graphics.Color
0919. import androidx.compose.ui.res.painterResource
0920. import androidx.compose.ui.text.font.FontWeight
0921. import androidx.compose.ui.unit.dp
0922. import androidx.compose.ui.unit.sp
0923. import androidx.navigation.NavHostController
0924. 
0925. @OptIn(ExperimentalMaterial3Api::class)
0926. @Composable
0927. fun DeviceCard(
0928.     deviceId: Int,
0929.     imageRes: Int,
0930.     name: String,
0931.     type: String,
0932.     value: Any,
0933.     navController: NavHostController,
0934.     onToggle: ((Boolean) -> Unit)? = null,
0935.     onSliderChange: ((Float) -> Unit)? = null,
0936.     onSelectChange: ((String) -> Unit)? = null,
0937.     options: List<String> = emptyList()
0938. ) {
0939.     var checked by remember { mutableStateOf(value as? Boolean ?: false) }
0940.     var sliderValue by remember { mutableFloatStateOf(value as? Float ?: 0f) }
0941.     var selectedOption by remember {
0942.         mutableStateOf(
0943.             value as? String ?: options.firstOrNull().orEmpty()
0944.         )
0945.     }
0946.     var expanded by remember { mutableStateOf(false) }
0947. 
0948.     Card(
0949.         shape = RoundedCornerShape(16.dp),
0950.         modifier = Modifier
0951.             .fillMaxWidth()
0952.             .padding(8.dp)
0953.             .clickable { navController.navigate("device_details/$deviceId") },
0954.         elevation = CardDefaults.cardElevation(6.dp)
0955.     ) {
0956.         Row(
0957.             verticalAlignment = Alignment.CenterVertically,
0958.             modifier = Modifier.padding(16.dp)
0959.         ) {
0960.             Image(
0961.                 painter = painterResource(id = imageRes),
0962.                 contentDescription = name,
0963.                 modifier = Modifier
0964.                     .size(64.dp)
0965.                     .clip(RoundedCornerShape(12.dp))
0966.             )
0967.             Spacer(modifier = Modifier.width(16.dp))
0968.             Column(modifier = Modifier.weight(1f)) {
0969.                 Text(
0970.                     text = name,
0971.                     fontSize = 20.sp,
0972.                     fontWeight = FontWeight.Bold,
0973.                     color = Color.Black
0974.                 )
0975.                 when (type) {
0976.                     "switch" -> {
0977.                         Switch(
0978.                             checked = checked,
0979.                             onCheckedChange = {
0980.                                 checked = it
0981.                                 onToggle?.invoke(it)
0982.                             },
0983.                             colors = SwitchDefaults.colors(
0984.                                 checkedThumbColor = Color.White,
0985.                                 checkedTrackColor = Color(0xFF4CAF50),
0986.                                 uncheckedThumbColor = Color.White,
0987.                                 uncheckedTrackColor = Color(0xFFF44336)
0988.                             )
0989.                         )
0990.                     }
0991. 
0992.                     "slider" -> {
0993.                         Slider(
0994.                             value = sliderValue,
0995.                             onValueChange = {
0996.                                 sliderValue = it
0997.                                 onSliderChange?.invoke(it)
0998.                             },
0999.                             valueRange = 0f..100f,
1000.                             colors = SliderDefaults.colors(
1001.                                 thumbColor = Color(0xFF8A9F9B),
1002.                                 activeTrackColor = Color(0xFFA6B6A9)
1003.                             )
1004.                         )
1005.                     }
1006. 
1007.                     "select" -> {
1008.                         ExposedDropdownMenuBox(
1009.                             expanded = expanded,
1010.                             onExpandedChange = { expanded = it }
1011.                         ) {
1012.                             TextField(
1013.                                 value = selectedOption,
1014.                                 onValueChange = {},
1015.                                 readOnly = true,
1016.                                 modifier = Modifier.menuAnchor(),
1017.                                 label = { Text("Выберите") },
1018.                                 trailingIcon = { ExposedDropdownMenuDefaults.TrailingIcon(expanded = expanded) }
1019.                             )
1020.                             ExposedDropdownMenu(
1021.                                 expanded = expanded,
1022.                                 onDismissRequest = { expanded = false }
1023.                             ) {
1024.                                 options.forEach { option ->
1025.                                     DropdownMenuItem(
1026.                                         text = { Text(option) },
1027.                                         onClick = {
1028.                                             selectedOption = option
1029.                                             expanded = false
1030.                                             onSelectChange?.invoke(option)
1031.                                         }
1032.                                     )
1033.                                 }
1034.                             }
1035.                         }
1036.                     }
1037. 
1038.                     else -> {
1039.                         Text(text = value.toString(), fontSize = 14.sp, color = Color.Black)
1040.                     }
1041.                 }
1042.             }
1043.         }
1044.     }
1045. }


DeviceDetails.kt

1046. package com.example.iot_ha.ui.components.devices
1047. 
1048. import androidx.compose.foundation.background
1049. import androidx.compose.foundation.layout.Arrangement
1050. import androidx.compose.foundation.layout.Box
1051. import androidx.compose.foundation.layout.Column
1052. import androidx.compose.foundation.layout.Row
1053. import androidx.compose.foundation.layout.fillMaxWidth
1054. import androidx.compose.foundation.layout.padding
1055. import androidx.compose.foundation.shape.RoundedCornerShape
1056. import androidx.compose.material3.MaterialTheme
1057. import androidx.compose.material3.Text
1058. import androidx.compose.runtime.Composable
1059. import androidx.compose.ui.Alignment
1060. import androidx.compose.ui.Modifier
1061. import androidx.compose.ui.draw.clip
1062. import androidx.compose.ui.unit.dp
1063. import androidx.compose.ui.unit.sp
1064. 
1065. @Composable
1066. fun DeviceDetails(deviceData: Map<String, Any>) {
1067.     Column(modifier = Modifier.fillMaxWidth()) {
1068.         deviceData.forEach { (key, value) ->
1069.             Box(
1070.                 modifier = Modifier
1071.                     .fillMaxWidth()
1072.                     .padding(vertical = 4.dp)
1073.                     .clip(RoundedCornerShape(12.dp))
1074.                     .background(MaterialTheme.colorScheme.surfaceVariant)
1075.                     .padding(12.dp)
1076.             ) {
1077.                 Row(
1078.                     modifier = Modifier.fillMaxWidth(),
1079.                     horizontalArrangement = Arrangement.SpaceBetween,
1080.                     verticalAlignment = Alignment.CenterVertically
1081.                 ) {
1082.                     Text(
1083.                         text = key.replaceFirstChar { if (it.isLowerCase()) it.titlecase() else it.toString() },
1084.                         style = MaterialTheme.typography.bodyLarge.copy(fontSize = 16.sp),
1085.                         color = MaterialTheme.colorScheme.onSurfaceVariant
1086.                     )
1087.                     Text(
1088.                         text = value.toString(),
1089.                         style = MaterialTheme.typography.bodyLarge.copy(fontSize = 16.sp),
1090.                         color = MaterialTheme.colorScheme.onSurfaceVariant
1091.                     )
1092.                 }
1093.             }
1094.         }
1095.     }
1096. }


DeviceNotFound.kt

1097. package com.example.iot_ha.ui.components.devices
1098. 
1099. import androidx.compose.foundation.layout.Box
1100. import androidx.compose.foundation.layout.fillMaxSize
1101. import androidx.compose.material3.MaterialTheme
1102. import androidx.compose.material3.Text
1103. import androidx.compose.runtime.Composable
1104. import androidx.compose.ui.Alignment
1105. import androidx.compose.ui.Modifier
1106. 
1107. @Composable
1108. fun DeviceNotFoundMessage() {
1109.     Box(
1110.         modifier = Modifier.fillMaxSize(),
1111.         contentAlignment = Alignment.Center
1112.     ) {
1113.         Text(
1114.             text = "Device not found",
1115.             style = MaterialTheme.typography.bodyLarge,
1116.             color = MaterialTheme.colorScheme.error
1117.         )
1118.     }
1119. }

DeviceTitle.kt

1120. package com.example.iot_ha.ui.components.devices
1121. 
1122. import androidx.compose.foundation.layout.padding
1123. import androidx.compose.foundation.layout.statusBarsPadding
1124. import androidx.compose.material3.MaterialTheme
1125. import androidx.compose.material3.Text
1126. import androidx.compose.runtime.Composable
1127. import androidx.compose.ui.Modifier
1128. import androidx.compose.ui.unit.dp
1129. 
1130. @Composable
1131. fun DeviceTitle(friendlyName: String) {
1132.     Text(
1133.         text = friendlyName,
1134.         style = MaterialTheme.typography.titleLarge,
1135.         color = MaterialTheme.colorScheme.primary,
1136.         modifier = Modifier
1137.             .statusBarsPadding()
1138.             .padding(vertical = 16.dp)
1139.     )
1140. }

AddRoomDialog.kt

1141. package com.example.iot_ha.ui.components.rooms
1142. 
1143. import androidx.compose.foundation.layout.Column
1144. import androidx.compose.material3.AlertDialog
1145. import androidx.compose.material3.Button
1146. import androidx.compose.material3.Text
1147. import androidx.compose.runtime.Composable
1148. import androidx.compose.runtime.getValue
1149. import androidx.compose.runtime.mutableStateOf
1150. import androidx.compose.runtime.remember
1151. import androidx.compose.runtime.setValue
1152. import com.example.iot_ha.ui.components.common.CustomOutlinedTextField
1153. 
1154. @Composable
1155. fun AddRoomDialog(
1156.     onDismiss: () -> Unit,
1157.     onConfirm: (String) -> Unit
1158. ) {
1159.     var roomName by remember { mutableStateOf("") }
1160. 
1161.     AlertDialog(
1162.         onDismissRequest = onDismiss,
1163.         confirmButton = {
1164.             Button(onClick = {
1165.                 if (roomName.isNotBlank()) {
1166.                     onConfirm(roomName)
1167.                     onDismiss()
1168.                 }
1169.             }) {
1170.                 Text("Добавить")
1171.             }
1172.         },
1173.         dismissButton = {
1174.             Button(onClick = onDismiss) {
1175.                 Text("Отмена")
1176.             }
1177.         },
1178.         title = { Text("Добавить комнату") },
1179.         text = {
1180.             Column {
1181.                 Text("Введите название комнаты:")
1182.                 CustomOutlinedTextField(
1183.                     value = roomName,
1184.                     label = "Название комнаты",
1185.                     onValueChange = { roomName = it }
1186.                 )
1187.             }
1188.         }
1189.     )
1190. }


RoomCard.kt

1191. package com.example.iot_ha.ui.components.rooms
1192. 
1193. import androidx.compose.foundation.Image
1194. import androidx.compose.foundation.background
1195. import androidx.compose.foundation.clickable
1196. import androidx.compose.foundation.layout.Box
1197. import androidx.compose.foundation.layout.Column
1198. import androidx.compose.foundation.layout.Row
1199. import androidx.compose.foundation.layout.Spacer
1200. import androidx.compose.foundation.layout.fillMaxWidth
1201. import androidx.compose.foundation.layout.padding
1202. import androidx.compose.foundation.layout.size
1203. import androidx.compose.foundation.layout.width
1204. import androidx.compose.foundation.shape.RoundedCornerShape
1205. import androidx.compose.material3.Card
1206. import androidx.compose.material3.CardDefaults
1207. import androidx.compose.material3.MaterialTheme
1208. import androidx.compose.material3.Text
1209. import androidx.compose.runtime.Composable
1210. import androidx.compose.ui.Alignment
1211. import androidx.compose.ui.Modifier
1212. import androidx.compose.ui.draw.clip
1213. import androidx.compose.ui.graphics.Color
1214. import androidx.compose.ui.res.painterResource
1215. import androidx.compose.ui.text.font.FontWeight
1216. import androidx.compose.ui.unit.dp
1217. import androidx.compose.ui.unit.sp
1218. import androidx.navigation.NavHostController
1219. import com.example.iot_ha.R
1220. 
1221. @Composable
1222. fun RoomCard(
1223.     roomId: Int,
1224.     roomName: String,
1225.     deviceCount: Int,
1226.     navHostController: NavHostController
1227. ) {
1228.     Card(
1229.         shape = RoundedCornerShape(16.dp),
1230.         modifier = Modifier
1231.             .fillMaxWidth()
1232.             .padding(8.dp)
1233.             .clickable { navHostController.navigate("room_details/$roomId") },
1234.         elevation = CardDefaults.cardElevation(6.dp),
1235.         colors = CardDefaults.cardColors(containerColor = Color(0xFFE3F2FD))
1236.     ) {
1237.         Row(
1238.             verticalAlignment = Alignment.CenterVertically,
1239.             modifier = Modifier.padding(16.dp)
1240.         ) {
1241.             Image(
1242.                 painter = painterResource(id = R.drawable.mqtt_logo),
1243.                 contentDescription = roomName,
1244.                 modifier = Modifier
1245.                     .size(64.dp)
1246.                     .clip(RoundedCornerShape(12.dp))
1247.             )
1248.             Spacer(modifier = Modifier.width(16.dp))
1249.             Column(modifier = Modifier.weight(1f)) {
1250.                 Text(
1251.                     text = roomName,
1252.                     fontSize = 20.sp,
1253.                     fontWeight = FontWeight.Bold,
1254.                     color = Color.Black
1255.                 )
1256.                 Text(
1257.                     text = "Комната №$roomId",
1258.                     fontSize = 14.sp,
1259.                     color = Color.Gray
1260.                 )
1261.             }
1262.             Spacer(modifier = Modifier.width(16.dp))
1263.             Box(
1264.                 contentAlignment = Alignment.Center,
1265.                 modifier = Modifier
1266.                     .size(32.dp)
1267.                     .clip(RoundedCornerShape(16.dp))
1268.                     .background(MaterialTheme.colorScheme.primary)
1269.             ) {
1270.                 Text(
1271.                     text = deviceCount.toString(),
1272.                     color = Color.White,
1273.                     fontSize = 14.sp,
1274.                     fontWeight = FontWeight.Bold
1275.                 )
1276.             }
1277.         }
1278.     }
1279. }
1280. 


AppNavHost.kt

1281. package com.example.iot_ha.ui.navigation
1282. 
1283. import androidx.compose.runtime.Composable
1284. import androidx.compose.ui.platform.LocalContext
1285. import androidx.lifecycle.viewmodel.compose.viewModel
1286. import androidx.navigation.NavHostController
1287. import androidx.navigation.compose.NavHost
1288. import androidx.navigation.compose.composable
1289. import com.example.iot_ha.data.local.RoomLocalDatabase
1290. import com.example.iot_ha.ui.screens.AuthorizationScreen
1291. import com.example.iot_ha.ui.screens.HomeScreen
1292. import com.example.iot_ha.ui.screens.home.DeviceDetailScreen
1293. import com.example.iot_ha.ui.screens.home.RoomDetailScreen
1294. import com.example.iot_ha.ui.viewmodels.factory.DevicesViewModelFactory
1295. import com.example.iot_ha.ui.viewmodels.factory.RoomsViewModelFactory
1296. import com.example.iot_ha.ui.viewmodels.factory.SensorsViewModelFactory
1297. import com.example.iot_ha.ui.viewmodels.shared.DevicesViewModel
1298. import com.example.iot_ha.ui.viewmodels.shared.RoomsViewModel
1299. import com.example.iot_ha.ui.viewmodels.shared.SensorsViewModel
1300. 
1301. @Composable
1302. fun AppNavHost(
1303.     navController: NavHostController,
1304.     startDestination: String
1305. ) {
1306.     val db = RoomLocalDatabase.getInstance(LocalContext.current)
1307. 
1308.     val sensorsViewModel: SensorsViewModel = viewModel(factory = SensorsViewModelFactory())
1309.     val devicesViewModel: DevicesViewModel = viewModel(factory = DevicesViewModelFactory(db))
1310.     val roomsViewModel: RoomsViewModel = viewModel(factory = RoomsViewModelFactory(db))
1311. 
1312.     NavHost(navController = navController, startDestination = startDestination) {
1313.         composable(Routes.AUTH_SCREEN) {
1314.             AuthorizationScreen(
1315.                 navHostController = navController,
1316.                 sensorsViewModel = sensorsViewModel,
1317.                 devicesViewModel = devicesViewModel
1318.             )
1319.         }
1320. 
1321.         composable(Routes.HOME_SCREEN) {
1322.             HomeScreen(
1323.                 navHostController = navController,
1324.                 devicesViewModel = devicesViewModel,
1325.                 roomsViewModel = roomsViewModel
1326.             )
1327.         }
1328. 
1329.         composable(Routes.DEVICE_DETAILS_SCREEN) { backStackEntry ->
1330.             DeviceDetailScreen(
1331.                 backStackEntry = backStackEntry,
1332.                 devicesViewModel = devicesViewModel,
1333.                 roomsViewModel = roomsViewModel
1334.             )
1335.         }
1336. 
1337.         composable(Routes.ROOM_DETAILS_SCREEN) { backStackEntry ->
1338.             RoomDetailScreen(
1339.                 backStackEntry = backStackEntry,
1340.                 navHostController = navController,
1341.                 devicesViewModel = devicesViewModel,
1342.                 roomsViewModel = roomsViewModel
1343.             )
1344.         }
1345.     }
1346. }
1347. 


Routes.kt

1348. package com.example.iot_ha.ui.navigation
1349. 
1350. object Routes {
1351.     const val AUTH_SCREEN = "auth"
1352.     const val HOME_SCREEN = "home"
1353. 
1354.     const val DEVICE_DETAILS_SCREEN = "device_details/{deviceId}"
1355.     const val ROOM_DETAILS_SCREEN = "room_details/{roomId}"
1356. }

AuthorizationScreen.kt

1357. package com.example.iot_ha.ui.screens
1358. 
1359. import androidx.compose.foundation.Image
1360. import androidx.compose.foundation.layout.Column
1361. import androidx.compose.foundation.layout.Spacer
1362. import androidx.compose.foundation.layout.aspectRatio
1363. import androidx.compose.foundation.layout.fillMaxSize
1364. import androidx.compose.foundation.layout.fillMaxWidth
1365. import androidx.compose.foundation.layout.height
1366. import androidx.compose.foundation.layout.padding
1367. import androidx.compose.foundation.shape.RoundedCornerShape
1368. import androidx.compose.runtime.Composable
1369. import androidx.compose.runtime.getValue
1370. import androidx.compose.runtime.mutableStateOf
1371. import androidx.compose.runtime.remember
1372. import androidx.compose.runtime.setValue
1373. import androidx.compose.ui.Alignment
1374. import androidx.compose.ui.Modifier
1375. import androidx.compose.ui.draw.clip
1376. import androidx.compose.ui.platform.LocalContext
1377. import androidx.compose.ui.res.painterResource
1378. import androidx.compose.ui.unit.dp
1379. import androidx.lifecycle.viewmodel.compose.viewModel
1380. import androidx.navigation.NavHostController
1381. import com.example.iot_ha.R
1382. import com.example.iot_ha.data.local.RoomLocalDatabase
1383. import com.example.iot_ha.data.local.broker.Broker
1384. import com.example.iot_ha.data.local.broker.BrokerState
1385. import com.example.iot_ha.data.mqtt.MQTTClient
1386. import com.example.iot_ha.data.mqtt.MQTTMessageHandler
1387. import com.example.iot_ha.ui.components.broker.BrokerInputForm
1388. import com.example.iot_ha.ui.components.broker.BrokerList
1389. import com.example.iot_ha.ui.viewmodels.AuthorizationViewModel
1390. import com.example.iot_ha.ui.viewmodels.factory.AuthorizationViewModelFactory
1391. import com.example.iot_ha.ui.viewmodels.shared.DevicesViewModel
1392. import com.example.iot_ha.ui.viewmodels.shared.SensorsViewModel
1393. import kotlinx.coroutines.CoroutineScope
1394. import kotlinx.coroutines.Dispatchers
1395. import kotlinx.coroutines.delay
1396. import kotlinx.coroutines.launch
1397. 
1398. @Composable
1399. fun AuthorizationScreen(
1400.     navHostController: NavHostController,
1401.     sensorsViewModel: SensorsViewModel,
1402.     devicesViewModel: DevicesViewModel
1403. ) {
1404.     var serverUri by remember { mutableStateOf("") }
1405.     var serverPort by remember { mutableStateOf("") }
1406.     var user by remember { mutableStateOf("") }
1407.     var password by remember { mutableStateOf("") }
1408. 
1409.     val db = RoomLocalDatabase.getInstance(LocalContext.current)
1410.     val authorizationViewModel: AuthorizationViewModel =
1411.         viewModel(factory = (AuthorizationViewModelFactory(db)))
1412. 
1413.     val brokers = authorizationViewModel.brokers.value
1414. 
1415.     val messageHandler = remember { MQTTMessageHandler(sensorsViewModel, devicesViewModel) }
1416. 
1417.     fun handleLogin(
1418.         broker: Broker,
1419.         messageHandler: MQTTMessageHandler,
1420.         navHostController: NavHostController
1421.     ) {
1422.         BrokerState.setBrokerId(broker.id)
1423. 
1424.         val mqttClient = MQTTClient.reinitialize(broker, messageHandler)
1425.         val isSuccess = mqttClient.connect()
1426.         if (isSuccess) {
1427.             navHostController.navigate("home")
1428. 
1429.             CoroutineScope(Dispatchers.IO).launch {
1430.                 mqttClient.subscribe("devicelist")
1431.                 delay(500) // todo: fix (если получится), хз не фикситься, не успевает обработать
1432.                 mqttClient.subscribe("homeassistant/#")
1433.                 mqttClient.subscribe("zigbee/#")
1434.             }
1435.         }
1436.     }
1437. 
1438.     fun handleDelete(broker: Broker, authorizationViewModel: AuthorizationViewModel) {
1439.         val mqttClient = MQTTClient.getInstance()
1440.         mqttClient.disconnect()
1441.         authorizationViewModel.deleteBroker(broker)
1442.     }
1443. 
1444.     fun handleAddBroker(
1445.         serverUri: String,
1446.         serverPort: String,
1447.         user: String,
1448.         password: String,
1449.         onClearFields: () -> Unit,
1450.         authorizationViewModel: AuthorizationViewModel
1451.     ) {
1452.         if (serverUri.isNotBlank() && serverPort.isNotBlank()) {
1453.             authorizationViewModel.addBroker(
1454.                 serverUri,
1455.                 serverPort.toIntOrNull() ?: 1883,
1456.                 user.takeIf { it.isNotBlank() },
1457.                 password.takeIf { it.isNotBlank() }
1458.             )
1459.             onClearFields()
1460.         }
1461.     }
1462. 
1463.     Column(
1464.         modifier = Modifier
1465.             .fillMaxSize()
1466.             .padding(horizontal = 16.dp),
1467.         horizontalAlignment = Alignment.CenterHorizontally
1468.     ) {
1469.         Spacer(modifier = Modifier.height(40.dp))
1470. 
1471.         Image(
1472.             painter = painterResource(id = R.drawable.mqtt_logo),
1473.             contentDescription = "Broker Logo",
1474.             modifier = Modifier
1475.                 .fillMaxWidth()
1476.                 .padding(horizontal = 16.dp)
1477.                 .aspectRatio(4f)
1478.                 .clip(RoundedCornerShape(12.dp)),
1479.         )
1480. 
1481.         Spacer(modifier = Modifier.height(50.dp))
1482. 
1483.         BrokerInputForm(
1484.             serverUri = serverUri,
1485.             serverPort = serverPort,
1486.             user = user,
1487.             password = password,
1488.             onServerUriChange = { serverUri = it },
1489.             onServerPortChange = { serverPort = it },
1490.             onUserChange = { user = it },
1491.             onPasswordChange = { password = it },
1492.             onAddBroker = {
1493.                 handleAddBroker(
1494.                     serverUri,
1495.                     serverPort,
1496.                     user,
1497.                     password,
1498.                     onClearFields = {
1499.                         serverUri = ""
1500.                         serverPort = ""
1501.                         user = ""
1502.                         password = ""
1503.                     },
1504.                     authorizationViewModel
1505.                 )
1506.             }
1507.         )
1508. 
1509.         Spacer(modifier = Modifier.height(16.dp))
1510. 
1511.         BrokerList(
1512.             brokers = brokers,
1513.             onDelete = { handleDelete(it, authorizationViewModel) },
1514.             onLogin = { handleLogin(it, messageHandler, navHostController) }
1515.         )
1516.     }
1517. }

HomeScreen.kt

1518. package com.example.iot_ha.ui.screens
1519. 
1520. import androidx.compose.animation.AnimatedContent
1521. import androidx.compose.animation.ExperimentalAnimationApi
1522. import androidx.compose.animation.fadeIn
1523. import androidx.compose.animation.fadeOut
1524. import androidx.compose.animation.slideInHorizontally
1525. import androidx.compose.animation.slideOutHorizontally
1526. import androidx.compose.animation.togetherWith
1527. import androidx.compose.foundation.background
1528. import androidx.compose.foundation.layout.Arrangement
1529. import androidx.compose.foundation.layout.Column
1530. import androidx.compose.foundation.layout.PaddingValues
1531. import androidx.compose.foundation.layout.Spacer
1532. import androidx.compose.foundation.layout.fillMaxSize
1533. import androidx.compose.foundation.layout.fillMaxWidth
1534. import androidx.compose.foundation.layout.height
1535. import androidx.compose.foundation.layout.padding
1536. import androidx.compose.foundation.layout.statusBarsPadding
1537. import androidx.compose.foundation.lazy.LazyRow
1538. import androidx.compose.foundation.lazy.itemsIndexed
1539. import androidx.compose.runtime.Composable
1540. import androidx.compose.runtime.getValue
1541. import androidx.compose.runtime.mutableIntStateOf
1542. import androidx.compose.runtime.remember
1543. import androidx.compose.runtime.setValue
1544. import androidx.compose.ui.Modifier
1545. import androidx.compose.ui.graphics.Color
1546. import androidx.compose.ui.unit.dp
1547. import androidx.navigation.NavHostController
1548. import com.example.iot_ha.ui.components.common.TabButton
1549. import com.example.iot_ha.ui.screens.home.DevicesScreen
1550. import com.example.iot_ha.ui.screens.home.RoomsScreen
1551. import com.example.iot_ha.ui.screens.home.SettingsScreen
1552. import com.example.iot_ha.ui.viewmodels.shared.DevicesViewModel
1553. import com.example.iot_ha.ui.viewmodels.shared.RoomsViewModel
1554. import com.example.iot_ha.utils.Constants
1555. 
1556. @OptIn(ExperimentalAnimationApi::class)
1557. @Composable
1558. fun HomeScreen(
1559.     navHostController: NavHostController,
1560.     devicesViewModel: DevicesViewModel,
1561.     roomsViewModel: RoomsViewModel
1562. ) {
1563.     var selectedTab by remember { mutableIntStateOf(0) }
1564.     var previousTab by remember { mutableIntStateOf(0) }
1565. 
1566.     Column(
1567.         modifier = Modifier
1568.             .fillMaxSize()
1569.             .statusBarsPadding()
1570.             .background(Color.White)
1571.     ) {
1572.         LazyRow(
1573.             modifier = Modifier
1574.                 .fillMaxWidth()
1575.                 .padding(vertical = 12.dp, horizontal = 8.dp),
1576.             contentPadding = PaddingValues(horizontal = 8.dp),
1577.             horizontalArrangement = Arrangement.spacedBy(8.dp)
1578.         ) {
1579.             itemsIndexed(Constants.TABS_LIST) { index, title ->
1580.                 TabButton(
1581.                     title = title,
1582.                     isSelected = selectedTab == index,
1583.                     onClick = {
1584.                         previousTab = selectedTab
1585.                         selectedTab = index
1586.                     }
1587.                 )
1588.             }
1589.         }
1590. 
1591.         Spacer(modifier = Modifier.height(8.dp))
1592. 
1593.         AnimatedContent(
1594.             targetState = selectedTab,
1595.             transitionSpec = {
1596.                 if (targetState > previousTab) {
1597.                     slideInHorizontally { width -> width } + fadeIn() togetherWith
1598.                             slideOutHorizontally { width -> -width } + fadeOut()
1599.                 } else {
1600.                     slideInHorizontally { width -> -width } + fadeIn() togetherWith
1601.                             slideOutHorizontally { width -> width } + fadeOut()
1602.                 }
1603.             },
1604.             label = "Tab Animation"
1605.         ) { tab ->
1606.             when (tab) {
1607.                 0 -> DevicesScreen(
1608.                     navHostController = navHostController,
1609.                     devicesViewModel = devicesViewModel
1610.                 )
1611. 
1612.                 1 -> RoomsScreen(
1613.                     navHostController = navHostController,
1614.                     roomsViewModel = roomsViewModel
1615.                 )
1616. 
1617.                 2 -> SettingsScreen()
1618.             }
1619.         }
1620.     }
1621. }
1622. 
1623. 


DeviceDetailScreen.kt

1624. package com.example.iot_ha.ui.screens.home
1625. 
1626. import androidx.compose.foundation.layout.Column
1627. import androidx.compose.foundation.layout.Spacer
1628. import androidx.compose.foundation.layout.fillMaxSize
1629. import androidx.compose.foundation.layout.fillMaxWidth
1630. import androidx.compose.foundation.layout.height
1631. import androidx.compose.foundation.layout.padding
1632. import androidx.compose.material3.DropdownMenuItem
1633. import androidx.compose.material3.ExperimentalMaterial3Api
1634. import androidx.compose.material3.ExposedDropdownMenuBox
1635. import androidx.compose.material3.ExposedDropdownMenuDefaults
1636. import androidx.compose.material3.MaterialTheme
1637. import androidx.compose.material3.OutlinedTextField
1638. import androidx.compose.material3.Surface
1639. import androidx.compose.material3.Text
1640. import androidx.compose.runtime.Composable
1641. import androidx.compose.runtime.collectAsState
1642. import androidx.compose.runtime.getValue
1643. import androidx.compose.runtime.mutableStateOf
1644. import androidx.compose.runtime.remember
1645. import androidx.compose.runtime.setValue
1646. import androidx.compose.ui.Alignment
1647. import androidx.compose.ui.Modifier
1648. import androidx.compose.ui.unit.dp
1649. import androidx.navigation.NavBackStackEntry
1650. import com.example.iot_ha.data.local.device.DeviceState
1651. import com.example.iot_ha.ui.components.devices.DeviceDetails
1652. import com.example.iot_ha.ui.components.devices.DeviceNotFoundMessage
1653. import com.example.iot_ha.ui.components.devices.DeviceTitle
1654. import com.example.iot_ha.ui.viewmodels.shared.DevicesViewModel
1655. import com.example.iot_ha.ui.viewmodels.shared.RoomsViewModel
1656. 
1657. @OptIn(ExperimentalMaterial3Api::class)
1658. @Composable
1659. fun DeviceDetailScreen(
1660.     backStackEntry: NavBackStackEntry,
1661.     devicesViewModel: DevicesViewModel,
1662.     roomsViewModel: RoomsViewModel
1663. ) {
1664.     val deviceId = backStackEntry.arguments?.getString("deviceId")?.toIntOrNull() ?: -1
1665. 
1666.     val devices by devicesViewModel.devices.collectAsState()
1667.     val deviceState by DeviceState.devicesData.collectAsState()
1668.     val deviceData = deviceState[deviceId]
1669. 
1670.     val rooms by roomsViewModel.rooms.collectAsState()
1671.     val device = devices.find { it.id == deviceId }
1672.     val currentRoom = rooms.find { it.id == device?.roomId }
1673.     var selectedRoom by remember { mutableStateOf(currentRoom?.name ?: "Select room") }
1674.     var expanded by remember { mutableStateOf(false) }
1675. 
1676.     Surface(
1677.         modifier = Modifier
1678.             .fillMaxSize()
1679.             .padding(16.dp),
1680.         color = MaterialTheme.colorScheme.background
1681.     ) {
1682.         Column(
1683.             modifier = Modifier.fillMaxSize(),
1684.             horizontalAlignment = Alignment.CenterHorizontally
1685.         ) {
1686.             DeviceTitle(
1687.                 friendlyName = device?.friendlyName?.uppercase() ?: "Unknown Device"
1688.             )
1689. 
1690.             Spacer(modifier = Modifier.height(8.dp))
1691. 
1692.             ExposedDropdownMenuBox(
1693.                 expanded = expanded,
1694.                 onExpandedChange = { expanded = !expanded }
1695.             ) {
1696.                 OutlinedTextField(
1697.                     value = selectedRoom,
1698.                     onValueChange = {},
1699.                     readOnly = true,
1700.                     modifier = Modifier
1701.                         .fillMaxWidth()
1702.                         .menuAnchor(),
1703.                     trailingIcon = {
1704.                         ExposedDropdownMenuDefaults.TrailingIcon(expanded = expanded)
1705.                     }
1706.                 )
1707.                 ExposedDropdownMenu(
1708.                     expanded = expanded,
1709.                     onDismissRequest = { expanded = false }
1710.                 ) {
1711.                     DropdownMenuItem(
1712.                         text = { Text("Select room") },
1713.                         onClick = {
1714.                             selectedRoom = "Select room"
1715.                             expanded = false
1716.                             devicesViewModel.assignRoomToDevice(deviceId, null)
1717.                         }
1718.                     )
1719.                     rooms.forEach { room ->
1720.                         DropdownMenuItem(
1721.                             text = { Text(room.name) },
1722.                             onClick = {
1723.                                 selectedRoom = room.name
1724.                                 expanded = false
1725.                                 devicesViewModel.assignRoomToDevice(deviceId, room.id)
1726.                             }
1727.                         )
1728.                     }
1729.                 }
1730.             }
1731. 
1732.             Spacer(modifier = Modifier.height(8.dp))
1733. 
1734.             if (deviceData != null) {
1735.                 DeviceDetails(deviceData)
1736.             } else {
1737.                 DeviceNotFoundMessage()
1738.             }
1739.         }
1740.     }
1741. }


DevicesScreen.kt

1742. package com.example.iot_ha.ui.screens.home
1743. 
1744. import androidx.compose.foundation.layout.Column
1745. import androidx.compose.foundation.layout.Spacer
1746. import androidx.compose.foundation.layout.fillMaxSize
1747. import androidx.compose.foundation.layout.height
1748. import androidx.compose.foundation.layout.padding
1749. import androidx.compose.foundation.rememberScrollState
1750. import androidx.compose.foundation.verticalScroll
1751. import androidx.compose.material3.Scaffold
1752. import androidx.compose.runtime.Composable
1753. import androidx.compose.runtime.collectAsState
1754. import androidx.compose.runtime.getValue
1755. import androidx.compose.ui.Modifier
1756. import androidx.compose.ui.unit.dp
1757. import androidx.navigation.NavHostController
1758. import com.example.iot_ha.R
1759. import com.example.iot_ha.data.local.device.DeviceState
1760. import com.example.iot_ha.ui.components.devices.DeviceCard
1761. import com.example.iot_ha.ui.viewmodels.shared.DevicesViewModel
1762. import com.example.iot_ha.utils.Constants
1763. import com.example.iot_ha.utils.toBooleanState
1764. 
1765. @Composable
1766. fun DevicesScreen(navHostController: NavHostController, devicesViewModel: DevicesViewModel) {
1767. 
1768.     val devices by devicesViewModel.devices.collectAsState()
1769.     val switchDevices by devicesViewModel.getDevicesByTypeFlow("switch").collectAsState()
1770.     val deviceState by DeviceState.devicesData.collectAsState()
1771. 
1772. 
1773. //    val predefinedSelectDevice = remember {
1774. //        object {
1775. //            val id = -1
1776. //            val friendlyName = "Выбор режима"
1777. //            val type = "select"
1778. //            val value = "Авто"
1779. //            val options = listOf("Авто", "Ручной", "Выключен")
1780. //        }
1781. //    }
1782. 
1783.     Scaffold { paddingValues ->
1784.         Column(
1785.             modifier = Modifier
1786.                 .fillMaxSize()
1787.                 .padding(paddingValues)
1788.                 .verticalScroll(rememberScrollState())
1789.                 .padding(16.dp)
1790.         ) {
1791. //            DeviceCard(
1792. //                deviceId = predefinedSelectDevice.id,
1793. //                imageRes = R.drawable.mqtt_logo,
1794. //                name = predefinedSelectDevice.friendlyName,
1795. //                type = predefinedSelectDevice.type,
1796. //                value = predefinedSelectDevice.value,
1797. //                options = predefinedSelectDevice.options,
1798. //                navController = navHostController,
1799. //                onSelectChange = { option ->
1800. //                    devicesViewModel.onSelectChange(predefinedSelectDevice.id, option)
1801. //                }
1802. //            )
1803. //
1804. //            Spacer(modifier = Modifier.height(8.dp))
1805. 
1806.             switchDevices.forEach { device ->
1807. 
1808.                 val deviceData = deviceState[device.id]
1809. 
1810.                 DeviceCard(
1811.                     deviceId = device.id,
1812.                     imageRes = R.drawable.mqtt_logo,
1813.                     name = device.friendlyName,
1814.                     type = Constants.SWITCH_TYPE,
1815.                     value = (deviceData?.get("state") as? String)?.toBooleanState() ?: false,
1816.                     navController = navHostController,
1817.                     onToggle = { state ->
1818.                         devicesViewModel.onToggle(device.id, state)
1819.                     }
1820.                 )
1821.                 Spacer(modifier = Modifier.height(8.dp))
1822.             }
1823. 
1824. 
1825.         }
1826.     }
1827. }
1828. 


RoomDetailScreen.kt

1829. package com.example.iot_ha.ui.screens.home
1830. 
1831. import androidx.compose.foundation.layout.Column
1832. import androidx.compose.foundation.layout.Spacer
1833. import androidx.compose.foundation.layout.fillMaxSize
1834. import androidx.compose.foundation.layout.height
1835. import androidx.compose.foundation.layout.padding
1836. import androidx.compose.foundation.rememberScrollState
1837. import androidx.compose.foundation.verticalScroll
1838. import androidx.compose.material3.Scaffold
1839. import androidx.compose.material3.Text
1840. import androidx.compose.runtime.Composable
1841. import androidx.compose.runtime.collectAsState
1842. import androidx.compose.runtime.getValue
1843. import androidx.compose.ui.Modifier
1844. import androidx.compose.ui.unit.dp
1845. import androidx.navigation.NavBackStackEntry
1846. import androidx.navigation.NavHostController
1847. import com.example.iot_ha.R
1848. import com.example.iot_ha.data.local.device.DeviceState
1849. import com.example.iot_ha.ui.components.devices.DeviceCard
1850. import com.example.iot_ha.ui.viewmodels.shared.DevicesViewModel
1851. import com.example.iot_ha.ui.viewmodels.shared.RoomsViewModel
1852. import com.example.iot_ha.utils.Constants
1853. import com.example.iot_ha.utils.toBooleanState
1854. 
1855. @Composable
1856. fun RoomDetailScreen(
1857.     backStackEntry: NavBackStackEntry,
1858.     roomsViewModel: RoomsViewModel,
1859.     devicesViewModel: DevicesViewModel,
1860.     navHostController: NavHostController
1861. ) {
1862.     val roomId = backStackEntry.arguments?.getString("roomId")?.toIntOrNull() ?: -1
1863. 
1864.     val roomDevices by devicesViewModel.getDevicesByRoomIdFlow(roomId).collectAsState()
1865.     val switchDevices by devicesViewModel.getDevicesByTypeFlow("switch").collectAsState()
1866. 
1867.     val roomSwitchDevices = switchDevices.filter { it -> it.id in roomDevices.map { it.id } }
1868. 
1869.     val deviceState by DeviceState.devicesData.collectAsState()
1870. 
1871.     Scaffold { paddingValues ->
1872.         Column(
1873.             modifier = Modifier
1874.                 .fillMaxSize()
1875.                 .padding(paddingValues)
1876.                 .verticalScroll(rememberScrollState())
1877.                 .padding(16.dp)
1878.         ) {
1879.             roomSwitchDevices.forEach { device ->
1880.                 val deviceData = deviceState[device.id]
1881. 
1882.                 DeviceCard(
1883.                     deviceId = device.id,
1884.                     imageRes = R.drawable.mqtt_logo,
1885.                     name = device.friendlyName,
1886.                     type = Constants.SWITCH_TYPE,
1887.                     value = (deviceData?.get("state") as? String)?.toBooleanState() ?: false,
1888.                     navController = navHostController,
1889.                     onToggle = { state ->
1890.                         devicesViewModel.onToggle(device.id, state)
1891.                     }
1892.                 )
1893.                 Spacer(modifier = Modifier.height(8.dp))
1894.             }
1895.         }
1896.     }
1897. 
1898.     Text("Room $roomId")
1899. }
1900. 
1901. 


RoomsScreen.kt

1902. package com.example.iot_ha.ui.screens.home
1903. 
1904. import android.util.Log
1905. import androidx.compose.foundation.layout.Box
1906. import androidx.compose.foundation.layout.Column
1907. import androidx.compose.foundation.layout.PaddingValues
1908. import androidx.compose.foundation.layout.fillMaxSize
1909. import androidx.compose.foundation.layout.padding
1910. import androidx.compose.foundation.lazy.LazyColumn
1911. import androidx.compose.foundation.lazy.items
1912. import androidx.compose.material.icons.Icons
1913. import androidx.compose.material.icons.filled.Add
1914. import androidx.compose.material3.FloatingActionButton
1915. import androidx.compose.material3.Icon
1916. import androidx.compose.material3.MaterialTheme
1917. import androidx.compose.runtime.Composable
1918. import androidx.compose.runtime.LaunchedEffect
1919. import androidx.compose.runtime.collectAsState
1920. import androidx.compose.runtime.getValue
1921. import androidx.compose.runtime.mutableIntStateOf
1922. import androidx.compose.runtime.mutableStateOf
1923. import androidx.compose.runtime.remember
1924. import androidx.compose.runtime.setValue
1925. import androidx.compose.ui.Alignment
1926. import androidx.compose.ui.Modifier
1927. import androidx.compose.ui.unit.dp
1928. import androidx.navigation.NavHostController
1929. import com.example.iot_ha.ui.components.rooms.AddRoomDialog
1930. import com.example.iot_ha.ui.components.rooms.RoomCard
1931. import com.example.iot_ha.ui.viewmodels.shared.RoomsViewModel
1932. 
1933. @Composable
1934. fun RoomsScreen(
1935.     navHostController: NavHostController,
1936.     roomsViewModel: RoomsViewModel
1937. ) {
1938.     var showDialog by remember { mutableStateOf(false) }
1939.     val rooms by roomsViewModel.rooms.collectAsState()
1940. 
1941.     Box(modifier = Modifier.fillMaxSize()) {
1942.         Column(modifier = Modifier.fillMaxSize()) {
1943.             LazyColumn(
1944.                 modifier = Modifier.weight(1f),
1945.                 contentPadding = PaddingValues(16.dp)
1946.             ) {
1947.                 items(rooms) { room ->
1948.                     var deviceCount by remember { mutableIntStateOf(0) }
1949. 
1950.                     LaunchedEffect(room.id) {
1951.                         roomsViewModel.getDeviceCount(room.id) { count ->
1952.                             deviceCount = count
1953.                         }
1954.                     }
1955. 
1956.                     RoomCard(
1957.                         roomId = room.id.toInt(),
1958.                         roomName = room.name,
1959.                         deviceCount = deviceCount,
1960.                         navHostController = navHostController
1961.                     )
1962.                 }
1963.             }
1964.         }
1965. 
1966.         FloatingActionButton(
1967.             onClick = { showDialog = true },
1968.             containerColor = MaterialTheme.colorScheme.primary,
1969.             modifier = Modifier
1970.                 .align(Alignment.BottomEnd)
1971.                 .padding(16.dp)
1972.         ) {
1973.             Icon(imageVector = Icons.Default.Add, contentDescription = "Добавить комнату")
1974.         }
1975.     }
1976. 
1977.     if (showDialog) {
1978.         AddRoomDialog(
1979.             onDismiss = { showDialog = false },
1980.             onConfirm = { roomName ->
1981.                 roomsViewModel.addRoom(roomName)
1982.                 showDialog = false
1983.                 Log.i("Rooms", "Комната добавлена: $roomName")
1984.             }
1985.         )
1986.     }
1987. }
1988. 


SettingsScreen.kt

1989. package com.example.iot_ha.ui.screens.home
1990. 
1991. import androidx.compose.foundation.layout.Arrangement
1992. import androidx.compose.foundation.layout.Column
1993. import androidx.compose.foundation.layout.Row
1994. import androidx.compose.foundation.layout.Spacer
1995. import androidx.compose.foundation.layout.fillMaxSize
1996. import androidx.compose.foundation.layout.fillMaxWidth
1997. import androidx.compose.foundation.layout.height
1998. import androidx.compose.foundation.layout.padding
1999. import androidx.compose.foundation.shape.RoundedCornerShape
2000. import androidx.compose.material3.Card
2001. import androidx.compose.material3.CardDefaults
2002. import androidx.compose.material3.MaterialTheme
2003. import androidx.compose.material3.Switch
2004. import androidx.compose.material3.SwitchDefaults
2005. import androidx.compose.material3.Text
2006. import androidx.compose.runtime.Composable
2007. import androidx.compose.runtime.LaunchedEffect
2008. import androidx.compose.runtime.collectAsState
2009. import androidx.compose.runtime.getValue
2010. import androidx.compose.runtime.mutableIntStateOf
2011. import androidx.compose.runtime.remember
2012. import androidx.compose.runtime.setValue
2013. import androidx.compose.ui.Alignment
2014. import androidx.compose.ui.Modifier
2015. import androidx.compose.ui.graphics.Color
2016. import androidx.compose.ui.unit.dp
2017. import com.example.iot_ha.data.local.broker.discovery.DiscoveryState
2018. import com.example.iot_ha.data.mqtt.MQTTClient
2019. import kotlinx.coroutines.delay
2020. 
2021. @Composable
2022. fun SettingsScreen() {
2023.     val discoveryState by DiscoveryState.isDiscoveryActive.collectAsState()
2024. 
2025.     var remainingTime by remember { mutableIntStateOf(0) }
2026. 
2027.     fun onSwitchChanged(enabled: Boolean) {
2028.         if (enabled) {
2029.             DiscoveryState.startDiscovery()
2030.             MQTTClient.publish("zigbee/bridge/config/permit_join", "true")
2031.         } else {
2032.             DiscoveryState.stopDiscovery()
2033.             MQTTClient.publish("zigbee/bridge/config/permit_join", "false")
2034.         }
2035.     }
2036. 
2037.     LaunchedEffect(discoveryState) {
2038.         if (discoveryState) {
2039.             remainingTime = 255
2040.             while (remainingTime > 0) {
2041.                 delay(1000)
2042.                 remainingTime -= 1
2043.             }
2044.         } else {
2045.             remainingTime = 0
2046.         }
2047.     }
2048. 
2049.     Column(
2050.         modifier = Modifier
2051.             .fillMaxSize()
2052.             .padding(16.dp),
2053.         verticalArrangement = Arrangement.Top,
2054.         horizontalAlignment = Alignment.CenterHorizontally
2055.     ) {
2056. 
2057.         Spacer(modifier = Modifier.height(16.dp))
2058. 
2059.         Card(
2060.             shape = RoundedCornerShape(16.dp),
2061.             colors = CardDefaults.cardColors(containerColor = Color(0xFFb697c4)),
2062.             elevation = CardDefaults.cardElevation(6.dp),
2063.             modifier = Modifier.fillMaxWidth()
2064.         ) {
2065.             Column(
2066.                 modifier = Modifier
2067.                     .fillMaxWidth()
2068.                     .padding(16.dp)
2069.             ) {
2070.                 Row(
2071.                     verticalAlignment = Alignment.CenterVertically
2072.                 ) {
2073.                     Text(
2074.                         text = "Device discovery mode",
2075.                         modifier = Modifier.weight(1f),
2076.                         style = MaterialTheme.typography.bodyLarge
2077.                     )
2078.                     Switch(
2079.                         checked = discoveryState,
2080.                         onCheckedChange = { onSwitchChanged(it) },
2081.                         colors = SwitchDefaults.colors(
2082.                             checkedThumbColor = Color.White,
2083.                             checkedTrackColor = Color(0xFF4CAF50),
2084.                             uncheckedThumbColor = Color.White,
2085.                             uncheckedTrackColor = Color(0xFFF44336)
2086.                         )
2087.                     )
2088.                 }
2089. 
2090. //                Spacer(modifier = Modifier.height(16.dp))
2091. 
2092.                 if (discoveryState) {
2093.                     Text(
2094.                         text = "Time left: $remainingTime s",
2095.                         style = MaterialTheme.typography.bodyMedium,
2096.                         color = Color.Black
2097.                     )
2098.                 }
2099.             }
2100.         }
2101.     }
2102. }


Color.kt

2103. package com.example.iot_ha.ui.theme
2104. 
2105. import androidx.compose.ui.graphics.Color
2106. 
2107. val Purple80 = Color(0xFFD0BCFF)
2108. val PurpleGrey80 = Color(0xFFCCC2DC)
2109. val Pink80 = Color(0xFFEFB8C8)
2110. 
2111. val Purple40 = Color(0xFF6650a4)
2112. val PurpleGrey40 = Color(0xFF625b71)
2113. val Pink40 = Color(0xFF7D5260)

Theme.kt

2114. package com.example.iot_ha.ui.theme
2115. 
2116. import android.os.Build
2117. import androidx.compose.foundation.isSystemInDarkTheme
2118. import androidx.compose.material3.MaterialTheme
2119. import androidx.compose.material3.darkColorScheme
2120. import androidx.compose.material3.dynamicDarkColorScheme
2121. import androidx.compose.material3.dynamicLightColorScheme
2122. import androidx.compose.material3.lightColorScheme
2123. import androidx.compose.runtime.Composable
2124. import androidx.compose.ui.platform.LocalContext
2125. 
2126. private val DarkColorScheme = darkColorScheme(
2127.     primary = Purple80,
2128.     secondary = PurpleGrey80,
2129.     tertiary = Pink80
2130. )
2131. 
2132. private val LightColorScheme = lightColorScheme(
2133.     primary = Purple40,
2134.     secondary = PurpleGrey40,
2135.     tertiary = Pink40
2136. 
2137.     /* Other default colors to override
2138.     background = Color(0xFFFFFBFE),
2139.     surface = Color(0xFFFFFBFE),
2140.     onPrimary = Color.White,
2141.     onSecondary = Color.White,
2142.     onTertiary = Color.White,
2143.     onBackground = Color(0xFF1C1B1F),
2144.     onSurface = Color(0xFF1C1B1F),
2145.     */
2146. )
2147. 
2148. @Composable
2149. fun IothaTheme(
2150.     darkTheme: Boolean = isSystemInDarkTheme(),
2151.     // Dynamic color is available on Android 12+
2152.     dynamicColor: Boolean = true,
2153.     content: @Composable () -> Unit
2154. ) {
2155.     val colorScheme = when {
2156.         dynamicColor && Build.VERSION.SDK_INT >= Build.VERSION_CODES.S -> {
2157.             val context = LocalContext.current
2158.             if (darkTheme) dynamicDarkColorScheme(context) else dynamicLightColorScheme(context)
2159.         }
2160. 
2161.         darkTheme -> DarkColorScheme
2162.         else -> LightColorScheme
2163.     }
2164. 
2165.     MaterialTheme(
2166.         colorScheme = colorScheme,
2167.         typography = Typography,
2168.         content = content
2169.     )
2170. }

Type.kt

2171. package com.example.iot_ha.ui.theme
2172. 
2173. import androidx.compose.material3.Typography
2174. import androidx.compose.ui.text.TextStyle
2175. import androidx.compose.ui.text.font.FontFamily
2176. import androidx.compose.ui.text.font.FontWeight
2177. import androidx.compose.ui.unit.sp
2178. 
2179. // Set of Material typography styles to start with
2180. val Typography = Typography(
2181.     bodyLarge = TextStyle(
2182.         fontFamily = FontFamily.Default,
2183.         fontWeight = FontWeight.Normal,
2184.         fontSize = 16.sp,
2185.         lineHeight = 24.sp,
2186.         letterSpacing = 0.5.sp
2187.     )
2188.     /* Other default text styles to override
2189.     titleLarge = TextStyle(
2190.         fontFamily = FontFamily.Default,
2191.         fontWeight = FontWeight.Normal,
2192.         fontSize = 22.sp,
2193.         lineHeight = 28.sp,
2194.         letterSpacing = 0.sp
2195.     ),
2196.     labelSmall = TextStyle(
2197.         fontFamily = FontFamily.Default,
2198.         fontWeight = FontWeight.Medium,
2199.         fontSize = 11.sp,
2200.         lineHeight = 16.sp,
2201.         letterSpacing = 0.5.sp
2202.     )
2203.     */
2204. )

AuthorizationViewModel.kt

2205. package com.example.iot_ha.ui.viewmodels
2206. 
2207. import androidx.compose.runtime.State
2208. import androidx.compose.runtime.mutableStateOf
2209. import androidx.lifecycle.ViewModel
2210. import androidx.lifecycle.viewModelScope
2211. import com.example.iot_ha.data.local.RoomLocalDatabase
2212. import com.example.iot_ha.data.local.broker.Broker
2213. import kotlinx.coroutines.launch
2214. 
2215. class AuthorizationViewModel(
2216.     private val db: RoomLocalDatabase,
2217. ) : ViewModel() {
2218. 
2219.     private val brokerDao = db.brokerDAO()
2220. 
2221.     private var _brokers = mutableStateOf<List<Broker>>(emptyList())
2222.     val brokers: State<List<Broker>> = _brokers
2223. 
2224.     init {
2225.         loadBrokers()
2226.     }
2227. 
2228.     private fun loadBrokers() {
2229.         viewModelScope.launch {
2230.             _brokers.value = brokerDao.getAllBrokers()
2231.         }
2232.     }
2233. 
2234. 
2235.     fun addBroker(serverUri: String, serverPort: Int, user: String?, password: String?) {
2236.         viewModelScope.launch {
2237.             val broker = Broker(
2238.                 serverUri = serverUri,
2239.                 serverPort = serverPort,
2240.                 user = user,
2241.                 password = password
2242.             )
2243.             brokerDao.insert(broker)
2244.             loadBrokers()
2245.         }
2246.     }
2247. 
2248.     fun deleteBroker(broker: Broker) {
2249.         viewModelScope.launch {
2250.             brokerDao.deleteBroker(broker)
2251.             loadBrokers()
2252.         }
2253.     }
2254. }

HomeViewModel.kt

2255. package com.example.iot_ha.ui.viewmodels
2256. 
2257. import androidx.lifecycle.ViewModel
2258. import com.example.iot_ha.data.local.RoomLocalDatabase
2259. 
2260. 
2261. class HomeViewModel(db: RoomLocalDatabase) : ViewModel()

AuthorizationViewModelFactory.kt

2262. package com.example.iot_ha.ui.viewmodels.factory
2263. 
2264. import androidx.lifecycle.ViewModel
2265. import androidx.lifecycle.ViewModelProvider
2266. import com.example.iot_ha.data.local.RoomLocalDatabase
2267. import com.example.iot_ha.ui.viewmodels.AuthorizationViewModel
2268. 
2269. class AuthorizationViewModelFactory(
2270.     private val db: RoomLocalDatabase,
2271. ) : ViewModelProvider.Factory {
2272. 
2273.     @Suppress("UNCHECKED_CAST")
2274.     override fun <T : ViewModel> create(modelClass: Class<T>): T {
2275.         if (modelClass.isAssignableFrom(AuthorizationViewModel::class.java)) {
2276.             return AuthorizationViewModel(db) as T
2277.         }
2278.         throw IllegalArgumentException("Unknown ViewModel class")
2279.     }
2280. }

DevicesViewModelFactory.kt

2281. package com.example.iot_ha.ui.viewmodels.factory
2282. 
2283. import androidx.lifecycle.ViewModel
2284. import androidx.lifecycle.ViewModelProvider
2285. import com.example.iot_ha.data.local.RoomLocalDatabase
2286. import com.example.iot_ha.ui.viewmodels.shared.DevicesViewModel
2287. 
2288. class DevicesViewModelFactory(private val db: RoomLocalDatabase) : ViewModelProvider.Factory {
2289.     override fun <T : ViewModel> create(modelClass: Class<T>): T {
2290.         if (modelClass.isAssignableFrom(DevicesViewModel::class.java)) {
2291.             @Suppress("UNCHECKED_CAST")
2292.             return DevicesViewModel(db) as T
2293.         }
2294.         throw IllegalArgumentException("Unknown ViewModel class")
2295.     }
2296. }

HomeViewModelFactory.kt

2297. package com.example.iot_ha.ui.viewmodels.factory
2298. 
2299. import androidx.lifecycle.ViewModel
2300. import androidx.lifecycle.ViewModelProvider
2301. import com.example.iot_ha.data.local.RoomLocalDatabase
2302. import com.example.iot_ha.ui.viewmodels.HomeViewModel
2303. 
2304. class HomeViewModelFactory(private val db: RoomLocalDatabase) : ViewModelProvider.Factory {
2305.     override fun <T : ViewModel> create(modelClass: Class<T>): T {
2306.         if (modelClass.isAssignableFrom(HomeViewModel::class.java)) {
2307.             @Suppress("UNCHECKED_CAST")
2308.             return HomeViewModel(db) as T
2309.         }
2310.         throw IllegalArgumentException("Unknown ViewModel class")
2311.     }
2312. }


RoomsViewModelFactory.kt

2313. package com.example.iot_ha.ui.viewmodels.factory
2314. 
2315. import androidx.lifecycle.ViewModel
2316. import androidx.lifecycle.ViewModelProvider
2317. import com.example.iot_ha.data.local.RoomLocalDatabase
2318. import com.example.iot_ha.ui.viewmodels.shared.RoomsViewModel
2319. 
2320. class RoomsViewModelFactory(private val db: RoomLocalDatabase) : ViewModelProvider.Factory {
2321.     override fun <T : ViewModel> create(modelClass: Class<T>): T {
2322.         if (modelClass.isAssignableFrom(RoomsViewModel::class.java)) {
2323.             @Suppress("UNCHECKED_CAST")
2324.             return RoomsViewModel(db) as T
2325.         }
2326.         throw IllegalArgumentException("Unknown ViewModel class")
2327.     }
2328. }

SensorsViewModelFactory.kt

2329. package com.example.iot_ha.ui.viewmodels.factory
2330. 
2331. import androidx.lifecycle.ViewModel
2332. import androidx.lifecycle.ViewModelProvider
2333. import com.example.iot_ha.ui.viewmodels.shared.SensorsViewModel
2334. 
2335. class SensorsViewModelFactory : ViewModelProvider.Factory {
2336.     @Suppress("UNCHECKED_CAST")
2337.     override fun <T : ViewModel> create(modelClass: Class<T>): T {
2338.         if (modelClass.isAssignableFrom(SensorsViewModel::class.java)) {
2339.             return SensorsViewModel() as T
2340.         }
2341.         throw IllegalArgumentException("Unknown ViewModel class")
2342.     }
2343. }


DevicesViewModel.kt

2344. package com.example.iot_ha.ui.viewmodels.shared
2345. 
2346. import android.util.Log
2347. import androidx.lifecycle.ViewModel
2348. import androidx.lifecycle.viewModelScope
2349. import com.example.iot_ha.data.local.RoomLocalDatabase
2350. import com.example.iot_ha.data.local.broker.BrokerState
2351. import com.example.iot_ha.data.local.command.Command
2352. import com.example.iot_ha.data.local.device.Device
2353. import com.example.iot_ha.data.mqtt.MQTTClient
2354. import kotlinx.coroutines.flow.MutableStateFlow
2355. import kotlinx.coroutines.flow.StateFlow
2356. import kotlinx.coroutines.flow.collectLatest
2357. import kotlinx.coroutines.launch
2358. 
2359. class DevicesViewModel(private val db: RoomLocalDatabase) : ViewModel() {
2360.     private val _devices = MutableStateFlow<List<Device>>(emptyList())
2361.     val devices: StateFlow<List<Device>> = _devices
2362. 
2363.     init {
2364.         viewModelScope.launch {
2365.             BrokerState.brokerId.collectLatest { brokerId ->
2366.                 if (brokerId != null) {
2367.                     loadDevices(brokerId)
2368.                 }
2369.             }
2370.         }
2371.     }
2372. 
2373. 
2374.     private suspend fun loadDevices(brokerId: Int) {
2375.         db.deviceDAO().getDevicesByBrokerFlow(brokerId)
2376.             .collect { deviceList ->
2377.                 _devices.value = deviceList
2378.             }
2379.     }
2380. 
2381.     fun getDeviceIdByIeeeAddr(ieeeAddr: String, callback: (Int?) -> Unit) {
2382.         viewModelScope.launch {
2383.             val device = db.deviceDAO().getDeviceByIeeeAddr(ieeeAddr)
2384.             callback(device?.id)
2385.         }
2386.     }
2387. 
2388.     fun getDevicesByTypeFlow(type: String): StateFlow<List<Device>> {
2389.         val resultFlow = MutableStateFlow<List<Device>>(emptyList())
2390. 
2391.         viewModelScope.launch {
2392.             db.commandDAO().getCommandsByTypeFlow(type).collect { commands ->
2393.                 val deviceIds = commands.map { it.deviceId }.toSet()
2394.                 val filteredDevices = _devices.value.filter { it.id in deviceIds }
2395.                 resultFlow.value = filteredDevices
2396.             }
2397.         }
2398. 
2399.         return resultFlow
2400.     }
2401. 
2402.     fun getDevicesByRoomIdFlow(roomId: Int): StateFlow<List<Device>> {
2403.         val resultFlow = MutableStateFlow<List<Device>>(emptyList())
2404. 
2405.         viewModelScope.launch {
2406.             db.deviceDAO().getDevicesByRoomIdFlow(roomId).collect { devices ->
2407.                 val deviceIds = devices.map { it.id }.toSet()
2408.                 val filteredDevices = _devices.value.filter { it.id in deviceIds }
2409.                 resultFlow.value = filteredDevices
2410.             }
2411.         }
2412. 
2413.         return resultFlow
2414.     }
2415. 
2416.     fun addDeviceIfNotExists(device: Device) {
2417.         viewModelScope.launch {
2418.             val existingDevice = db.deviceDAO().getDeviceByIeeeAddr(device.ieeeAddr)
2419. 
2420.             Log.i("DEVLIST", devices.value.toString())
2421. 
2422.             if (existingDevice == null) {
2423.                 db.deviceDAO().insertDevice(device)
2424.                 Log.i("DevicesViewModel", "Device added: $device")
2425.             } else {
2426.                 Log.i("DevicesViewModel", "Device already exists: $device")
2427.             }
2428.         }
2429.     }
2430. 
2431.     fun addCommandIfNotExists(command: Command) {
2432.         Log.i("addCommandIfNotExists", command.toString())
2433. 
2434.         viewModelScope.launch {
2435.             val existingCommand = db.commandDAO().getCommandByCommandTopic(command.commandTopic)
2436. 
2437.             if (existingCommand == null) {
2438.                 db.commandDAO().insertCommand(command)
2439.             } else {
2440.                 Log.i("DevicesViewModel", "Command already exists: $existingCommand")
2441.             }
2442.         }
2443.     }
2444. 
2445.     fun onToggle(deviceId: Int, state: Boolean) {
2446.         viewModelScope.launch {
2447.             val cmd = db.commandDAO().getSwitchCommandByDeviceId(deviceId)
2448. 
2449.             val newState = if (!state) cmd?.payloadOff else cmd?.payloadOn
2450.             cmd?.let {
2451.                 if (newState != null) {
2452.                     sendCommandToMqtt(it.commandTopic, newState)
2453.                 }
2454.             }
2455.         }
2456.     }
2457. 
2458.     fun onSelectChange(deviceId: Int, option: String) {
2459.         viewModelScope.launch {
2460.             sendCommandToMqtt("command", "")
2461.         }
2462.     }
2463. 
2464.     private fun sendCommandToMqtt(topic: String, command: String) {
2465.         val mqttClient = MQTTClient.getInstance()
2466.         mqttClient.publish(topic, command)
2467.         println("Отправка в MQTT: $command")
2468.     }
2469. 
2470.     fun assignRoomToDevice(deviceId: Int, roomId: Long?) {
2471.         viewModelScope.launch {
2472.             val device = db.deviceDAO().getDeviceById(deviceId)
2473.             val updatedDevice = device.copy(roomId = roomId)
2474.             db.deviceDAO().updateDevice(updatedDevice)
2475.         }
2476.     }
2477. 
2478. }
2479. 


RoomsViewModel.kt

2480. package com.example.iot_ha.ui.viewmodels.shared
2481. 
2482. import androidx.lifecycle.ViewModel
2483. import androidx.lifecycle.viewModelScope
2484. import com.example.iot_ha.data.local.RoomLocalDatabase
2485. import com.example.iot_ha.data.local.room.RoomEntity
2486. import kotlinx.coroutines.flow.MutableStateFlow
2487. import kotlinx.coroutines.flow.StateFlow
2488. import kotlinx.coroutines.launch
2489. 
2490. class RoomsViewModel(private val db: RoomLocalDatabase) : ViewModel() {
2491.     private val _rooms = MutableStateFlow<List<RoomEntity>>(emptyList())
2492.     val rooms: StateFlow<List<RoomEntity>> = _rooms
2493. 
2494.     init {
2495.         viewModelScope.launch {
2496.             db.roomEntityDAO().getAllRooms().collect { _rooms.value = it }
2497.         }
2498.     }
2499. 
2500.     fun addRoom(name: String) {
2501.         viewModelScope.launch {
2502.             db.roomEntityDAO().insertRoom(RoomEntity(name = name))
2503.         }
2504.     }
2505. 
2506.     fun getDeviceCount(roomId: Long, onResult: (Int) -> Unit) {
2507.         viewModelScope.launch {
2508.             val count = db.deviceDAO().getDeviceCountForRoom(roomId)
2509.             onResult(count)
2510.         }
2511.     }
2512. }


SensorsViewModel.kt

2513. package com.example.iot_ha.ui.viewmodels.shared
2514. 
2515. import android.util.Log
2516. import androidx.lifecycle.ViewModel
2517. import com.example.iot_ha.ui.viewmodels.shared.data.SensorsData
2518. import kotlinx.coroutines.flow.MutableStateFlow
2519. import kotlinx.coroutines.flow.StateFlow
2520. 
2521. class SensorsViewModel : ViewModel() {
2522.     private val _sensorData = MutableStateFlow<Map<String, SensorsData>>(emptyMap())
2523.     val sensorData: StateFlow<Map<String, SensorsData>> = _sensorData
2524. 
2525.     fun updateSensorData(topic: String, payload: String) {
2526.         _sensorData.value += (topic to SensorsData(topic, payload))
2527.     }
2528. 
2529.     fun test() {
2530.         Log.i("ViewModel", "TESTING MESSAGE")
2531.     }
2532. }

SensorsData.kt

2533. package com.example.iot_ha.ui.viewmodels.shared.data
2534. 
2535. data class SensorsData(
2536.     val topic: String,
2537.     val payload: String,
2538.     val timestamp: Long = System.currentTimeMillis()
2539. )


Constants.kt

2540. package com.example.iot_ha.utils
2541. 
2542. object Constants {
2543.     const val SWITCH_TYPE = "switch"
2544. 
2545.     val TABS_LIST = listOf("Devices", "Rooms", "Settings")
2546. }

DeviceActionBuilder.kt

2547. class DeviceActionBuilder(private val deviceId: Int) {
2548.     fun buildOnToggle(): (Int, Boolean) -> Unit = { id, state ->
2549.         if (id == deviceId) {
2550.             println("[$deviceId] Toggle changed: $state")
2551.         }
2552.     }
2553. 
2554.     fun buildOnSliderChange(): (Int, Float) -> Unit = { id, value ->
2555.         if (id == deviceId) {
2556.             println("[$deviceId] Slider value: $value")
2557.         }
2558.     }
2559. 
2560.     fun buildOnSelectChange(): (Int, String) -> Unit = { id, option ->
2561.         if (id == deviceId) {
2562.             println("[$deviceId] Selected: $option")
2563.         }
2564.     }
2565. }


Extensions.kt

2566. package com.example.iot_ha.utils
2567. 
2568. fun String.toBooleanState(): Boolean = when (this) {
2569.     "ON", "true", "1" -> true
2570.     else -> false
2571. }

ExampleUnitTest.kt

2572. package com.example.iot_ha
2573. 
2574. import org.junit.Assert.assertEquals
2575. import org.junit.Test
2576. 
2577. /**
2578.  * Example local unit test, which will execute on the development machine (host).
2579.  *
2580.  * See [testing documentation](http://d.android.com/tools/testing).
2581.  */
2582. class ExampleUnitTest {
2583.     @Test
2584.     fun addition_isCorrect() {
2585.         assertEquals(4, 2 + 2)
2586.     }
2587. }

