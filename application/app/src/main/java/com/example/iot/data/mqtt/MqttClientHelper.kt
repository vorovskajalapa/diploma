package com.example.iot.data.mqtt

import android.content.Context
import android.util.Log
import com.example.iot.data.local.broker.Broker
import com.example.iot.data.local.device.Device
import org.eclipse.paho.client.mqttv3.*
import org.eclipse.paho.client.mqttv3.persist.MemoryPersistence
import org.json.JSONObject

class MqttClientHelper private constructor(
    private val context: Context?,
    private val broker: Broker
) {
    private var mqttClient: MqttClient? = null

    companion object {
        private const val CLIENT_ID_PREFIX = "AndroidClient_"

        /**
         * –°–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä MqttClientHelper –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –±—Ä–æ–∫–µ—Ä–∞.
         */
        fun create(context: Context?, broker: Broker): MqttClientHelper {
            return MqttClientHelper(context, broker)
        }
    }

    /**
     * –ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ –±—Ä–æ–∫–µ—Ä—É MQTT.
     * @return 1 –≤ —Å–ª—É—á–∞–µ —É—Å–ø–µ—Ö–∞, -1 –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏.
     */
    fun connect(): Int {
        return try {
            val persistence = MemoryPersistence()
            val brokerUri = "tcp://${broker.serverUri}:${broker.serverPort}"
            val clientId = CLIENT_ID_PREFIX + System.currentTimeMillis()

            mqttClient = MqttClient(brokerUri, clientId, persistence)

            val options = MqttConnectOptions().apply {
                broker.user?.let { userName = it }

                broker.password?.let { password = it.toCharArray() }

                isCleanSession = true
                connectionTimeout = 10
                keepAliveInterval = 60
            }

            mqttClient?.setCallback(object : MqttCallback {
                override fun connectionLost(cause: Throwable) {
                    Log.e("MQTT", "–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ: ${cause.message}")
                }

                override fun messageArrived(topic: String, message: MqttMessage) {
                    val msgString = message.payload.decodeToString()
                    Log.i("MQTT", "üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: $msgString")
                    parseAndLogDevice(msgString)
                }

                override fun deliveryComplete(token: IMqttDeliveryToken) {
                    Log.i("MQTT", "‚úÖ –î–æ—Å—Ç–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                }
            })

            mqttClient?.connect(options)
            Log.i("MQTT", "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")

            // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç–æ–ø–∏–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            mqttClient?.subscribe("testtopic", 1)
            Log.i("MQTT", "üì° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ testtopic")

            1 // –£—Å–ø–µ—Ö
        } catch (e: MqttException) {
            e.printStackTrace()
            Log.e("MQTT", "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${e.message} (–∫–æ–¥ ${e.reasonCode})")
            -1 // –û—à–∏–±–∫–∞
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ç–æ–ø–∏–∫.
     * @param topic –¢–æ–ø–∏–∫, –≤ –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ.
     * @param payload –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.
     * @param qos –£—Ä–æ–≤–µ–Ω—å –∫–∞—á–µ—Å—Ç–≤–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è (QoS).
     */
    fun publishMessage(topic: String, payload: String, qos: Int = 1) {
        try {
            val message = MqttMessage(payload.toByteArray()).apply {
                this.qos = qos
            }
            mqttClient?.publish(topic, message)
            Log.i("MQTT", "üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ $topic: $payload")
        } catch (e: MqttException) {
            Log.e("MQTT", "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: ${e.message}")
        }
    }

    /**
     * –û—Ç–∫–ª—é—á–∞–µ—Ç—Å—è –æ—Ç –±—Ä–æ–∫–µ—Ä–∞ MQTT.
     */
    fun disconnect() {
        try {
            mqttClient?.disconnect()
            Log.i("MQTT", "üîå –û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç –±—Ä–æ–∫–µ—Ä–∞")
        } catch (e: MqttException) {
            Log.e("MQTT", "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è: ${e.message}")
        }
    }

    /**
     * –ü–∞—Ä—Å–∏—Ç JSON-—Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ª–æ–≥–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.
     * @param jsonString JSON-—Å—Ç—Ä–æ–∫–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è –¥–∞–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.
     */
    private fun parseAndLogDevice(jsonString: String) {
        try {
            val jsonObject = JSONObject(jsonString)
            val key = jsonObject.keys().next()
            val deviceJson = jsonObject.getJSONObject(key)

            val ieeeAddr = deviceJson.getString("ieeeAddr")
            val friendlyName = deviceJson.getString("friendly_name")
            val modelId = deviceJson.getString("ModelId")

            val device = Device.create(ieeeAddr, friendlyName, modelId, null, broker.id)
            Log.i("DEVICE", "üì° –ü–æ–ª—É—á–µ–Ω –¥–µ–≤–∞–π—Å: $device")
        } catch (e: Exception) {
            Log.e("DEVICE", "‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: ${e.message}")
        }
    }
}