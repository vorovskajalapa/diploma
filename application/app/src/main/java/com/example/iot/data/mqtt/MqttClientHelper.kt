package com.example.iot.data.mqtt

import android.content.Context
import android.util.Log
import com.example.iot.data.local.device.Device
import org.eclipse.paho.client.mqttv3.*
import org.eclipse.paho.client.mqttv3.persist.MemoryPersistence
import org.json.JSONObject

class MqttClientHelper(context: Context?) {
    private var mqttClient: MqttClient? = null

    fun parseAndLogDevice(jsonString: String) {
        try {
            val jsonObject = JSONObject(jsonString)
            val key = jsonObject.keys().next()
            val deviceJson = jsonObject.getJSONObject(key)

            val ieeeAddr = deviceJson.getString("ieeeAddr")
            val friendlyName = deviceJson.getString("friendly_name")
            val modelId = deviceJson.getString("ModelId")

            val device = Device.create(ieeeAddr, friendlyName, modelId, null)

            Log.i("DEVICE", "üì° –ü–æ–ª—É—á–µ–Ω –¥–µ–≤–∞–π—Å: $device")
        } catch (e: Exception) {
            Log.e("DEVICE", "‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: ${e.message}")
        }
    }

    fun connect(): Int {
        try {
            val persistence = MemoryPersistence()
            mqttClient = MqttClient(BROKER_URL, CLIENT_ID, persistence)

            val options = MqttConnectOptions().apply {
                userName = USERNAME
                password = PASSWORD.toCharArray()
                isCleanSession = true
                connectionTimeout = 10
                keepAliveInterval = 60
            }

            mqttClient?.setCallback(object : MqttCallback {
                override fun connectionLost(cause: Throwable) {
                    Log.e("MQTT", "–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ: ${cause.message}")
                }

                override fun messageArrived(topic: String, message: MqttMessage) {
                    val msgString = message.payload.decodeToString()
                    Log.i("MQTT", "üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: $msgString")

                    parseAndLogDevice(msgString)
                }

                override fun deliveryComplete(token: IMqttDeliveryToken) {
                    Log.i("MQTT", "‚úÖ –î–æ—Å—Ç–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                }
            })

            mqttClient?.connect(options)
            Log.i("MQTT", "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")

            mqttClient?.subscribe("testtopic", 1) // QoS 1 - –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞
            Log.i("MQTT", "üì° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ testtopic")

        } catch (e: MqttException) {
            e.printStackTrace()
            Log.e("MQTT", "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${e.message} (–∫–æ–¥ ${e.reasonCode})")
            return -1;
        }

        return 1;
    }


    fun disconnect() {
        try {
            mqttClient?.disconnect()
            println("üîå MQTT: –û—Ç–∫–ª—é—á–µ–Ω–æ")
        } catch (e: MqttException) {
            e.printStackTrace()
        }
    }

    companion object {
        private const val BROKER_URL = "tcp://m1.wqtt.ru:13058"
        private const val USERNAME = "u_Y6UCHR"
        private const val PASSWORD = "Iv496upx"
        private val CLIENT_ID = "AndroidClient_" + System.currentTimeMillis()
    }
}
